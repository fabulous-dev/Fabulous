// Copyright 2018 Fabulous contributors. See LICENSE.md for license.
namespace Fabulous.DynamicViews

#nowarn "59" // cast always holds
#nowarn "66" // cast always holds
#nowarn "67" // cast always holds

<<<<<<< master
module ViewAttributes =
    let ClassIdAttribKey : AttributeKey<_> = AttributeKey<_>("ClassId")
    let StyleIdAttribKey : AttributeKey<_> = AttributeKey<_>("StyleId")
    let AutomationIdAttribKey : AttributeKey<_> = AttributeKey<_>("AutomationId")
    let ElementCreatedAttribKey : AttributeKey<(obj -> unit)> = AttributeKey<(obj -> unit)>("ElementCreated")
    let ElementViewRefAttribKey : AttributeKey<_> = AttributeKey<_>("ElementViewRef")
    let AnchorXAttribKey : AttributeKey<_> = AttributeKey<_>("AnchorX")
    let AnchorYAttribKey : AttributeKey<_> = AttributeKey<_>("AnchorY")
    let BackgroundColorAttribKey : AttributeKey<_> = AttributeKey<_>("BackgroundColor")
    let HeightRequestAttribKey : AttributeKey<_> = AttributeKey<_>("HeightRequest")
    let InputTransparentAttribKey : AttributeKey<_> = AttributeKey<_>("InputTransparent")
    let IsEnabledAttribKey : AttributeKey<_> = AttributeKey<_>("IsEnabled")
    let IsVisibleAttribKey : AttributeKey<_> = AttributeKey<_>("IsVisible")
    let MinimumHeightRequestAttribKey : AttributeKey<_> = AttributeKey<_>("MinimumHeightRequest")
    let MinimumWidthRequestAttribKey : AttributeKey<_> = AttributeKey<_>("MinimumWidthRequest")
    let OpacityAttribKey : AttributeKey<_> = AttributeKey<_>("Opacity")
    let RotationAttribKey : AttributeKey<_> = AttributeKey<_>("Rotation")
    let RotationXAttribKey : AttributeKey<_> = AttributeKey<_>("RotationX")
    let RotationYAttribKey : AttributeKey<_> = AttributeKey<_>("RotationY")
    let ScaleAttribKey : AttributeKey<_> = AttributeKey<_>("Scale")
    let StyleAttribKey : AttributeKey<_> = AttributeKey<_>("Style")
    let StyleClassAttribKey : AttributeKey<_> = AttributeKey<_>("StyleClass")
    let TranslationXAttribKey : AttributeKey<_> = AttributeKey<_>("TranslationX")
    let TranslationYAttribKey : AttributeKey<_> = AttributeKey<_>("TranslationY")
    let WidthRequestAttribKey : AttributeKey<_> = AttributeKey<_>("WidthRequest")
    let ResourcesAttribKey : AttributeKey<_> = AttributeKey<_>("Resources")
    let StylesAttribKey : AttributeKey<_> = AttributeKey<_>("Styles")
    let StyleSheetsAttribKey : AttributeKey<_> = AttributeKey<_>("StyleSheets")
    let IsTabStopAttribKey : AttributeKey<_> = AttributeKey<_>("IsTabStop")
    let ScaleXAttribKey : AttributeKey<_> = AttributeKey<_>("ScaleX")
    let ScaleYAttribKey : AttributeKey<_> = AttributeKey<_>("ScaleY")
    let TabIndexAttribKey : AttributeKey<_> = AttributeKey<_>("TabIndex")
    let ChildrenReorderedAttribKey : AttributeKey<_> = AttributeKey<_>("ChildrenReordered")
    let MeasureInvalidatedAttribKey : AttributeKey<_> = AttributeKey<_>("MeasureInvalidated")
    let FocusedAttribKey : AttributeKey<_> = AttributeKey<_>("Focused")
    let SizeChangedAttribKey : AttributeKey<_> = AttributeKey<_>("SizeChanged")
    let UnfocusedAttribKey : AttributeKey<_> = AttributeKey<_>("Unfocused")
    let HorizontalOptionsAttribKey : AttributeKey<_> = AttributeKey<_>("HorizontalOptions")
    let VerticalOptionsAttribKey : AttributeKey<_> = AttributeKey<_>("VerticalOptions")
    let MarginAttribKey : AttributeKey<_> = AttributeKey<_>("Margin")
    let GestureRecognizersAttribKey : AttributeKey<_> = AttributeKey<_>("GestureRecognizers")
    let TouchPointsAttribKey : AttributeKey<_> = AttributeKey<_>("TouchPoints")
    let PanUpdatedAttribKey : AttributeKey<_> = AttributeKey<_>("PanUpdated")
    let CommandAttribKey : AttributeKey<_> = AttributeKey<_>("Command")
    let NumberOfTapsRequiredAttribKey : AttributeKey<_> = AttributeKey<_>("NumberOfTapsRequired")
    let NumberOfClicksRequiredAttribKey : AttributeKey<_> = AttributeKey<_>("NumberOfClicksRequired")
    let ButtonsAttribKey : AttributeKey<_> = AttributeKey<_>("Buttons")
    let IsPinchingAttribKey : AttributeKey<_> = AttributeKey<_>("IsPinching")
    let PinchUpdatedAttribKey : AttributeKey<_> = AttributeKey<_>("PinchUpdated")
    let SwipeGestureRecognizerDirectionAttribKey : AttributeKey<_> = AttributeKey<_>("SwipeGestureRecognizerDirection")
    let ThresholdAttribKey : AttributeKey<_> = AttributeKey<_>("Threshold")
    let SwipedAttribKey : AttributeKey<_> = AttributeKey<_>("Swiped")
    let ColorAttribKey : AttributeKey<_> = AttributeKey<_>("Color")
    let IsRunningAttribKey : AttributeKey<_> = AttributeKey<_>("IsRunning")
    let BoxViewCornerRadiusAttribKey : AttributeKey<_> = AttributeKey<_>("BoxViewCornerRadius")
    let ProgressAttribKey : AttributeKey<_> = AttributeKey<_>("Progress")
    let IsClippedToBoundsAttribKey : AttributeKey<_> = AttributeKey<_>("IsClippedToBounds")
    let PaddingAttribKey : AttributeKey<_> = AttributeKey<_>("Padding")
    let ContentAttribKey : AttributeKey<_> = AttributeKey<_>("Content")
    let ScrollOrientationAttribKey : AttributeKey<_> = AttributeKey<_>("ScrollOrientation")
    let HorizontalScrollBarVisibilityAttribKey : AttributeKey<_> = AttributeKey<_>("HorizontalScrollBarVisibility")
    let VerticalScrollBarVisibilityAttribKey : AttributeKey<_> = AttributeKey<_>("VerticalScrollBarVisibility")
    let ScrollToAttribKey : AttributeKey<_> = AttributeKey<_>("ScrollTo")
    let ScrolledAttribKey : AttributeKey<_> = AttributeKey<_>("Scrolled")
    let CancelButtonColorAttribKey : AttributeKey<_> = AttributeKey<_>("CancelButtonColor")
    let FontFamilyAttribKey : AttributeKey<_> = AttributeKey<_>("FontFamily")
    let FontAttributesAttribKey : AttributeKey<_> = AttributeKey<_>("FontAttributes")
    let FontSizeAttribKey : AttributeKey<_> = AttributeKey<_>("FontSize")
    let HorizontalTextAlignmentAttribKey : AttributeKey<_> = AttributeKey<_>("HorizontalTextAlignment")
    let PlaceholderAttribKey : AttributeKey<_> = AttributeKey<_>("Placeholder")
    let PlaceholderColorAttribKey : AttributeKey<_> = AttributeKey<_>("PlaceholderColor")
    let SearchBarCommandAttribKey : AttributeKey<_> = AttributeKey<_>("SearchBarCommand")
    let SearchBarCanExecuteAttribKey : AttributeKey<_> = AttributeKey<_>("SearchBarCanExecute")
    let TextAttribKey : AttributeKey<_> = AttributeKey<_>("Text")
    let TextColorAttribKey : AttributeKey<_> = AttributeKey<_>("TextColor")
    let SearchBarTextChangedAttribKey : AttributeKey<_> = AttributeKey<_>("SearchBarTextChanged")
    let ButtonCommandAttribKey : AttributeKey<_> = AttributeKey<_>("ButtonCommand")
    let ButtonCanExecuteAttribKey : AttributeKey<_> = AttributeKey<_>("ButtonCanExecute")
    let BorderColorAttribKey : AttributeKey<_> = AttributeKey<_>("BorderColor")
    let BorderWidthAttribKey : AttributeKey<_> = AttributeKey<_>("BorderWidth")
    let CommandParameterAttribKey : AttributeKey<_> = AttributeKey<_>("CommandParameter")
    let ContentLayoutAttribKey : AttributeKey<_> = AttributeKey<_>("ContentLayout")
    let ButtonCornerRadiusAttribKey : AttributeKey<_> = AttributeKey<_>("ButtonCornerRadius")
    let ButtonImageSourceAttribKey : AttributeKey<_> = AttributeKey<_>("ButtonImageSource")
    let MinimumMaximumAttribKey : AttributeKey<_> = AttributeKey<_>("MinimumMaximum")
    let ValueAttribKey : AttributeKey<_> = AttributeKey<_>("Value")
    let ValueChangedAttribKey : AttributeKey<_> = AttributeKey<_>("ValueChanged")
    let IncrementAttribKey : AttributeKey<_> = AttributeKey<_>("Increment")
    let IsToggledAttribKey : AttributeKey<_> = AttributeKey<_>("IsToggled")
    let ToggledAttribKey : AttributeKey<_> = AttributeKey<_>("Toggled")
    let OnColorAttribKey : AttributeKey<_> = AttributeKey<_>("OnColor")
    let HeightAttribKey : AttributeKey<_> = AttributeKey<_>("Height")
    let OnAttribKey : AttributeKey<_> = AttributeKey<_>("On")
    let OnChangedAttribKey : AttributeKey<_> = AttributeKey<_>("OnChanged")
    let IntentAttribKey : AttributeKey<_> = AttributeKey<_>("Intent")
    let HasUnevenRowsAttribKey : AttributeKey<_> = AttributeKey<_>("HasUnevenRows")
    let RowHeightAttribKey : AttributeKey<_> = AttributeKey<_>("RowHeight")
    let TableRootAttribKey : AttributeKey<_> = AttributeKey<_>("TableRoot")
    let RowDefinitionHeightAttribKey : AttributeKey<_> = AttributeKey<_>("RowDefinitionHeight")
    let ColumnDefinitionWidthAttribKey : AttributeKey<_> = AttributeKey<_>("ColumnDefinitionWidth")
    let GridRowDefinitionsAttribKey : AttributeKey<_> = AttributeKey<_>("GridRowDefinitions")
    let GridColumnDefinitionsAttribKey : AttributeKey<_> = AttributeKey<_>("GridColumnDefinitions")
    let RowSpacingAttribKey : AttributeKey<_> = AttributeKey<_>("RowSpacing")
    let ColumnSpacingAttribKey : AttributeKey<_> = AttributeKey<_>("ColumnSpacing")
    let ChildrenAttribKey : AttributeKey<_> = AttributeKey<_>("Children")
    let GridRowAttribKey : AttributeKey<_> = AttributeKey<_>("GridRow")
    let GridRowSpanAttribKey : AttributeKey<_> = AttributeKey<_>("GridRowSpan")
    let GridColumnAttribKey : AttributeKey<_> = AttributeKey<_>("GridColumn")
    let GridColumnSpanAttribKey : AttributeKey<_> = AttributeKey<_>("GridColumnSpan")
    let LayoutBoundsAttribKey : AttributeKey<_> = AttributeKey<_>("LayoutBounds")
    let LayoutFlagsAttribKey : AttributeKey<_> = AttributeKey<_>("LayoutFlags")
    let BoundsConstraintAttribKey : AttributeKey<_> = AttributeKey<_>("BoundsConstraint")
    let HeightConstraintAttribKey : AttributeKey<_> = AttributeKey<_>("HeightConstraint")
    let WidthConstraintAttribKey : AttributeKey<_> = AttributeKey<_>("WidthConstraint")
    let XConstraintAttribKey : AttributeKey<_> = AttributeKey<_>("XConstraint")
    let YConstraintAttribKey : AttributeKey<_> = AttributeKey<_>("YConstraint")
    let AlignContentAttribKey : AttributeKey<_> = AttributeKey<_>("AlignContent")
    let AlignItemsAttribKey : AttributeKey<_> = AttributeKey<_>("AlignItems")
    let FlexLayoutDirectionAttribKey : AttributeKey<_> = AttributeKey<_>("FlexLayoutDirection")
    let PositionAttribKey : AttributeKey<_> = AttributeKey<_>("Position")
    let WrapAttribKey : AttributeKey<_> = AttributeKey<_>("Wrap")
    let JustifyContentAttribKey : AttributeKey<_> = AttributeKey<_>("JustifyContent")
    let FlexAlignSelfAttribKey : AttributeKey<_> = AttributeKey<_>("FlexAlignSelf")
    let FlexOrderAttribKey : AttributeKey<_> = AttributeKey<_>("FlexOrder")
    let FlexBasisAttribKey : AttributeKey<_> = AttributeKey<_>("FlexBasis")
    let FlexGrowAttribKey : AttributeKey<_> = AttributeKey<_>("FlexGrow")
    let FlexShrinkAttribKey : AttributeKey<_> = AttributeKey<_>("FlexShrink")
    let DateAttribKey : AttributeKey<_> = AttributeKey<_>("Date")
    let FormatAttribKey : AttributeKey<_> = AttributeKey<_>("Format")
    let MinimumDateAttribKey : AttributeKey<_> = AttributeKey<_>("MinimumDate")
    let MaximumDateAttribKey : AttributeKey<_> = AttributeKey<_>("MaximumDate")
    let DateSelectedAttribKey : AttributeKey<_> = AttributeKey<_>("DateSelected")
    let PickerItemsSourceAttribKey : AttributeKey<_> = AttributeKey<_>("PickerItemsSource")
    let SelectedIndexAttribKey : AttributeKey<_> = AttributeKey<_>("SelectedIndex")
    let TitleAttribKey : AttributeKey<_> = AttributeKey<_>("Title")
    let SelectedIndexChangedAttribKey : AttributeKey<_> = AttributeKey<_>("SelectedIndexChanged")
    let FrameCornerRadiusAttribKey : AttributeKey<_> = AttributeKey<_>("FrameCornerRadius")
    let HasShadowAttribKey : AttributeKey<_> = AttributeKey<_>("HasShadow")
    let ImageSourceAttribKey : AttributeKey<_> = AttributeKey<_>("ImageSource")
    let AspectAttribKey : AttributeKey<_> = AttributeKey<_>("Aspect")
    let IsOpaqueAttribKey : AttributeKey<_> = AttributeKey<_>("IsOpaque")
    let ImageButtonCommandAttribKey : AttributeKey<_> = AttributeKey<_>("ImageButtonCommand")
    let ImageButtonCornerRadiusAttribKey : AttributeKey<_> = AttributeKey<_>("ImageButtonCornerRadius")
    let ClickedAttribKey : AttributeKey<_> = AttributeKey<_>("Clicked")
    let PressedAttribKey : AttributeKey<_> = AttributeKey<_>("Pressed")
    let ReleasedAttribKey : AttributeKey<_> = AttributeKey<_>("Released")
    let KeyboardAttribKey : AttributeKey<_> = AttributeKey<_>("Keyboard")
    let EditorCompletedAttribKey : AttributeKey<_> = AttributeKey<_>("EditorCompleted")
    let TextChangedAttribKey : AttributeKey<_> = AttributeKey<_>("TextChanged")
    let AutoSizeAttribKey : AttributeKey<_> = AttributeKey<_>("AutoSize")
    let IsPasswordAttribKey : AttributeKey<_> = AttributeKey<_>("IsPassword")
    let EntryCompletedAttribKey : AttributeKey<_> = AttributeKey<_>("EntryCompleted")
    let IsTextPredictionEnabledAttribKey : AttributeKey<_> = AttributeKey<_>("IsTextPredictionEnabled")
    let ReturnTypeAttribKey : AttributeKey<_> = AttributeKey<_>("ReturnType")
    let ReturnCommandAttribKey : AttributeKey<_> = AttributeKey<_>("ReturnCommand")
    let CursorPositionAttribKey : AttributeKey<_> = AttributeKey<_>("CursorPosition")
    let SelectionLengthAttribKey : AttributeKey<_> = AttributeKey<_>("SelectionLength")
    let LabelAttribKey : AttributeKey<_> = AttributeKey<_>("Label")
    let EntryCellTextChangedAttribKey : AttributeKey<_> = AttributeKey<_>("EntryCellTextChanged")
    let VerticalTextAlignmentAttribKey : AttributeKey<_> = AttributeKey<_>("VerticalTextAlignment")
    let FormattedTextAttribKey : AttributeKey<_> = AttributeKey<_>("FormattedText")
    let LineBreakModeAttribKey : AttributeKey<_> = AttributeKey<_>("LineBreakMode")
    let LineHeightAttribKey : AttributeKey<_> = AttributeKey<_>("LineHeight")
    let MaxLinesAttribKey : AttributeKey<_> = AttributeKey<_>("MaxLines")
    let TextDecorationsAttribKey : AttributeKey<_> = AttributeKey<_>("TextDecorations")
    let StackOrientationAttribKey : AttributeKey<_> = AttributeKey<_>("StackOrientation")
    let SpacingAttribKey : AttributeKey<_> = AttributeKey<_>("Spacing")
    let ForegroundColorAttribKey : AttributeKey<_> = AttributeKey<_>("ForegroundColor")
    let PropertyChangedAttribKey : AttributeKey<_> = AttributeKey<_>("PropertyChanged")
    let SpansAttribKey : AttributeKey<_> = AttributeKey<_>("Spans")
    let TimeAttribKey : AttributeKey<_> = AttributeKey<_>("Time")
    let WebSourceAttribKey : AttributeKey<_> = AttributeKey<_>("WebSource")
    let ReloadAttribKey : AttributeKey<_> = AttributeKey<_>("Reload")
    let NavigatedAttribKey : AttributeKey<_> = AttributeKey<_>("Navigated")
    let NavigatingAttribKey : AttributeKey<_> = AttributeKey<_>("Navigating")
    let ReloadRequestedAttribKey : AttributeKey<_> = AttributeKey<_>("ReloadRequested")
    let BackgroundImageAttribKey : AttributeKey<_> = AttributeKey<_>("BackgroundImage")
    let IconAttribKey : AttributeKey<_> = AttributeKey<_>("Icon")
    let IsBusyAttribKey : AttributeKey<_> = AttributeKey<_>("IsBusy")
    let ToolbarItemsAttribKey : AttributeKey<_> = AttributeKey<_>("ToolbarItems")
    let UseSafeAreaAttribKey : AttributeKey<_> = AttributeKey<_>("UseSafeArea")
    let Page_AppearingAttribKey : AttributeKey<_> = AttributeKey<_>("Page_Appearing")
    let Page_DisappearingAttribKey : AttributeKey<_> = AttributeKey<_>("Page_Disappearing")
    let Page_LayoutChangedAttribKey : AttributeKey<_> = AttributeKey<_>("Page_LayoutChanged")
    let CarouselPage_CurrentPageAttribKey : AttributeKey<_> = AttributeKey<_>("CarouselPage_CurrentPage")
    let CarouselPage_CurrentPageChangedAttribKey : AttributeKey<_> = AttributeKey<_>("CarouselPage_CurrentPageChanged")
    let PagesAttribKey : AttributeKey<_> = AttributeKey<_>("Pages")
    let BackButtonTitleAttribKey : AttributeKey<_> = AttributeKey<_>("BackButtonTitle")
    let HasBackButtonAttribKey : AttributeKey<_> = AttributeKey<_>("HasBackButton")
    let HasNavigationBarAttribKey : AttributeKey<_> = AttributeKey<_>("HasNavigationBar")
    let TitleIconAttribKey : AttributeKey<_> = AttributeKey<_>("TitleIcon")
    let TitleViewAttribKey : AttributeKey<_> = AttributeKey<_>("TitleView")
    let BarBackgroundColorAttribKey : AttributeKey<_> = AttributeKey<_>("BarBackgroundColor")
    let BarTextColorAttribKey : AttributeKey<_> = AttributeKey<_>("BarTextColor")
    let PoppedAttribKey : AttributeKey<_> = AttributeKey<_>("Popped")
    let PoppedToRootAttribKey : AttributeKey<_> = AttributeKey<_>("PoppedToRoot")
    let PushedAttribKey : AttributeKey<_> = AttributeKey<_>("Pushed")
    let TabbedPage_CurrentPageAttribKey : AttributeKey<_> = AttributeKey<_>("TabbedPage_CurrentPage")
    let TabbedPage_CurrentPageChangedAttribKey : AttributeKey<_> = AttributeKey<_>("TabbedPage_CurrentPageChanged")
    let OnSizeAllocatedCallbackAttribKey : AttributeKey<_> = AttributeKey<_>("OnSizeAllocatedCallback")
    let MasterAttribKey : AttributeKey<_> = AttributeKey<_>("Master")
    let DetailAttribKey : AttributeKey<_> = AttributeKey<_>("Detail")
    let IsGestureEnabledAttribKey : AttributeKey<_> = AttributeKey<_>("IsGestureEnabled")
    let IsPresentedAttribKey : AttributeKey<_> = AttributeKey<_>("IsPresented")
    let MasterBehaviorAttribKey : AttributeKey<_> = AttributeKey<_>("MasterBehavior")
    let IsPresentedChangedAttribKey : AttributeKey<_> = AttributeKey<_>("IsPresentedChanged")
    let AcceleratorAttribKey : AttributeKey<_> = AttributeKey<_>("Accelerator")
    let TextDetailAttribKey : AttributeKey<_> = AttributeKey<_>("TextDetail")
    let TextDetailColorAttribKey : AttributeKey<_> = AttributeKey<_>("TextDetailColor")
    let TextCellCommandAttribKey : AttributeKey<_> = AttributeKey<_>("TextCellCommand")
    let TextCellCanExecuteAttribKey : AttributeKey<_> = AttributeKey<_>("TextCellCanExecute")
    let OrderAttribKey : AttributeKey<_> = AttributeKey<_>("Order")
    let PriorityAttribKey : AttributeKey<_> = AttributeKey<_>("Priority")
    let ViewAttribKey : AttributeKey<_> = AttributeKey<_>("View")
    let ListViewItemsAttribKey : AttributeKey<_> = AttributeKey<_>("ListViewItems")
    let FooterAttribKey : AttributeKey<_> = AttributeKey<_>("Footer")
    let HeaderAttribKey : AttributeKey<_> = AttributeKey<_>("Header")
    let HeaderTemplateAttribKey : AttributeKey<_> = AttributeKey<_>("HeaderTemplate")
    let IsGroupingEnabledAttribKey : AttributeKey<_> = AttributeKey<_>("IsGroupingEnabled")
    let IsPullToRefreshEnabledAttribKey : AttributeKey<_> = AttributeKey<_>("IsPullToRefreshEnabled")
    let IsRefreshingAttribKey : AttributeKey<_> = AttributeKey<_>("IsRefreshing")
    let RefreshCommandAttribKey : AttributeKey<_> = AttributeKey<_>("RefreshCommand")
    let ListView_SelectedItemAttribKey : AttributeKey<_> = AttributeKey<_>("ListView_SelectedItem")
    let ListView_SeparatorVisibilityAttribKey : AttributeKey<_> = AttributeKey<_>("ListView_SeparatorVisibility")
    let ListView_SeparatorColorAttribKey : AttributeKey<_> = AttributeKey<_>("ListView_SeparatorColor")
    let ListView_ItemAppearingAttribKey : AttributeKey<_> = AttributeKey<_>("ListView_ItemAppearing")
    let ListView_ItemDisappearingAttribKey : AttributeKey<_> = AttributeKey<_>("ListView_ItemDisappearing")
    let ListView_ItemSelectedAttribKey : AttributeKey<_> = AttributeKey<_>("ListView_ItemSelected")
    let ListView_ItemTappedAttribKey : AttributeKey<_> = AttributeKey<_>("ListView_ItemTapped")
    let ListView_RefreshingAttribKey : AttributeKey<_> = AttributeKey<_>("ListView_Refreshing")
    let SelectionModeAttribKey : AttributeKey<_> = AttributeKey<_>("SelectionMode")
    let ListViewGrouped_ItemsSourceAttribKey : AttributeKey<_> = AttributeKey<_>("ListViewGrouped_ItemsSource")
    let ListViewGrouped_ShowJumpListAttribKey : AttributeKey<_> = AttributeKey<_>("ListViewGrouped_ShowJumpList")
    let ListViewGrouped_SelectedItemAttribKey : AttributeKey<_> = AttributeKey<_>("ListViewGrouped_SelectedItem")
    let SeparatorVisibilityAttribKey : AttributeKey<_> = AttributeKey<_>("SeparatorVisibility")
    let SeparatorColorAttribKey : AttributeKey<_> = AttributeKey<_>("SeparatorColor")
    let ListViewGrouped_ItemAppearingAttribKey : AttributeKey<_> = AttributeKey<_>("ListViewGrouped_ItemAppearing")
    let ListViewGrouped_ItemDisappearingAttribKey : AttributeKey<_> = AttributeKey<_>("ListViewGrouped_ItemDisappearing")
    let ListViewGrouped_ItemSelectedAttribKey : AttributeKey<_> = AttributeKey<_>("ListViewGrouped_ItemSelected")
    let ListViewGrouped_ItemTappedAttribKey : AttributeKey<_> = AttributeKey<_>("ListViewGrouped_ItemTapped")
    let RefreshingAttribKey : AttributeKey<_> = AttributeKey<_>("Refreshing")

type ViewProto() =
    static member val ProtoElement : ViewElement option = None with get, set
    static member val ProtoVisualElement : ViewElement option = None with get, set
    static member val ProtoView : ViewElement option = None with get, set
    static member val ProtoIGestureRecognizer : ViewElement option = None with get, set
    static member val ProtoPanGestureRecognizer : ViewElement option = None with get, set
    static member val ProtoTapGestureRecognizer : ViewElement option = None with get, set
    static member val ProtoClickGestureRecognizer : ViewElement option = None with get, set
    static member val ProtoPinchGestureRecognizer : ViewElement option = None with get, set
    static member val ProtoSwipeGestureRecognizer : ViewElement option = None with get, set
    static member val ProtoActivityIndicator : ViewElement option = None with get, set
    static member val ProtoBoxView : ViewElement option = None with get, set
    static member val ProtoProgressBar : ViewElement option = None with get, set
    static member val ProtoLayout : ViewElement option = None with get, set
    static member val ProtoScrollView : ViewElement option = None with get, set
    static member val ProtoSearchBar : ViewElement option = None with get, set
    static member val ProtoButton : ViewElement option = None with get, set
    static member val ProtoSlider : ViewElement option = None with get, set
    static member val ProtoStepper : ViewElement option = None with get, set
    static member val ProtoSwitch : ViewElement option = None with get, set
    static member val ProtoCell : ViewElement option = None with get, set
    static member val ProtoSwitchCell : ViewElement option = None with get, set
    static member val ProtoTableView : ViewElement option = None with get, set
    static member val ProtoRowDefinition : ViewElement option = None with get, set
    static member val ProtoColumnDefinition : ViewElement option = None with get, set
    static member val ProtoGrid : ViewElement option = None with get, set
    static member val ProtoAbsoluteLayout : ViewElement option = None with get, set
    static member val ProtoRelativeLayout : ViewElement option = None with get, set
    static member val ProtoFlexLayout : ViewElement option = None with get, set
    static member val ProtoTemplatedView : ViewElement option = None with get, set
    static member val ProtoContentView : ViewElement option = None with get, set
    static member val ProtoDatePicker : ViewElement option = None with get, set
    static member val ProtoPicker : ViewElement option = None with get, set
    static member val ProtoFrame : ViewElement option = None with get, set
    static member val ProtoImage : ViewElement option = None with get, set
    static member val ProtoImageButton : ViewElement option = None with get, set
    static member val ProtoInputView : ViewElement option = None with get, set
    static member val ProtoEditor : ViewElement option = None with get, set
    static member val ProtoEntry : ViewElement option = None with get, set
    static member val ProtoEntryCell : ViewElement option = None with get, set
    static member val ProtoLabel : ViewElement option = None with get, set
    static member val ProtoStackLayout : ViewElement option = None with get, set
    static member val ProtoSpan : ViewElement option = None with get, set
    static member val ProtoFormattedString : ViewElement option = None with get, set
    static member val ProtoTimePicker : ViewElement option = None with get, set
    static member val ProtoWebView : ViewElement option = None with get, set
    static member val ProtoPage : ViewElement option = None with get, set
    static member val ProtoCarouselPage : ViewElement option = None with get, set
    static member val ProtoNavigationPage : ViewElement option = None with get, set
    static member val ProtoTabbedPage : ViewElement option = None with get, set
    static member val ProtoContentPage : ViewElement option = None with get, set
    static member val ProtoMasterDetailPage : ViewElement option = None with get, set
    static member val ProtoMenuItem : ViewElement option = None with get, set
    static member val ProtoTextCell : ViewElement option = None with get, set
    static member val ProtoToolbarItem : ViewElement option = None with get, set
    static member val ProtoImageCell : ViewElement option = None with get, set
    static member val ProtoViewCell : ViewElement option = None with get, set
    static member val ProtoListView : ViewElement option = None with get, set
    static member val ProtoListViewGrouped : ViewElement option = None with get, set
=======
type View() =

    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ClassIdAttribKey : AttributeKey<_> = AttributeKey<_>("ClassId")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _StyleIdAttribKey : AttributeKey<_> = AttributeKey<_>("StyleId")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _AutomationIdAttribKey : AttributeKey<_> = AttributeKey<_>("AutomationId")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ElementCreatedAttribKey : AttributeKey<_> = AttributeKey<_>("ElementCreated")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ElementViewRefAttribKey : AttributeKey<_> = AttributeKey<_>("ElementViewRef")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _AnchorXAttribKey : AttributeKey<_> = AttributeKey<_>("AnchorX")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _AnchorYAttribKey : AttributeKey<_> = AttributeKey<_>("AnchorY")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _BackgroundColorAttribKey : AttributeKey<_> = AttributeKey<_>("BackgroundColor")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _HeightRequestAttribKey : AttributeKey<_> = AttributeKey<_>("HeightRequest")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _InputTransparentAttribKey : AttributeKey<_> = AttributeKey<_>("InputTransparent")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _IsEnabledAttribKey : AttributeKey<_> = AttributeKey<_>("IsEnabled")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _IsVisibleAttribKey : AttributeKey<_> = AttributeKey<_>("IsVisible")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _MinimumHeightRequestAttribKey : AttributeKey<_> = AttributeKey<_>("MinimumHeightRequest")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _MinimumWidthRequestAttribKey : AttributeKey<_> = AttributeKey<_>("MinimumWidthRequest")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _OpacityAttribKey : AttributeKey<_> = AttributeKey<_>("Opacity")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _RotationAttribKey : AttributeKey<_> = AttributeKey<_>("Rotation")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _RotationXAttribKey : AttributeKey<_> = AttributeKey<_>("RotationX")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _RotationYAttribKey : AttributeKey<_> = AttributeKey<_>("RotationY")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ScaleAttribKey : AttributeKey<_> = AttributeKey<_>("Scale")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _StyleAttribKey : AttributeKey<_> = AttributeKey<_>("Style")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _StyleClassAttribKey : AttributeKey<_> = AttributeKey<_>("StyleClass")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _TranslationXAttribKey : AttributeKey<_> = AttributeKey<_>("TranslationX")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _TranslationYAttribKey : AttributeKey<_> = AttributeKey<_>("TranslationY")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _WidthRequestAttribKey : AttributeKey<_> = AttributeKey<_>("WidthRequest")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ResourcesAttribKey : AttributeKey<_> = AttributeKey<_>("Resources")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _StylesAttribKey : AttributeKey<_> = AttributeKey<_>("Styles")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _StyleSheetsAttribKey : AttributeKey<_> = AttributeKey<_>("StyleSheets")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _IsTabStopAttribKey : AttributeKey<_> = AttributeKey<_>("IsTabStop")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ScaleXAttribKey : AttributeKey<_> = AttributeKey<_>("ScaleX")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ScaleYAttribKey : AttributeKey<_> = AttributeKey<_>("ScaleY")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _TabIndexAttribKey : AttributeKey<_> = AttributeKey<_>("TabIndex")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _HorizontalOptionsAttribKey : AttributeKey<_> = AttributeKey<_>("HorizontalOptions")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _VerticalOptionsAttribKey : AttributeKey<_> = AttributeKey<_>("VerticalOptions")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _MarginAttribKey : AttributeKey<_> = AttributeKey<_>("Margin")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _GestureRecognizersAttribKey : AttributeKey<_> = AttributeKey<_>("GestureRecognizers")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _TouchPointsAttribKey : AttributeKey<_> = AttributeKey<_>("TouchPoints")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _PanUpdatedAttribKey : AttributeKey<_> = AttributeKey<_>("PanUpdated")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _CommandAttribKey : AttributeKey<_> = AttributeKey<_>("Command")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _NumberOfTapsRequiredAttribKey : AttributeKey<_> = AttributeKey<_>("NumberOfTapsRequired")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _NumberOfClicksRequiredAttribKey : AttributeKey<_> = AttributeKey<_>("NumberOfClicksRequired")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ButtonsAttribKey : AttributeKey<_> = AttributeKey<_>("Buttons")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _IsPinchingAttribKey : AttributeKey<_> = AttributeKey<_>("IsPinching")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _PinchUpdatedAttribKey : AttributeKey<_> = AttributeKey<_>("PinchUpdated")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _SwipeGestureRecognizerDirectionAttribKey : AttributeKey<_> = AttributeKey<_>("SwipeGestureRecognizerDirection")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ThresholdAttribKey : AttributeKey<_> = AttributeKey<_>("Threshold")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _SwipedAttribKey : AttributeKey<_> = AttributeKey<_>("Swiped")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ColorAttribKey : AttributeKey<_> = AttributeKey<_>("Color")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _IsRunningAttribKey : AttributeKey<_> = AttributeKey<_>("IsRunning")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _BoxViewCornerRadiusAttribKey : AttributeKey<_> = AttributeKey<_>("BoxViewCornerRadius")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ProgressAttribKey : AttributeKey<_> = AttributeKey<_>("Progress")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _IsClippedToBoundsAttribKey : AttributeKey<_> = AttributeKey<_>("IsClippedToBounds")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _PaddingAttribKey : AttributeKey<_> = AttributeKey<_>("Padding")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ContentAttribKey : AttributeKey<_> = AttributeKey<_>("Content")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ScrollOrientationAttribKey : AttributeKey<_> = AttributeKey<_>("ScrollOrientation")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _HorizontalScrollBarVisibilityAttribKey : AttributeKey<_> = AttributeKey<_>("HorizontalScrollBarVisibility")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _VerticalScrollBarVisibilityAttribKey : AttributeKey<_> = AttributeKey<_>("VerticalScrollBarVisibility")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _CancelButtonColorAttribKey : AttributeKey<_> = AttributeKey<_>("CancelButtonColor")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _FontFamilyAttribKey : AttributeKey<_> = AttributeKey<_>("FontFamily")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _FontAttributesAttribKey : AttributeKey<_> = AttributeKey<_>("FontAttributes")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _FontSizeAttribKey : AttributeKey<_> = AttributeKey<_>("FontSize")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _HorizontalTextAlignmentAttribKey : AttributeKey<_> = AttributeKey<_>("HorizontalTextAlignment")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _PlaceholderAttribKey : AttributeKey<_> = AttributeKey<_>("Placeholder")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _PlaceholderColorAttribKey : AttributeKey<_> = AttributeKey<_>("PlaceholderColor")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _SearchBarCommandAttribKey : AttributeKey<_> = AttributeKey<_>("SearchBarCommand")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _SearchBarCanExecuteAttribKey : AttributeKey<_> = AttributeKey<_>("SearchBarCanExecute")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _TextAttribKey : AttributeKey<_> = AttributeKey<_>("Text")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _TextColorAttribKey : AttributeKey<_> = AttributeKey<_>("TextColor")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _SearchBarTextChangedAttribKey : AttributeKey<_> = AttributeKey<_>("SearchBarTextChanged")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ButtonCommandAttribKey : AttributeKey<_> = AttributeKey<_>("ButtonCommand")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ButtonCanExecuteAttribKey : AttributeKey<_> = AttributeKey<_>("ButtonCanExecute")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _BorderColorAttribKey : AttributeKey<_> = AttributeKey<_>("BorderColor")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _BorderWidthAttribKey : AttributeKey<_> = AttributeKey<_>("BorderWidth")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _CommandParameterAttribKey : AttributeKey<_> = AttributeKey<_>("CommandParameter")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ContentLayoutAttribKey : AttributeKey<_> = AttributeKey<_>("ContentLayout")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ButtonCornerRadiusAttribKey : AttributeKey<_> = AttributeKey<_>("ButtonCornerRadius")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ButtonImageSourceAttribKey : AttributeKey<_> = AttributeKey<_>("ButtonImageSource")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _MinimumMaximumAttribKey : AttributeKey<_> = AttributeKey<_>("MinimumMaximum")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ValueAttribKey : AttributeKey<_> = AttributeKey<_>("Value")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ValueChangedAttribKey : AttributeKey<_> = AttributeKey<_>("ValueChanged")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _IncrementAttribKey : AttributeKey<_> = AttributeKey<_>("Increment")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _IsToggledAttribKey : AttributeKey<_> = AttributeKey<_>("IsToggled")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ToggledAttribKey : AttributeKey<_> = AttributeKey<_>("Toggled")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _OnColorAttribKey : AttributeKey<_> = AttributeKey<_>("OnColor")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _HeightAttribKey : AttributeKey<_> = AttributeKey<_>("Height")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _OnAttribKey : AttributeKey<_> = AttributeKey<_>("On")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _OnChangedAttribKey : AttributeKey<_> = AttributeKey<_>("OnChanged")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _IntentAttribKey : AttributeKey<_> = AttributeKey<_>("Intent")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _HasUnevenRowsAttribKey : AttributeKey<_> = AttributeKey<_>("HasUnevenRows")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _RowHeightAttribKey : AttributeKey<_> = AttributeKey<_>("RowHeight")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _TableRootAttribKey : AttributeKey<_> = AttributeKey<_>("TableRoot")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _RowDefinitionHeightAttribKey : AttributeKey<_> = AttributeKey<_>("RowDefinitionHeight")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ColumnDefinitionWidthAttribKey : AttributeKey<_> = AttributeKey<_>("ColumnDefinitionWidth")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _GridRowDefinitionsAttribKey : AttributeKey<_> = AttributeKey<_>("GridRowDefinitions")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _GridColumnDefinitionsAttribKey : AttributeKey<_> = AttributeKey<_>("GridColumnDefinitions")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _RowSpacingAttribKey : AttributeKey<_> = AttributeKey<_>("RowSpacing")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ColumnSpacingAttribKey : AttributeKey<_> = AttributeKey<_>("ColumnSpacing")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ChildrenAttribKey : AttributeKey<_> = AttributeKey<_>("Children")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _GridRowAttribKey : AttributeKey<_> = AttributeKey<_>("GridRow")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _GridRowSpanAttribKey : AttributeKey<_> = AttributeKey<_>("GridRowSpan")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _GridColumnAttribKey : AttributeKey<_> = AttributeKey<_>("GridColumn")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _GridColumnSpanAttribKey : AttributeKey<_> = AttributeKey<_>("GridColumnSpan")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _LayoutBoundsAttribKey : AttributeKey<_> = AttributeKey<_>("LayoutBounds")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _LayoutFlagsAttribKey : AttributeKey<_> = AttributeKey<_>("LayoutFlags")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _BoundsConstraintAttribKey : AttributeKey<_> = AttributeKey<_>("BoundsConstraint")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _HeightConstraintAttribKey : AttributeKey<_> = AttributeKey<_>("HeightConstraint")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _WidthConstraintAttribKey : AttributeKey<_> = AttributeKey<_>("WidthConstraint")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _XConstraintAttribKey : AttributeKey<_> = AttributeKey<_>("XConstraint")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _YConstraintAttribKey : AttributeKey<_> = AttributeKey<_>("YConstraint")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _AlignContentAttribKey : AttributeKey<_> = AttributeKey<_>("AlignContent")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _AlignItemsAttribKey : AttributeKey<_> = AttributeKey<_>("AlignItems")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _FlexLayoutDirectionAttribKey : AttributeKey<_> = AttributeKey<_>("FlexLayoutDirection")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _PositionAttribKey : AttributeKey<_> = AttributeKey<_>("Position")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _WrapAttribKey : AttributeKey<_> = AttributeKey<_>("Wrap")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _JustifyContentAttribKey : AttributeKey<_> = AttributeKey<_>("JustifyContent")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _FlexAlignSelfAttribKey : AttributeKey<_> = AttributeKey<_>("FlexAlignSelf")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _FlexOrderAttribKey : AttributeKey<_> = AttributeKey<_>("FlexOrder")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _FlexBasisAttribKey : AttributeKey<_> = AttributeKey<_>("FlexBasis")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _FlexGrowAttribKey : AttributeKey<_> = AttributeKey<_>("FlexGrow")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _FlexShrinkAttribKey : AttributeKey<_> = AttributeKey<_>("FlexShrink")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _DateAttribKey : AttributeKey<_> = AttributeKey<_>("Date")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _FormatAttribKey : AttributeKey<_> = AttributeKey<_>("Format")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _MinimumDateAttribKey : AttributeKey<_> = AttributeKey<_>("MinimumDate")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _MaximumDateAttribKey : AttributeKey<_> = AttributeKey<_>("MaximumDate")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _DateSelectedAttribKey : AttributeKey<_> = AttributeKey<_>("DateSelected")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _PickerItemsSourceAttribKey : AttributeKey<_> = AttributeKey<_>("PickerItemsSource")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _SelectedIndexAttribKey : AttributeKey<_> = AttributeKey<_>("SelectedIndex")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _TitleAttribKey : AttributeKey<_> = AttributeKey<_>("Title")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _SelectedIndexChangedAttribKey : AttributeKey<_> = AttributeKey<_>("SelectedIndexChanged")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _FrameCornerRadiusAttribKey : AttributeKey<_> = AttributeKey<_>("FrameCornerRadius")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _HasShadowAttribKey : AttributeKey<_> = AttributeKey<_>("HasShadow")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ImageSourceAttribKey : AttributeKey<_> = AttributeKey<_>("ImageSource")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _AspectAttribKey : AttributeKey<_> = AttributeKey<_>("Aspect")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _IsOpaqueAttribKey : AttributeKey<_> = AttributeKey<_>("IsOpaque")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ImageButtonCommandAttribKey : AttributeKey<_> = AttributeKey<_>("ImageButtonCommand")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ImageButtonCornerRadiusAttribKey : AttributeKey<_> = AttributeKey<_>("ImageButtonCornerRadius")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ClickedAttribKey : AttributeKey<_> = AttributeKey<_>("Clicked")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _PressedAttribKey : AttributeKey<_> = AttributeKey<_>("Pressed")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ReleasedAttribKey : AttributeKey<_> = AttributeKey<_>("Released")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _KeyboardAttribKey : AttributeKey<_> = AttributeKey<_>("Keyboard")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _EditorCompletedAttribKey : AttributeKey<_> = AttributeKey<_>("EditorCompleted")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _TextChangedAttribKey : AttributeKey<_> = AttributeKey<_>("TextChanged")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _AutoSizeAttribKey : AttributeKey<_> = AttributeKey<_>("AutoSize")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _IsPasswordAttribKey : AttributeKey<_> = AttributeKey<_>("IsPassword")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _EntryCompletedAttribKey : AttributeKey<_> = AttributeKey<_>("EntryCompleted")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _IsTextPredictionEnabledAttribKey : AttributeKey<_> = AttributeKey<_>("IsTextPredictionEnabled")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ReturnTypeAttribKey : AttributeKey<_> = AttributeKey<_>("ReturnType")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ReturnCommandAttribKey : AttributeKey<_> = AttributeKey<_>("ReturnCommand")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _CursorPositionAttribKey : AttributeKey<_> = AttributeKey<_>("CursorPosition")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _SelectionLengthAttribKey : AttributeKey<_> = AttributeKey<_>("SelectionLength")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _LabelAttribKey : AttributeKey<_> = AttributeKey<_>("Label")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _EntryCellTextChangedAttribKey : AttributeKey<_> = AttributeKey<_>("EntryCellTextChanged")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _VerticalTextAlignmentAttribKey : AttributeKey<_> = AttributeKey<_>("VerticalTextAlignment")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _FormattedTextAttribKey : AttributeKey<_> = AttributeKey<_>("FormattedText")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _LineBreakModeAttribKey : AttributeKey<_> = AttributeKey<_>("LineBreakMode")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _LineHeightAttribKey : AttributeKey<_> = AttributeKey<_>("LineHeight")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _MaxLinesAttribKey : AttributeKey<_> = AttributeKey<_>("MaxLines")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _TextDecorationsAttribKey : AttributeKey<_> = AttributeKey<_>("TextDecorations")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _StackOrientationAttribKey : AttributeKey<_> = AttributeKey<_>("StackOrientation")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _SpacingAttribKey : AttributeKey<_> = AttributeKey<_>("Spacing")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ForegroundColorAttribKey : AttributeKey<_> = AttributeKey<_>("ForegroundColor")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _PropertyChangedAttribKey : AttributeKey<_> = AttributeKey<_>("PropertyChanged")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _SpansAttribKey : AttributeKey<_> = AttributeKey<_>("Spans")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _TimeAttribKey : AttributeKey<_> = AttributeKey<_>("Time")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _WebSourceAttribKey : AttributeKey<_> = AttributeKey<_>("WebSource")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ReloadAttribKey : AttributeKey<_> = AttributeKey<_>("Reload")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _NavigatedAttribKey : AttributeKey<_> = AttributeKey<_>("Navigated")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _NavigatingAttribKey : AttributeKey<_> = AttributeKey<_>("Navigating")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ReloadRequestedAttribKey : AttributeKey<_> = AttributeKey<_>("ReloadRequested")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _BackgroundImageAttribKey : AttributeKey<_> = AttributeKey<_>("BackgroundImage")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _IconAttribKey : AttributeKey<_> = AttributeKey<_>("Icon")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _IsBusyAttribKey : AttributeKey<_> = AttributeKey<_>("IsBusy")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ToolbarItemsAttribKey : AttributeKey<_> = AttributeKey<_>("ToolbarItems")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _UseSafeAreaAttribKey : AttributeKey<_> = AttributeKey<_>("UseSafeArea")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _Page_AppearingAttribKey : AttributeKey<_> = AttributeKey<_>("Page_Appearing")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _Page_DisappearingAttribKey : AttributeKey<_> = AttributeKey<_>("Page_Disappearing")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _Page_LayoutChangedAttribKey : AttributeKey<_> = AttributeKey<_>("Page_LayoutChanged")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _CarouselPage_CurrentPageAttribKey : AttributeKey<_> = AttributeKey<_>("CarouselPage_CurrentPage")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _CarouselPage_CurrentPageChangedAttribKey : AttributeKey<_> = AttributeKey<_>("CarouselPage_CurrentPageChanged")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _PagesAttribKey : AttributeKey<_> = AttributeKey<_>("Pages")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _BackButtonTitleAttribKey : AttributeKey<_> = AttributeKey<_>("BackButtonTitle")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _HasBackButtonAttribKey : AttributeKey<_> = AttributeKey<_>("HasBackButton")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _HasNavigationBarAttribKey : AttributeKey<_> = AttributeKey<_>("HasNavigationBar")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _TitleIconAttribKey : AttributeKey<_> = AttributeKey<_>("TitleIcon")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _TitleViewAttribKey : AttributeKey<_> = AttributeKey<_>("TitleView")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _BarBackgroundColorAttribKey : AttributeKey<_> = AttributeKey<_>("BarBackgroundColor")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _BarTextColorAttribKey : AttributeKey<_> = AttributeKey<_>("BarTextColor")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _PoppedAttribKey : AttributeKey<_> = AttributeKey<_>("Popped")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _PoppedToRootAttribKey : AttributeKey<_> = AttributeKey<_>("PoppedToRoot")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _PushedAttribKey : AttributeKey<_> = AttributeKey<_>("Pushed")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _TabbedPage_CurrentPageAttribKey : AttributeKey<_> = AttributeKey<_>("TabbedPage_CurrentPage")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _TabbedPage_CurrentPageChangedAttribKey : AttributeKey<_> = AttributeKey<_>("TabbedPage_CurrentPageChanged")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _OnSizeAllocatedCallbackAttribKey : AttributeKey<_> = AttributeKey<_>("OnSizeAllocatedCallback")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _MasterAttribKey : AttributeKey<_> = AttributeKey<_>("Master")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _DetailAttribKey : AttributeKey<_> = AttributeKey<_>("Detail")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _IsGestureEnabledAttribKey : AttributeKey<_> = AttributeKey<_>("IsGestureEnabled")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _IsPresentedAttribKey : AttributeKey<_> = AttributeKey<_>("IsPresented")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _MasterBehaviorAttribKey : AttributeKey<_> = AttributeKey<_>("MasterBehavior")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _IsPresentedChangedAttribKey : AttributeKey<_> = AttributeKey<_>("IsPresentedChanged")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _AcceleratorAttribKey : AttributeKey<_> = AttributeKey<_>("Accelerator")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ItemsAttribKey : AttributeKey<_> = AttributeKey<_>("Items")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _TextDetailAttribKey : AttributeKey<_> = AttributeKey<_>("TextDetail")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _TextDetailColorAttribKey : AttributeKey<_> = AttributeKey<_>("TextDetailColor")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _TextCellCommandAttribKey : AttributeKey<_> = AttributeKey<_>("TextCellCommand")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _TextCellCanExecuteAttribKey : AttributeKey<_> = AttributeKey<_>("TextCellCanExecute")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _OrderAttribKey : AttributeKey<_> = AttributeKey<_>("Order")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _PriorityAttribKey : AttributeKey<_> = AttributeKey<_>("Priority")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ViewAttribKey : AttributeKey<_> = AttributeKey<_>("View")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ListViewItemsAttribKey : AttributeKey<_> = AttributeKey<_>("ListViewItems")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _FooterAttribKey : AttributeKey<_> = AttributeKey<_>("Footer")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _HeaderAttribKey : AttributeKey<_> = AttributeKey<_>("Header")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _HeaderTemplateAttribKey : AttributeKey<_> = AttributeKey<_>("HeaderTemplate")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _IsGroupingEnabledAttribKey : AttributeKey<_> = AttributeKey<_>("IsGroupingEnabled")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _IsPullToRefreshEnabledAttribKey : AttributeKey<_> = AttributeKey<_>("IsPullToRefreshEnabled")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _IsRefreshingAttribKey : AttributeKey<_> = AttributeKey<_>("IsRefreshing")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _RefreshCommandAttribKey : AttributeKey<_> = AttributeKey<_>("RefreshCommand")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ListView_SelectedItemAttribKey : AttributeKey<_> = AttributeKey<_>("ListView_SelectedItem")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ListView_SeparatorVisibilityAttribKey : AttributeKey<_> = AttributeKey<_>("ListView_SeparatorVisibility")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ListView_SeparatorColorAttribKey : AttributeKey<_> = AttributeKey<_>("ListView_SeparatorColor")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ListView_ItemAppearingAttribKey : AttributeKey<_> = AttributeKey<_>("ListView_ItemAppearing")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ListView_ItemDisappearingAttribKey : AttributeKey<_> = AttributeKey<_>("ListView_ItemDisappearing")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ListView_ItemSelectedAttribKey : AttributeKey<_> = AttributeKey<_>("ListView_ItemSelected")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ListView_ItemTappedAttribKey : AttributeKey<_> = AttributeKey<_>("ListView_ItemTapped")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ListView_RefreshingAttribKey : AttributeKey<_> = AttributeKey<_>("ListView_Refreshing")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _SelectionModeAttribKey : AttributeKey<_> = AttributeKey<_>("SelectionMode")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ListViewGrouped_ItemsSourceAttribKey : AttributeKey<_> = AttributeKey<_>("ListViewGrouped_ItemsSource")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ListViewGrouped_ShowJumpListAttribKey : AttributeKey<_> = AttributeKey<_>("ListViewGrouped_ShowJumpList")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ListViewGrouped_SelectedItemAttribKey : AttributeKey<_> = AttributeKey<_>("ListViewGrouped_SelectedItem")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _SeparatorVisibilityAttribKey : AttributeKey<_> = AttributeKey<_>("SeparatorVisibility")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _SeparatorColorAttribKey : AttributeKey<_> = AttributeKey<_>("SeparatorColor")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ListViewGrouped_ItemAppearingAttribKey : AttributeKey<_> = AttributeKey<_>("ListViewGrouped_ItemAppearing")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ListViewGrouped_ItemDisappearingAttribKey : AttributeKey<_> = AttributeKey<_>("ListViewGrouped_ItemDisappearing")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ListViewGrouped_ItemSelectedAttribKey : AttributeKey<_> = AttributeKey<_>("ListViewGrouped_ItemSelected")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _ListViewGrouped_ItemTappedAttribKey : AttributeKey<_> = AttributeKey<_>("ListViewGrouped_ItemTapped")
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val _RefreshingAttribKey : AttributeKey<_> = AttributeKey<_>("Refreshing")
>>>>>>> first doings

type ViewBuilders() =
    /// Builds the attributes for a Element in the view
    static member inline BuildElement(attribCount: int,
                                      ?classId: string,
                                      ?styleId: string,
                                      ?automationId: string,
                                      ?created: obj -> unit,
                                      ?ref: ViewRef) = 

        let attribCount = match classId with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match styleId with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match automationId with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match created with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match ref with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = new AttributesBuilder(attribCount)
        match classId with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ClassIdAttribKey, (v)) 
        match styleId with None -> () | Some v -> attribBuilder.Add(ViewAttributes.StyleIdAttribKey, (v)) 
        match automationId with None -> () | Some v -> attribBuilder.Add(ViewAttributes.AutomationIdAttribKey, (v)) 
        match created with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ElementCreatedAttribKey, (v)) 
        match ref with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ElementViewRefAttribKey, (v)) 
        attribBuilder

    static member val CreateFuncElement : (unit -> Xamarin.Forms.Element) = (fun () -> ViewBuilders.CreateElement())

    static member CreateElement () : Xamarin.Forms.Element =
        failwith "can't create Xamarin.Forms.Element"

    static member val UpdateFuncElement =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.Element) -> ViewBuilders.UpdateElement (prevOpt, curr, target)) 

    static member UpdateElement (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.Element) = 
        let mutable prevClassIdOpt = ValueNone
        let mutable currClassIdOpt = ValueNone
        let mutable prevStyleIdOpt = ValueNone
        let mutable currStyleIdOpt = ValueNone
        let mutable prevAutomationIdOpt = ValueNone
        let mutable currAutomationIdOpt = ValueNone
        let mutable prevElementCreatedOpt = ValueNone
        let mutable currElementCreatedOpt = ValueNone
        let mutable prevElementViewRefOpt = ValueNone
        let mutable currElementViewRefOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.ClassIdAttribKey.KeyValue then 
                currClassIdOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.StyleIdAttribKey.KeyValue then 
                currStyleIdOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.AutomationIdAttribKey.KeyValue then 
                currAutomationIdOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.ElementCreatedAttribKey.KeyValue then 
                currElementCreatedOpt <- ValueSome (kvp.Value :?> obj -> unit)
            if kvp.Key = ViewAttributes.ElementViewRefAttribKey.KeyValue then 
                currElementViewRefOpt <- ValueSome (kvp.Value :?> ViewRef)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.ClassIdAttribKey.KeyValue then 
                    prevClassIdOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.StyleIdAttribKey.KeyValue then 
                    prevStyleIdOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.AutomationIdAttribKey.KeyValue then 
                    prevAutomationIdOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.ElementCreatedAttribKey.KeyValue then 
                    prevElementCreatedOpt <- ValueSome (kvp.Value :?> obj -> unit)
                if kvp.Key = ViewAttributes.ElementViewRefAttribKey.KeyValue then 
                    prevElementViewRefOpt <- ValueSome (kvp.Value :?> ViewRef)
        match prevClassIdOpt, currClassIdOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.ClassId <-  currValue
        | ValueSome _, ValueNone -> target.ClassId <- null
        | ValueNone, ValueNone -> ()
        match prevStyleIdOpt, currStyleIdOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.StyleId <-  currValue
        | ValueSome _, ValueNone -> target.StyleId <- null
        | ValueNone, ValueNone -> ()
        match prevAutomationIdOpt, currAutomationIdOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.AutomationId <-  currValue
        | ValueSome _, ValueNone -> target.AutomationId <- null
        | ValueNone, ValueNone -> ()
        (fun _ _ _ -> ()) prevElementCreatedOpt currElementCreatedOpt target
        (fun _ _ _ -> ()) prevElementViewRefOpt currElementViewRefOpt target

    static member inline ConstructElement(?classId: string,
                                          ?styleId: string,
                                          ?automationId: string,
                                          ?created: (Xamarin.Forms.Element -> unit),
                                          ?ref: ViewRef<Xamarin.Forms.Element>) = 

        let attribBuilder = ViewBuilders.BuildElement(0,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.Element> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.Element>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.Element>(ViewBuilders.CreateFuncElement, ViewBuilders.UpdateFuncElement, attribBuilder)

    /// Builds the attributes for a VisualElement in the view
    static member inline BuildVisualElement(attribCount: int,
                                            ?anchorX: double,
                                            ?anchorY: double,
                                            ?backgroundColor: Xamarin.Forms.Color,
                                            ?heightRequest: double,
                                            ?inputTransparent: bool,
                                            ?isEnabled: bool,
                                            ?isVisible: bool,
                                            ?minimumHeightRequest: double,
                                            ?minimumWidthRequest: double,
                                            ?opacity: double,
                                            ?rotation: double,
                                            ?rotationX: double,
                                            ?rotationY: double,
                                            ?scale: double,
                                            ?style: Xamarin.Forms.Style,
                                            ?styleClass: obj,
                                            ?translationX: double,
                                            ?translationY: double,
                                            ?widthRequest: double,
                                            ?resources: (string * obj) list,
                                            ?styles: Xamarin.Forms.Style list,
                                            ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                            ?isTabStop: bool,
                                            ?scaleX: double,
                                            ?scaleY: double,
                                            ?tabIndex: int,
                                            ?childrenReordered: System.EventArgs -> unit,
                                            ?measureInvalidated: System.EventArgs -> unit,
                                            ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                            ?sizeChanged: System.EventArgs -> unit,
                                            ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                            ?classId: string,
                                            ?styleId: string,
                                            ?automationId: string,
                                            ?created: obj -> unit,
                                            ?ref: ViewRef) = 

        let attribCount = match anchorX with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match anchorY with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match backgroundColor with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match heightRequest with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match inputTransparent with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match isEnabled with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match isVisible with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match minimumHeightRequest with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match minimumWidthRequest with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match opacity with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match rotation with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match rotationX with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match rotationY with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match scale with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match style with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match styleClass with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match translationX with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match translationY with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match widthRequest with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match resources with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match styles with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match styleSheets with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match isTabStop with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match scaleX with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match scaleY with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match tabIndex with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match childrenReordered with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match measureInvalidated with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match focused with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match sizeChanged with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match unfocused with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildElement(attribCount, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match anchorX with None -> () | Some v -> attribBuilder.Add(ViewAttributes.AnchorXAttribKey, (v)) 
        match anchorY with None -> () | Some v -> attribBuilder.Add(ViewAttributes.AnchorYAttribKey, (v)) 
        match backgroundColor with None -> () | Some v -> attribBuilder.Add(ViewAttributes.BackgroundColorAttribKey, (v)) 
        match heightRequest with None -> () | Some v -> attribBuilder.Add(ViewAttributes.HeightRequestAttribKey, (v)) 
        match inputTransparent with None -> () | Some v -> attribBuilder.Add(ViewAttributes.InputTransparentAttribKey, (v)) 
        match isEnabled with None -> () | Some v -> attribBuilder.Add(ViewAttributes.IsEnabledAttribKey, (v)) 
        match isVisible with None -> () | Some v -> attribBuilder.Add(ViewAttributes.IsVisibleAttribKey, (v)) 
        match minimumHeightRequest with None -> () | Some v -> attribBuilder.Add(ViewAttributes.MinimumHeightRequestAttribKey, (v)) 
        match minimumWidthRequest with None -> () | Some v -> attribBuilder.Add(ViewAttributes.MinimumWidthRequestAttribKey, (v)) 
        match opacity with None -> () | Some v -> attribBuilder.Add(ViewAttributes.OpacityAttribKey, (v)) 
        match rotation with None -> () | Some v -> attribBuilder.Add(ViewAttributes.RotationAttribKey, (v)) 
        match rotationX with None -> () | Some v -> attribBuilder.Add(ViewAttributes.RotationXAttribKey, (v)) 
        match rotationY with None -> () | Some v -> attribBuilder.Add(ViewAttributes.RotationYAttribKey, (v)) 
        match scale with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ScaleAttribKey, (v)) 
        match style with None -> () | Some v -> attribBuilder.Add(ViewAttributes.StyleAttribKey, (v)) 
        match styleClass with None -> () | Some v -> attribBuilder.Add(ViewAttributes.StyleClassAttribKey, makeStyleClass(v)) 
        match translationX with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TranslationXAttribKey, (v)) 
        match translationY with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TranslationYAttribKey, (v)) 
        match widthRequest with None -> () | Some v -> attribBuilder.Add(ViewAttributes.WidthRequestAttribKey, (v)) 
        match resources with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ResourcesAttribKey, (v)) 
        match styles with None -> () | Some v -> attribBuilder.Add(ViewAttributes.StylesAttribKey, (v)) 
        match styleSheets with None -> () | Some v -> attribBuilder.Add(ViewAttributes.StyleSheetsAttribKey, (v)) 
        match isTabStop with None -> () | Some v -> attribBuilder.Add(ViewAttributes.IsTabStopAttribKey, (v)) 
        match scaleX with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ScaleXAttribKey, (v)) 
        match scaleY with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ScaleYAttribKey, (v)) 
        match tabIndex with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TabIndexAttribKey, (v)) 
        match childrenReordered with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ChildrenReorderedAttribKey, (fun f -> System.EventHandler(fun _sender args -> f args))(v)) 
        match measureInvalidated with None -> () | Some v -> attribBuilder.Add(ViewAttributes.MeasureInvalidatedAttribKey, (fun f -> System.EventHandler(fun _sender args -> f args))(v)) 
        match focused with None -> () | Some v -> attribBuilder.Add(ViewAttributes.FocusedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.FocusEventArgs>(fun _sender args -> f args))(v)) 
        match sizeChanged with None -> () | Some v -> attribBuilder.Add(ViewAttributes.SizeChangedAttribKey, (fun f -> System.EventHandler(fun _sender args -> f args))(v)) 
        match unfocused with None -> () | Some v -> attribBuilder.Add(ViewAttributes.UnfocusedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.FocusEventArgs>(fun _sender args -> f args))(v)) 
        attribBuilder

    static member val CreateFuncVisualElement : (unit -> Xamarin.Forms.VisualElement) = (fun () -> ViewBuilders.CreateVisualElement())

    static member CreateVisualElement () : Xamarin.Forms.VisualElement =
        failwith "can't create Xamarin.Forms.VisualElement"

    static member val UpdateFuncVisualElement =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.VisualElement) -> ViewBuilders.UpdateVisualElement (prevOpt, curr, target)) 

    static member UpdateVisualElement (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.VisualElement) = 
        // update the inherited Element element
        let baseElement = (if ViewProto.ProtoElement.IsNone then ViewProto.ProtoElement <- Some (ViewBuilders.ConstructElement())); ViewProto.ProtoElement.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevAnchorXOpt = ValueNone
        let mutable currAnchorXOpt = ValueNone
        let mutable prevAnchorYOpt = ValueNone
        let mutable currAnchorYOpt = ValueNone
        let mutable prevBackgroundColorOpt = ValueNone
        let mutable currBackgroundColorOpt = ValueNone
        let mutable prevHeightRequestOpt = ValueNone
        let mutable currHeightRequestOpt = ValueNone
        let mutable prevInputTransparentOpt = ValueNone
        let mutable currInputTransparentOpt = ValueNone
        let mutable prevIsEnabledOpt = ValueNone
        let mutable currIsEnabledOpt = ValueNone
        let mutable prevIsVisibleOpt = ValueNone
        let mutable currIsVisibleOpt = ValueNone
        let mutable prevMinimumHeightRequestOpt = ValueNone
        let mutable currMinimumHeightRequestOpt = ValueNone
        let mutable prevMinimumWidthRequestOpt = ValueNone
        let mutable currMinimumWidthRequestOpt = ValueNone
        let mutable prevOpacityOpt = ValueNone
        let mutable currOpacityOpt = ValueNone
        let mutable prevRotationOpt = ValueNone
        let mutable currRotationOpt = ValueNone
        let mutable prevRotationXOpt = ValueNone
        let mutable currRotationXOpt = ValueNone
        let mutable prevRotationYOpt = ValueNone
        let mutable currRotationYOpt = ValueNone
        let mutable prevScaleOpt = ValueNone
        let mutable currScaleOpt = ValueNone
        let mutable prevStyleOpt = ValueNone
        let mutable currStyleOpt = ValueNone
        let mutable prevStyleClassOpt = ValueNone
        let mutable currStyleClassOpt = ValueNone
        let mutable prevTranslationXOpt = ValueNone
        let mutable currTranslationXOpt = ValueNone
        let mutable prevTranslationYOpt = ValueNone
        let mutable currTranslationYOpt = ValueNone
        let mutable prevWidthRequestOpt = ValueNone
        let mutable currWidthRequestOpt = ValueNone
        let mutable prevResourcesOpt = ValueNone
        let mutable currResourcesOpt = ValueNone
        let mutable prevStylesOpt = ValueNone
        let mutable currStylesOpt = ValueNone
        let mutable prevStyleSheetsOpt = ValueNone
        let mutable currStyleSheetsOpt = ValueNone
        let mutable prevIsTabStopOpt = ValueNone
        let mutable currIsTabStopOpt = ValueNone
        let mutable prevScaleXOpt = ValueNone
        let mutable currScaleXOpt = ValueNone
        let mutable prevScaleYOpt = ValueNone
        let mutable currScaleYOpt = ValueNone
        let mutable prevTabIndexOpt = ValueNone
        let mutable currTabIndexOpt = ValueNone
        let mutable prevChildrenReorderedOpt = ValueNone
        let mutable currChildrenReorderedOpt = ValueNone
        let mutable prevMeasureInvalidatedOpt = ValueNone
        let mutable currMeasureInvalidatedOpt = ValueNone
        let mutable prevFocusedOpt = ValueNone
        let mutable currFocusedOpt = ValueNone
        let mutable prevSizeChangedOpt = ValueNone
        let mutable currSizeChangedOpt = ValueNone
        let mutable prevUnfocusedOpt = ValueNone
        let mutable currUnfocusedOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.AnchorXAttribKey.KeyValue then 
                currAnchorXOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.AnchorYAttribKey.KeyValue then 
                currAnchorYOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.BackgroundColorAttribKey.KeyValue then 
                currBackgroundColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
            if kvp.Key = ViewAttributes.HeightRequestAttribKey.KeyValue then 
                currHeightRequestOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.InputTransparentAttribKey.KeyValue then 
                currInputTransparentOpt <- ValueSome (kvp.Value :?> bool)
            if kvp.Key = ViewAttributes.IsEnabledAttribKey.KeyValue then 
                currIsEnabledOpt <- ValueSome (kvp.Value :?> bool)
            if kvp.Key = ViewAttributes.IsVisibleAttribKey.KeyValue then 
                currIsVisibleOpt <- ValueSome (kvp.Value :?> bool)
            if kvp.Key = ViewAttributes.MinimumHeightRequestAttribKey.KeyValue then 
                currMinimumHeightRequestOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.MinimumWidthRequestAttribKey.KeyValue then 
                currMinimumWidthRequestOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.OpacityAttribKey.KeyValue then 
                currOpacityOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.RotationAttribKey.KeyValue then 
                currRotationOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.RotationXAttribKey.KeyValue then 
                currRotationXOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.RotationYAttribKey.KeyValue then 
                currRotationYOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.ScaleAttribKey.KeyValue then 
                currScaleOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.StyleAttribKey.KeyValue then 
                currStyleOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Style)
            if kvp.Key = ViewAttributes.StyleClassAttribKey.KeyValue then 
                currStyleClassOpt <- ValueSome (kvp.Value :?> System.Collections.Generic.IList<string>)
            if kvp.Key = ViewAttributes.TranslationXAttribKey.KeyValue then 
                currTranslationXOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.TranslationYAttribKey.KeyValue then 
                currTranslationYOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.WidthRequestAttribKey.KeyValue then 
                currWidthRequestOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.ResourcesAttribKey.KeyValue then 
                currResourcesOpt <- ValueSome (kvp.Value :?> (string * obj) list)
            if kvp.Key = ViewAttributes.StylesAttribKey.KeyValue then 
                currStylesOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Style list)
            if kvp.Key = ViewAttributes.StyleSheetsAttribKey.KeyValue then 
                currStyleSheetsOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.StyleSheets.StyleSheet list)
            if kvp.Key = ViewAttributes.IsTabStopAttribKey.KeyValue then 
                currIsTabStopOpt <- ValueSome (kvp.Value :?> bool)
            if kvp.Key = ViewAttributes.ScaleXAttribKey.KeyValue then 
                currScaleXOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.ScaleYAttribKey.KeyValue then 
                currScaleYOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.TabIndexAttribKey.KeyValue then 
                currTabIndexOpt <- ValueSome (kvp.Value :?> int)
            if kvp.Key = ViewAttributes.ChildrenReorderedAttribKey.KeyValue then 
                currChildrenReorderedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
            if kvp.Key = ViewAttributes.MeasureInvalidatedAttribKey.KeyValue then 
                currMeasureInvalidatedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
            if kvp.Key = ViewAttributes.FocusedAttribKey.KeyValue then 
                currFocusedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.FocusEventArgs>)
            if kvp.Key = ViewAttributes.SizeChangedAttribKey.KeyValue then 
                currSizeChangedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
            if kvp.Key = ViewAttributes.UnfocusedAttribKey.KeyValue then 
                currUnfocusedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.FocusEventArgs>)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.AnchorXAttribKey.KeyValue then 
                    prevAnchorXOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.AnchorYAttribKey.KeyValue then 
                    prevAnchorYOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.BackgroundColorAttribKey.KeyValue then 
                    prevBackgroundColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
                if kvp.Key = ViewAttributes.HeightRequestAttribKey.KeyValue then 
                    prevHeightRequestOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.InputTransparentAttribKey.KeyValue then 
                    prevInputTransparentOpt <- ValueSome (kvp.Value :?> bool)
                if kvp.Key = ViewAttributes.IsEnabledAttribKey.KeyValue then 
                    prevIsEnabledOpt <- ValueSome (kvp.Value :?> bool)
                if kvp.Key = ViewAttributes.IsVisibleAttribKey.KeyValue then 
                    prevIsVisibleOpt <- ValueSome (kvp.Value :?> bool)
                if kvp.Key = ViewAttributes.MinimumHeightRequestAttribKey.KeyValue then 
                    prevMinimumHeightRequestOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.MinimumWidthRequestAttribKey.KeyValue then 
                    prevMinimumWidthRequestOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.OpacityAttribKey.KeyValue then 
                    prevOpacityOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.RotationAttribKey.KeyValue then 
                    prevRotationOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.RotationXAttribKey.KeyValue then 
                    prevRotationXOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.RotationYAttribKey.KeyValue then 
                    prevRotationYOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.ScaleAttribKey.KeyValue then 
                    prevScaleOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.StyleAttribKey.KeyValue then 
                    prevStyleOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Style)
                if kvp.Key = ViewAttributes.StyleClassAttribKey.KeyValue then 
                    prevStyleClassOpt <- ValueSome (kvp.Value :?> System.Collections.Generic.IList<string>)
                if kvp.Key = ViewAttributes.TranslationXAttribKey.KeyValue then 
                    prevTranslationXOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.TranslationYAttribKey.KeyValue then 
                    prevTranslationYOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.WidthRequestAttribKey.KeyValue then 
                    prevWidthRequestOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.ResourcesAttribKey.KeyValue then 
                    prevResourcesOpt <- ValueSome (kvp.Value :?> (string * obj) list)
                if kvp.Key = ViewAttributes.StylesAttribKey.KeyValue then 
                    prevStylesOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Style list)
                if kvp.Key = ViewAttributes.StyleSheetsAttribKey.KeyValue then 
                    prevStyleSheetsOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.StyleSheets.StyleSheet list)
                if kvp.Key = ViewAttributes.IsTabStopAttribKey.KeyValue then 
                    prevIsTabStopOpt <- ValueSome (kvp.Value :?> bool)
                if kvp.Key = ViewAttributes.ScaleXAttribKey.KeyValue then 
                    prevScaleXOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.ScaleYAttribKey.KeyValue then 
                    prevScaleYOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.TabIndexAttribKey.KeyValue then 
                    prevTabIndexOpt <- ValueSome (kvp.Value :?> int)
                if kvp.Key = ViewAttributes.ChildrenReorderedAttribKey.KeyValue then 
                    prevChildrenReorderedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
                if kvp.Key = ViewAttributes.MeasureInvalidatedAttribKey.KeyValue then 
                    prevMeasureInvalidatedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
                if kvp.Key = ViewAttributes.FocusedAttribKey.KeyValue then 
                    prevFocusedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.FocusEventArgs>)
                if kvp.Key = ViewAttributes.SizeChangedAttribKey.KeyValue then 
                    prevSizeChangedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
                if kvp.Key = ViewAttributes.UnfocusedAttribKey.KeyValue then 
                    prevUnfocusedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.FocusEventArgs>)
        match prevAnchorXOpt, currAnchorXOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.AnchorX <-  currValue
        | ValueSome _, ValueNone -> target.AnchorX <- 0.0
        | ValueNone, ValueNone -> ()
        match prevAnchorYOpt, currAnchorYOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.AnchorY <-  currValue
        | ValueSome _, ValueNone -> target.AnchorY <- 0.0
        | ValueNone, ValueNone -> ()
        match prevBackgroundColorOpt, currBackgroundColorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.BackgroundColor <-  currValue
        | ValueSome _, ValueNone -> target.BackgroundColor <- Xamarin.Forms.Color.Default
        | ValueNone, ValueNone -> ()
        match prevHeightRequestOpt, currHeightRequestOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.HeightRequest <-  currValue
        | ValueSome _, ValueNone -> target.HeightRequest <- -1.0
        | ValueNone, ValueNone -> ()
        match prevInputTransparentOpt, currInputTransparentOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.InputTransparent <-  currValue
        | ValueSome _, ValueNone -> target.InputTransparent <- false
        | ValueNone, ValueNone -> ()
        match prevIsEnabledOpt, currIsEnabledOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.IsEnabled <-  currValue
        | ValueSome _, ValueNone -> target.IsEnabled <- true
        | ValueNone, ValueNone -> ()
        match prevIsVisibleOpt, currIsVisibleOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.IsVisible <-  currValue
        | ValueSome _, ValueNone -> target.IsVisible <- true
        | ValueNone, ValueNone -> ()
        match prevMinimumHeightRequestOpt, currMinimumHeightRequestOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.MinimumHeightRequest <-  currValue
        | ValueSome _, ValueNone -> target.MinimumHeightRequest <- -1.0
        | ValueNone, ValueNone -> ()
        match prevMinimumWidthRequestOpt, currMinimumWidthRequestOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.MinimumWidthRequest <-  currValue
        | ValueSome _, ValueNone -> target.MinimumWidthRequest <- -1.0
        | ValueNone, ValueNone -> ()
        match prevOpacityOpt, currOpacityOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Opacity <-  currValue
        | ValueSome _, ValueNone -> target.Opacity <- 1.0
        | ValueNone, ValueNone -> ()
        match prevRotationOpt, currRotationOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Rotation <-  currValue
        | ValueSome _, ValueNone -> target.Rotation <- 0.0
        | ValueNone, ValueNone -> ()
        match prevRotationXOpt, currRotationXOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.RotationX <-  currValue
        | ValueSome _, ValueNone -> target.RotationX <- 0.0
        | ValueNone, ValueNone -> ()
        match prevRotationYOpt, currRotationYOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.RotationY <-  currValue
        | ValueSome _, ValueNone -> target.RotationY <- 0.0
        | ValueNone, ValueNone -> ()
        match prevScaleOpt, currScaleOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Scale <-  currValue
        | ValueSome _, ValueNone -> target.Scale <- 1.0
        | ValueNone, ValueNone -> ()
        match prevStyleOpt, currStyleOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Style <-  currValue
        | ValueSome _, ValueNone -> target.Style <- null
        | ValueNone, ValueNone -> ()
        updateStyleClass prevStyleClassOpt currStyleClassOpt target
        match prevTranslationXOpt, currTranslationXOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.TranslationX <-  currValue
        | ValueSome _, ValueNone -> target.TranslationX <- 0.0
        | ValueNone, ValueNone -> ()
        match prevTranslationYOpt, currTranslationYOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.TranslationY <-  currValue
        | ValueSome _, ValueNone -> target.TranslationY <- 0.0
        | ValueNone, ValueNone -> ()
        match prevWidthRequestOpt, currWidthRequestOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.WidthRequest <-  currValue
        | ValueSome _, ValueNone -> target.WidthRequest <- -1.0
        | ValueNone, ValueNone -> ()
        updateResources prevResourcesOpt currResourcesOpt target
        updateStyles prevStylesOpt currStylesOpt target
        updateStyleSheets prevStyleSheetsOpt currStyleSheetsOpt target
        match prevIsTabStopOpt, currIsTabStopOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.IsTabStop <-  currValue
        | ValueSome _, ValueNone -> target.IsTabStop <- true
        | ValueNone, ValueNone -> ()
        match prevScaleXOpt, currScaleXOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.ScaleX <-  currValue
        | ValueSome _, ValueNone -> target.ScaleX <- 0.0
        | ValueNone, ValueNone -> ()
        match prevScaleYOpt, currScaleYOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.ScaleY <-  currValue
        | ValueSome _, ValueNone -> target.ScaleY <- 0.0
        | ValueNone, ValueNone -> ()
        match prevTabIndexOpt, currTabIndexOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.TabIndex <-  currValue
        | ValueSome _, ValueNone -> target.TabIndex <- 0
        | ValueNone, ValueNone -> ()
        match prevChildrenReorderedOpt, currChildrenReorderedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.ChildrenReordered.RemoveHandler(prevValue); target.ChildrenReordered.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.ChildrenReordered.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.ChildrenReordered.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevMeasureInvalidatedOpt, currMeasureInvalidatedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.MeasureInvalidated.RemoveHandler(prevValue); target.MeasureInvalidated.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.MeasureInvalidated.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.MeasureInvalidated.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevFocusedOpt, currFocusedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.Focused.RemoveHandler(prevValue); target.Focused.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.Focused.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.Focused.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevSizeChangedOpt, currSizeChangedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.SizeChanged.RemoveHandler(prevValue); target.SizeChanged.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.SizeChanged.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.SizeChanged.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevUnfocusedOpt, currUnfocusedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.Unfocused.RemoveHandler(prevValue); target.Unfocused.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.Unfocused.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.Unfocused.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()

    static member inline ConstructVisualElement(?anchorX: double,
                                                ?anchorY: double,
                                                ?backgroundColor: Xamarin.Forms.Color,
                                                ?heightRequest: double,
                                                ?inputTransparent: bool,
                                                ?isEnabled: bool,
                                                ?isVisible: bool,
                                                ?minimumHeightRequest: double,
                                                ?minimumWidthRequest: double,
                                                ?opacity: double,
                                                ?rotation: double,
                                                ?rotationX: double,
                                                ?rotationY: double,
                                                ?scale: double,
                                                ?style: Xamarin.Forms.Style,
                                                ?styleClass: obj,
                                                ?translationX: double,
                                                ?translationY: double,
                                                ?widthRequest: double,
                                                ?resources: (string * obj) list,
                                                ?styles: Xamarin.Forms.Style list,
                                                ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                                ?isTabStop: bool,
                                                ?scaleX: double,
                                                ?scaleY: double,
                                                ?tabIndex: int,
                                                ?childrenReordered: System.EventArgs -> unit,
                                                ?measureInvalidated: System.EventArgs -> unit,
                                                ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                                ?sizeChanged: System.EventArgs -> unit,
                                                ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                                ?classId: string,
                                                ?styleId: string,
                                                ?automationId: string,
                                                ?created: (Xamarin.Forms.VisualElement -> unit),
                                                ?ref: ViewRef<Xamarin.Forms.VisualElement>) = 

        let attribBuilder = ViewBuilders.BuildVisualElement(0,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.VisualElement> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.VisualElement>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.VisualElement>(ViewBuilders.CreateFuncVisualElement, ViewBuilders.UpdateFuncVisualElement, attribBuilder)

    /// Builds the attributes for a View in the view
    static member inline BuildView(attribCount: int,
                                   ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                   ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                   ?margin: obj,
                                   ?gestureRecognizers: ViewElement list,
                                   ?anchorX: double,
                                   ?anchorY: double,
                                   ?backgroundColor: Xamarin.Forms.Color,
                                   ?heightRequest: double,
                                   ?inputTransparent: bool,
                                   ?isEnabled: bool,
                                   ?isVisible: bool,
                                   ?minimumHeightRequest: double,
                                   ?minimumWidthRequest: double,
                                   ?opacity: double,
                                   ?rotation: double,
                                   ?rotationX: double,
                                   ?rotationY: double,
                                   ?scale: double,
                                   ?style: Xamarin.Forms.Style,
                                   ?styleClass: obj,
                                   ?translationX: double,
                                   ?translationY: double,
                                   ?widthRequest: double,
                                   ?resources: (string * obj) list,
                                   ?styles: Xamarin.Forms.Style list,
                                   ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                   ?isTabStop: bool,
                                   ?scaleX: double,
                                   ?scaleY: double,
                                   ?tabIndex: int,
                                   ?childrenReordered: System.EventArgs -> unit,
                                   ?measureInvalidated: System.EventArgs -> unit,
                                   ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                   ?sizeChanged: System.EventArgs -> unit,
                                   ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                   ?classId: string,
                                   ?styleId: string,
                                   ?automationId: string,
                                   ?created: obj -> unit,
                                   ?ref: ViewRef) = 

        let attribCount = match horizontalOptions with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match verticalOptions with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match margin with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match gestureRecognizers with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildVisualElement(attribCount, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match horizontalOptions with None -> () | Some v -> attribBuilder.Add(ViewAttributes.HorizontalOptionsAttribKey, (v)) 
        match verticalOptions with None -> () | Some v -> attribBuilder.Add(ViewAttributes.VerticalOptionsAttribKey, (v)) 
        match margin with None -> () | Some v -> attribBuilder.Add(ViewAttributes.MarginAttribKey, makeThickness(v)) 
        match gestureRecognizers with None -> () | Some v -> attribBuilder.Add(ViewAttributes.GestureRecognizersAttribKey, Array.ofList(v)) 
        attribBuilder

    static member val CreateFuncView : (unit -> Xamarin.Forms.View) = (fun () -> ViewBuilders.CreateView())

    static member CreateView () : Xamarin.Forms.View =
        failwith "can't create Xamarin.Forms.View"

    static member val UpdateFuncView =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.View) -> ViewBuilders.UpdateView (prevOpt, curr, target)) 

    static member UpdateView (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.View) = 
        // update the inherited VisualElement element
        let baseElement = (if ViewProto.ProtoVisualElement.IsNone then ViewProto.ProtoVisualElement <- Some (ViewBuilders.ConstructVisualElement())); ViewProto.ProtoVisualElement.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevHorizontalOptionsOpt = ValueNone
        let mutable currHorizontalOptionsOpt = ValueNone
        let mutable prevVerticalOptionsOpt = ValueNone
        let mutable currVerticalOptionsOpt = ValueNone
        let mutable prevMarginOpt = ValueNone
        let mutable currMarginOpt = ValueNone
        let mutable prevGestureRecognizersOpt = ValueNone
        let mutable currGestureRecognizersOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.HorizontalOptionsAttribKey.KeyValue then 
                currHorizontalOptionsOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.LayoutOptions)
            if kvp.Key = ViewAttributes.VerticalOptionsAttribKey.KeyValue then 
                currVerticalOptionsOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.LayoutOptions)
            if kvp.Key = ViewAttributes.MarginAttribKey.KeyValue then 
                currMarginOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Thickness)
            if kvp.Key = ViewAttributes.GestureRecognizersAttribKey.KeyValue then 
                currGestureRecognizersOpt <- ValueSome (kvp.Value :?> ViewElement[])
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.HorizontalOptionsAttribKey.KeyValue then 
                    prevHorizontalOptionsOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.LayoutOptions)
                if kvp.Key = ViewAttributes.VerticalOptionsAttribKey.KeyValue then 
                    prevVerticalOptionsOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.LayoutOptions)
                if kvp.Key = ViewAttributes.MarginAttribKey.KeyValue then 
                    prevMarginOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Thickness)
                if kvp.Key = ViewAttributes.GestureRecognizersAttribKey.KeyValue then 
                    prevGestureRecognizersOpt <- ValueSome (kvp.Value :?> ViewElement[])
        match prevHorizontalOptionsOpt, currHorizontalOptionsOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.HorizontalOptions <-  currValue
        | ValueSome _, ValueNone -> target.HorizontalOptions <- Xamarin.Forms.LayoutOptions.Fill
        | ValueNone, ValueNone -> ()
        match prevVerticalOptionsOpt, currVerticalOptionsOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.VerticalOptions <-  currValue
        | ValueSome _, ValueNone -> target.VerticalOptions <- Xamarin.Forms.LayoutOptions.Fill
        | ValueNone, ValueNone -> ()
        match prevMarginOpt, currMarginOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Margin <-  currValue
        | ValueSome _, ValueNone -> target.Margin <- Unchecked.defaultof<Xamarin.Forms.Thickness>
        | ValueNone, ValueNone -> ()
        updateCollectionGeneric prevGestureRecognizersOpt currGestureRecognizersOpt target.GestureRecognizers
            (fun (x:ViewElement) -> x.Create() :?> Xamarin.Forms.IGestureRecognizer)
            (fun _ _ _ -> ())
            canReuseChild
            updateChild

    static member inline ConstructView(?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                       ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                       ?margin: obj,
                                       ?gestureRecognizers: ViewElement list,
                                       ?anchorX: double,
                                       ?anchorY: double,
                                       ?backgroundColor: Xamarin.Forms.Color,
                                       ?heightRequest: double,
                                       ?inputTransparent: bool,
                                       ?isEnabled: bool,
                                       ?isVisible: bool,
                                       ?minimumHeightRequest: double,
                                       ?minimumWidthRequest: double,
                                       ?opacity: double,
                                       ?rotation: double,
                                       ?rotationX: double,
                                       ?rotationY: double,
                                       ?scale: double,
                                       ?style: Xamarin.Forms.Style,
                                       ?styleClass: obj,
                                       ?translationX: double,
                                       ?translationY: double,
                                       ?widthRequest: double,
                                       ?resources: (string * obj) list,
                                       ?styles: Xamarin.Forms.Style list,
                                       ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                       ?isTabStop: bool,
                                       ?scaleX: double,
                                       ?scaleY: double,
                                       ?tabIndex: int,
                                       ?childrenReordered: System.EventArgs -> unit,
                                       ?measureInvalidated: System.EventArgs -> unit,
                                       ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                       ?sizeChanged: System.EventArgs -> unit,
                                       ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                       ?classId: string,
                                       ?styleId: string,
                                       ?automationId: string,
                                       ?created: (Xamarin.Forms.View -> unit),
                                       ?ref: ViewRef<Xamarin.Forms.View>) = 

        let attribBuilder = ViewBuilders.BuildView(0,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.View> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.View>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.View>(ViewBuilders.CreateFuncView, ViewBuilders.UpdateFuncView, attribBuilder)

    /// Builds the attributes for a IGestureRecognizer in the view
    static member inline BuildIGestureRecognizer(attribCount: int) = 
        let attribBuilder = new AttributesBuilder(attribCount)
        attribBuilder

    static member val CreateFuncIGestureRecognizer : (unit -> Xamarin.Forms.IGestureRecognizer) = (fun () -> ViewBuilders.CreateIGestureRecognizer())

    static member CreateIGestureRecognizer () : Xamarin.Forms.IGestureRecognizer =
        failwith "can't create Xamarin.Forms.IGestureRecognizer"

    static member val UpdateFuncIGestureRecognizer =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.IGestureRecognizer) -> ViewBuilders.UpdateIGestureRecognizer (prevOpt, curr, target)) 

    static member UpdateIGestureRecognizer (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.IGestureRecognizer) = 
        ignore prevOpt
        ignore curr
        ignore target

    static member inline ConstructIGestureRecognizer() = 

        let attribBuilder = ViewBuilders.BuildIGestureRecognizer(0)

        ViewElement.Create<Xamarin.Forms.IGestureRecognizer>(ViewBuilders.CreateFuncIGestureRecognizer, ViewBuilders.UpdateFuncIGestureRecognizer, attribBuilder)

    /// Builds the attributes for a PanGestureRecognizer in the view
    static member inline BuildPanGestureRecognizer(attribCount: int,
                                                   ?touchPoints: int,
                                                   ?panUpdated: Xamarin.Forms.PanUpdatedEventArgs -> unit,
                                                   ?classId: string,
                                                   ?styleId: string,
                                                   ?automationId: string,
                                                   ?created: obj -> unit,
                                                   ?ref: ViewRef) = 

        let attribCount = match touchPoints with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match panUpdated with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildElement(attribCount, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match touchPoints with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TouchPointsAttribKey, (v)) 
        match panUpdated with None -> () | Some v -> attribBuilder.Add(ViewAttributes.PanUpdatedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.PanUpdatedEventArgs>(fun _sender args -> f args))(v)) 
        attribBuilder

    static member val CreateFuncPanGestureRecognizer : (unit -> Xamarin.Forms.PanGestureRecognizer) = (fun () -> ViewBuilders.CreatePanGestureRecognizer())

    static member CreatePanGestureRecognizer () : Xamarin.Forms.PanGestureRecognizer =
        upcast (new Xamarin.Forms.PanGestureRecognizer())

    static member val UpdateFuncPanGestureRecognizer =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.PanGestureRecognizer) -> ViewBuilders.UpdatePanGestureRecognizer (prevOpt, curr, target)) 

    static member UpdatePanGestureRecognizer (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.PanGestureRecognizer) = 
        // update the inherited Element element
        let baseElement = (if ViewProto.ProtoElement.IsNone then ViewProto.ProtoElement <- Some (ViewBuilders.ConstructElement())); ViewProto.ProtoElement.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevTouchPointsOpt = ValueNone
        let mutable currTouchPointsOpt = ValueNone
        let mutable prevPanUpdatedOpt = ValueNone
        let mutable currPanUpdatedOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.TouchPointsAttribKey.KeyValue then 
                currTouchPointsOpt <- ValueSome (kvp.Value :?> int)
            if kvp.Key = ViewAttributes.PanUpdatedAttribKey.KeyValue then 
                currPanUpdatedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.PanUpdatedEventArgs>)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.TouchPointsAttribKey.KeyValue then 
                    prevTouchPointsOpt <- ValueSome (kvp.Value :?> int)
                if kvp.Key = ViewAttributes.PanUpdatedAttribKey.KeyValue then 
                    prevPanUpdatedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.PanUpdatedEventArgs>)
        match prevTouchPointsOpt, currTouchPointsOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.TouchPoints <-  currValue
        | ValueSome _, ValueNone -> target.TouchPoints <- 1
        | ValueNone, ValueNone -> ()
        match prevPanUpdatedOpt, currPanUpdatedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.PanUpdated.RemoveHandler(prevValue); target.PanUpdated.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.PanUpdated.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.PanUpdated.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()

    static member inline ConstructPanGestureRecognizer(?touchPoints: int,
                                                       ?panUpdated: Xamarin.Forms.PanUpdatedEventArgs -> unit,
                                                       ?classId: string,
                                                       ?styleId: string,
                                                       ?automationId: string,
                                                       ?created: (Xamarin.Forms.PanGestureRecognizer -> unit),
                                                       ?ref: ViewRef<Xamarin.Forms.PanGestureRecognizer>) = 

        let attribBuilder = ViewBuilders.BuildPanGestureRecognizer(0,
                               ?touchPoints=touchPoints,
                               ?panUpdated=panUpdated,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.PanGestureRecognizer> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.PanGestureRecognizer>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.PanGestureRecognizer>(ViewBuilders.CreateFuncPanGestureRecognizer, ViewBuilders.UpdateFuncPanGestureRecognizer, attribBuilder)

    /// Builds the attributes for a TapGestureRecognizer in the view
    static member inline BuildTapGestureRecognizer(attribCount: int,
                                                   ?command: unit -> unit,
                                                   ?numberOfTapsRequired: int,
                                                   ?classId: string,
                                                   ?styleId: string,
                                                   ?automationId: string,
                                                   ?created: obj -> unit,
                                                   ?ref: ViewRef) = 

        let attribCount = match command with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match numberOfTapsRequired with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildElement(attribCount, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match command with None -> () | Some v -> attribBuilder.Add(ViewAttributes.CommandAttribKey, makeCommand(v)) 
        match numberOfTapsRequired with None -> () | Some v -> attribBuilder.Add(ViewAttributes.NumberOfTapsRequiredAttribKey, (v)) 
        attribBuilder

    static member val CreateFuncTapGestureRecognizer : (unit -> Xamarin.Forms.TapGestureRecognizer) = (fun () -> ViewBuilders.CreateTapGestureRecognizer())

    static member CreateTapGestureRecognizer () : Xamarin.Forms.TapGestureRecognizer =
        upcast (new Xamarin.Forms.TapGestureRecognizer())

    static member val UpdateFuncTapGestureRecognizer =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.TapGestureRecognizer) -> ViewBuilders.UpdateTapGestureRecognizer (prevOpt, curr, target)) 

    static member UpdateTapGestureRecognizer (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.TapGestureRecognizer) = 
        // update the inherited Element element
        let baseElement = (if ViewProto.ProtoElement.IsNone then ViewProto.ProtoElement <- Some (ViewBuilders.ConstructElement())); ViewProto.ProtoElement.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevCommandOpt = ValueNone
        let mutable currCommandOpt = ValueNone
        let mutable prevNumberOfTapsRequiredOpt = ValueNone
        let mutable currNumberOfTapsRequiredOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.CommandAttribKey.KeyValue then 
                currCommandOpt <- ValueSome (kvp.Value :?> System.Windows.Input.ICommand)
            if kvp.Key = ViewAttributes.NumberOfTapsRequiredAttribKey.KeyValue then 
                currNumberOfTapsRequiredOpt <- ValueSome (kvp.Value :?> int)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.CommandAttribKey.KeyValue then 
                    prevCommandOpt <- ValueSome (kvp.Value :?> System.Windows.Input.ICommand)
                if kvp.Key = ViewAttributes.NumberOfTapsRequiredAttribKey.KeyValue then 
                    prevNumberOfTapsRequiredOpt <- ValueSome (kvp.Value :?> int)
        match prevCommandOpt, currCommandOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Command <-  currValue
        | ValueSome _, ValueNone -> target.Command <- null
        | ValueNone, ValueNone -> ()
        match prevNumberOfTapsRequiredOpt, currNumberOfTapsRequiredOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.NumberOfTapsRequired <-  currValue
        | ValueSome _, ValueNone -> target.NumberOfTapsRequired <- 1
        | ValueNone, ValueNone -> ()

    static member inline ConstructTapGestureRecognizer(?command: unit -> unit,
                                                       ?numberOfTapsRequired: int,
                                                       ?classId: string,
                                                       ?styleId: string,
                                                       ?automationId: string,
                                                       ?created: (Xamarin.Forms.TapGestureRecognizer -> unit),
                                                       ?ref: ViewRef<Xamarin.Forms.TapGestureRecognizer>) = 

        let attribBuilder = ViewBuilders.BuildTapGestureRecognizer(0,
                               ?command=command,
                               ?numberOfTapsRequired=numberOfTapsRequired,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.TapGestureRecognizer> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.TapGestureRecognizer>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.TapGestureRecognizer>(ViewBuilders.CreateFuncTapGestureRecognizer, ViewBuilders.UpdateFuncTapGestureRecognizer, attribBuilder)

    /// Builds the attributes for a ClickGestureRecognizer in the view
    static member inline BuildClickGestureRecognizer(attribCount: int,
                                                     ?command: unit -> unit,
                                                     ?numberOfClicksRequired: int,
                                                     ?buttons: Xamarin.Forms.ButtonsMask,
                                                     ?classId: string,
                                                     ?styleId: string,
                                                     ?automationId: string,
                                                     ?created: obj -> unit,
                                                     ?ref: ViewRef) = 

        let attribCount = match command with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match numberOfClicksRequired with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match buttons with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildElement(attribCount, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match command with None -> () | Some v -> attribBuilder.Add(ViewAttributes.CommandAttribKey, makeCommand(v)) 
        match numberOfClicksRequired with None -> () | Some v -> attribBuilder.Add(ViewAttributes.NumberOfClicksRequiredAttribKey, (v)) 
        match buttons with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ButtonsAttribKey, (v)) 
        attribBuilder

    static member val CreateFuncClickGestureRecognizer : (unit -> Xamarin.Forms.ClickGestureRecognizer) = (fun () -> ViewBuilders.CreateClickGestureRecognizer())

    static member CreateClickGestureRecognizer () : Xamarin.Forms.ClickGestureRecognizer =
        upcast (new Xamarin.Forms.ClickGestureRecognizer())

    static member val UpdateFuncClickGestureRecognizer =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.ClickGestureRecognizer) -> ViewBuilders.UpdateClickGestureRecognizer (prevOpt, curr, target)) 

    static member UpdateClickGestureRecognizer (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.ClickGestureRecognizer) = 
        // update the inherited Element element
        let baseElement = (if ViewProto.ProtoElement.IsNone then ViewProto.ProtoElement <- Some (ViewBuilders.ConstructElement())); ViewProto.ProtoElement.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevCommandOpt = ValueNone
        let mutable currCommandOpt = ValueNone
        let mutable prevNumberOfClicksRequiredOpt = ValueNone
        let mutable currNumberOfClicksRequiredOpt = ValueNone
        let mutable prevButtonsOpt = ValueNone
        let mutable currButtonsOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.CommandAttribKey.KeyValue then 
                currCommandOpt <- ValueSome (kvp.Value :?> System.Windows.Input.ICommand)
            if kvp.Key = ViewAttributes.NumberOfClicksRequiredAttribKey.KeyValue then 
                currNumberOfClicksRequiredOpt <- ValueSome (kvp.Value :?> int)
            if kvp.Key = ViewAttributes.ButtonsAttribKey.KeyValue then 
                currButtonsOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.ButtonsMask)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.CommandAttribKey.KeyValue then 
                    prevCommandOpt <- ValueSome (kvp.Value :?> System.Windows.Input.ICommand)
                if kvp.Key = ViewAttributes.NumberOfClicksRequiredAttribKey.KeyValue then 
                    prevNumberOfClicksRequiredOpt <- ValueSome (kvp.Value :?> int)
                if kvp.Key = ViewAttributes.ButtonsAttribKey.KeyValue then 
                    prevButtonsOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.ButtonsMask)
        match prevCommandOpt, currCommandOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Command <-  currValue
        | ValueSome _, ValueNone -> target.Command <- null
        | ValueNone, ValueNone -> ()
        match prevNumberOfClicksRequiredOpt, currNumberOfClicksRequiredOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.NumberOfClicksRequired <-  currValue
        | ValueSome _, ValueNone -> target.NumberOfClicksRequired <- 1
        | ValueNone, ValueNone -> ()
        match prevButtonsOpt, currButtonsOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Buttons <-  currValue
        | ValueSome _, ValueNone -> target.Buttons <- Xamarin.Forms.ButtonsMask.Primary
        | ValueNone, ValueNone -> ()

    static member inline ConstructClickGestureRecognizer(?command: unit -> unit,
                                                         ?numberOfClicksRequired: int,
                                                         ?buttons: Xamarin.Forms.ButtonsMask,
                                                         ?classId: string,
                                                         ?styleId: string,
                                                         ?automationId: string,
                                                         ?created: (Xamarin.Forms.ClickGestureRecognizer -> unit),
                                                         ?ref: ViewRef<Xamarin.Forms.ClickGestureRecognizer>) = 

        let attribBuilder = ViewBuilders.BuildClickGestureRecognizer(0,
                               ?command=command,
                               ?numberOfClicksRequired=numberOfClicksRequired,
                               ?buttons=buttons,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.ClickGestureRecognizer> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.ClickGestureRecognizer>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.ClickGestureRecognizer>(ViewBuilders.CreateFuncClickGestureRecognizer, ViewBuilders.UpdateFuncClickGestureRecognizer, attribBuilder)

    /// Builds the attributes for a PinchGestureRecognizer in the view
    static member inline BuildPinchGestureRecognizer(attribCount: int,
                                                     ?isPinching: bool,
                                                     ?pinchUpdated: Xamarin.Forms.PinchGestureUpdatedEventArgs -> unit,
                                                     ?classId: string,
                                                     ?styleId: string,
                                                     ?automationId: string,
                                                     ?created: obj -> unit,
                                                     ?ref: ViewRef) = 

        let attribCount = match isPinching with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match pinchUpdated with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildElement(attribCount, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match isPinching with None -> () | Some v -> attribBuilder.Add(ViewAttributes.IsPinchingAttribKey, (v)) 
        match pinchUpdated with None -> () | Some v -> attribBuilder.Add(ViewAttributes.PinchUpdatedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.PinchGestureUpdatedEventArgs>(fun _sender args -> f args))(v)) 
        attribBuilder

    static member val CreateFuncPinchGestureRecognizer : (unit -> Xamarin.Forms.PinchGestureRecognizer) = (fun () -> ViewBuilders.CreatePinchGestureRecognizer())

    static member CreatePinchGestureRecognizer () : Xamarin.Forms.PinchGestureRecognizer =
        upcast (new Xamarin.Forms.PinchGestureRecognizer())

    static member val UpdateFuncPinchGestureRecognizer =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.PinchGestureRecognizer) -> ViewBuilders.UpdatePinchGestureRecognizer (prevOpt, curr, target)) 

    static member UpdatePinchGestureRecognizer (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.PinchGestureRecognizer) = 
        // update the inherited Element element
        let baseElement = (if ViewProto.ProtoElement.IsNone then ViewProto.ProtoElement <- Some (ViewBuilders.ConstructElement())); ViewProto.ProtoElement.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevIsPinchingOpt = ValueNone
        let mutable currIsPinchingOpt = ValueNone
        let mutable prevPinchUpdatedOpt = ValueNone
        let mutable currPinchUpdatedOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.IsPinchingAttribKey.KeyValue then 
                currIsPinchingOpt <- ValueSome (kvp.Value :?> bool)
            if kvp.Key = ViewAttributes.PinchUpdatedAttribKey.KeyValue then 
                currPinchUpdatedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.PinchGestureUpdatedEventArgs>)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.IsPinchingAttribKey.KeyValue then 
                    prevIsPinchingOpt <- ValueSome (kvp.Value :?> bool)
                if kvp.Key = ViewAttributes.PinchUpdatedAttribKey.KeyValue then 
                    prevPinchUpdatedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.PinchGestureUpdatedEventArgs>)
        match prevIsPinchingOpt, currIsPinchingOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.IsPinching <-  currValue
        | ValueSome _, ValueNone -> target.IsPinching <- false
        | ValueNone, ValueNone -> ()
        match prevPinchUpdatedOpt, currPinchUpdatedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.PinchUpdated.RemoveHandler(prevValue); target.PinchUpdated.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.PinchUpdated.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.PinchUpdated.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()

    static member inline ConstructPinchGestureRecognizer(?isPinching: bool,
                                                         ?pinchUpdated: Xamarin.Forms.PinchGestureUpdatedEventArgs -> unit,
                                                         ?classId: string,
                                                         ?styleId: string,
                                                         ?automationId: string,
                                                         ?created: (Xamarin.Forms.PinchGestureRecognizer -> unit),
                                                         ?ref: ViewRef<Xamarin.Forms.PinchGestureRecognizer>) = 

        let attribBuilder = ViewBuilders.BuildPinchGestureRecognizer(0,
                               ?isPinching=isPinching,
                               ?pinchUpdated=pinchUpdated,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.PinchGestureRecognizer> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.PinchGestureRecognizer>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.PinchGestureRecognizer>(ViewBuilders.CreateFuncPinchGestureRecognizer, ViewBuilders.UpdateFuncPinchGestureRecognizer, attribBuilder)

    /// Builds the attributes for a SwipeGestureRecognizer in the view
    static member inline BuildSwipeGestureRecognizer(attribCount: int,
                                                     ?command: unit -> unit,
                                                     ?direction: Xamarin.Forms.SwipeDirection,
                                                     ?threshold: System.UInt32,
                                                     ?swiped: Xamarin.Forms.SwipedEventArgs -> unit,
                                                     ?classId: string,
                                                     ?styleId: string,
                                                     ?automationId: string,
                                                     ?created: obj -> unit,
                                                     ?ref: ViewRef) = 

        let attribCount = match command with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match direction with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match threshold with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match swiped with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildElement(attribCount, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match command with None -> () | Some v -> attribBuilder.Add(ViewAttributes.CommandAttribKey, makeCommand(v)) 
        match direction with None -> () | Some v -> attribBuilder.Add(ViewAttributes.SwipeGestureRecognizerDirectionAttribKey, (v)) 
        match threshold with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ThresholdAttribKey, (v)) 
        match swiped with None -> () | Some v -> attribBuilder.Add(ViewAttributes.SwipedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.SwipedEventArgs>(fun _sender args -> f args))(v)) 
        attribBuilder

    static member val CreateFuncSwipeGestureRecognizer : (unit -> Xamarin.Forms.SwipeGestureRecognizer) = (fun () -> ViewBuilders.CreateSwipeGestureRecognizer())

    static member CreateSwipeGestureRecognizer () : Xamarin.Forms.SwipeGestureRecognizer =
        upcast (new Xamarin.Forms.SwipeGestureRecognizer())

    static member val UpdateFuncSwipeGestureRecognizer =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.SwipeGestureRecognizer) -> ViewBuilders.UpdateSwipeGestureRecognizer (prevOpt, curr, target)) 

    static member UpdateSwipeGestureRecognizer (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.SwipeGestureRecognizer) = 
        // update the inherited Element element
        let baseElement = (if ViewProto.ProtoElement.IsNone then ViewProto.ProtoElement <- Some (ViewBuilders.ConstructElement())); ViewProto.ProtoElement.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevCommandOpt = ValueNone
        let mutable currCommandOpt = ValueNone
        let mutable prevSwipeGestureRecognizerDirectionOpt = ValueNone
        let mutable currSwipeGestureRecognizerDirectionOpt = ValueNone
        let mutable prevThresholdOpt = ValueNone
        let mutable currThresholdOpt = ValueNone
        let mutable prevSwipedOpt = ValueNone
        let mutable currSwipedOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.CommandAttribKey.KeyValue then 
                currCommandOpt <- ValueSome (kvp.Value :?> System.Windows.Input.ICommand)
            if kvp.Key = ViewAttributes.SwipeGestureRecognizerDirectionAttribKey.KeyValue then 
                currSwipeGestureRecognizerDirectionOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.SwipeDirection)
            if kvp.Key = ViewAttributes.ThresholdAttribKey.KeyValue then 
                currThresholdOpt <- ValueSome (kvp.Value :?> System.UInt32)
            if kvp.Key = ViewAttributes.SwipedAttribKey.KeyValue then 
                currSwipedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.SwipedEventArgs>)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.CommandAttribKey.KeyValue then 
                    prevCommandOpt <- ValueSome (kvp.Value :?> System.Windows.Input.ICommand)
                if kvp.Key = ViewAttributes.SwipeGestureRecognizerDirectionAttribKey.KeyValue then 
                    prevSwipeGestureRecognizerDirectionOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.SwipeDirection)
                if kvp.Key = ViewAttributes.ThresholdAttribKey.KeyValue then 
                    prevThresholdOpt <- ValueSome (kvp.Value :?> System.UInt32)
                if kvp.Key = ViewAttributes.SwipedAttribKey.KeyValue then 
                    prevSwipedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.SwipedEventArgs>)
        match prevCommandOpt, currCommandOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Command <-  currValue
        | ValueSome _, ValueNone -> target.Command <- null
        | ValueNone, ValueNone -> ()
        match prevSwipeGestureRecognizerDirectionOpt, currSwipeGestureRecognizerDirectionOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Direction <-  currValue
        | ValueSome _, ValueNone -> target.Direction <- enum<Xamarin.Forms.SwipeDirection>(0)
        | ValueNone, ValueNone -> ()
        match prevThresholdOpt, currThresholdOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Threshold <-  currValue
        | ValueSome _, ValueNone -> target.Threshold <- 100u
        | ValueNone, ValueNone -> ()
        match prevSwipedOpt, currSwipedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.Swiped.RemoveHandler(prevValue); target.Swiped.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.Swiped.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.Swiped.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()

    static member inline ConstructSwipeGestureRecognizer(?command: unit -> unit,
                                                         ?direction: Xamarin.Forms.SwipeDirection,
                                                         ?threshold: System.UInt32,
                                                         ?swiped: Xamarin.Forms.SwipedEventArgs -> unit,
                                                         ?classId: string,
                                                         ?styleId: string,
                                                         ?automationId: string,
                                                         ?created: (Xamarin.Forms.SwipeGestureRecognizer -> unit),
                                                         ?ref: ViewRef<Xamarin.Forms.SwipeGestureRecognizer>) = 

        let attribBuilder = ViewBuilders.BuildSwipeGestureRecognizer(0,
                               ?command=command,
                               ?direction=direction,
                               ?threshold=threshold,
                               ?swiped=swiped,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.SwipeGestureRecognizer> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.SwipeGestureRecognizer>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.SwipeGestureRecognizer>(ViewBuilders.CreateFuncSwipeGestureRecognizer, ViewBuilders.UpdateFuncSwipeGestureRecognizer, attribBuilder)

    /// Builds the attributes for a ActivityIndicator in the view
    static member inline BuildActivityIndicator(attribCount: int,
                                                ?color: Xamarin.Forms.Color,
                                                ?isRunning: bool,
                                                ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                                ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                                ?margin: obj,
                                                ?gestureRecognizers: ViewElement list,
                                                ?anchorX: double,
                                                ?anchorY: double,
                                                ?backgroundColor: Xamarin.Forms.Color,
                                                ?heightRequest: double,
                                                ?inputTransparent: bool,
                                                ?isEnabled: bool,
                                                ?isVisible: bool,
                                                ?minimumHeightRequest: double,
                                                ?minimumWidthRequest: double,
                                                ?opacity: double,
                                                ?rotation: double,
                                                ?rotationX: double,
                                                ?rotationY: double,
                                                ?scale: double,
                                                ?style: Xamarin.Forms.Style,
                                                ?styleClass: obj,
                                                ?translationX: double,
                                                ?translationY: double,
                                                ?widthRequest: double,
                                                ?resources: (string * obj) list,
                                                ?styles: Xamarin.Forms.Style list,
                                                ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                                ?isTabStop: bool,
                                                ?scaleX: double,
                                                ?scaleY: double,
                                                ?tabIndex: int,
                                                ?childrenReordered: System.EventArgs -> unit,
                                                ?measureInvalidated: System.EventArgs -> unit,
                                                ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                                ?sizeChanged: System.EventArgs -> unit,
                                                ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                                ?classId: string,
                                                ?styleId: string,
                                                ?automationId: string,
                                                ?created: obj -> unit,
                                                ?ref: ViewRef) = 

        let attribCount = match color with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match isRunning with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildView(attribCount, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match color with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ColorAttribKey, (v)) 
        match isRunning with None -> () | Some v -> attribBuilder.Add(ViewAttributes.IsRunningAttribKey, (v)) 
        attribBuilder

    static member val CreateFuncActivityIndicator : (unit -> Xamarin.Forms.ActivityIndicator) = (fun () -> ViewBuilders.CreateActivityIndicator())

    static member CreateActivityIndicator () : Xamarin.Forms.ActivityIndicator =
        upcast (new Xamarin.Forms.ActivityIndicator())

    static member val UpdateFuncActivityIndicator =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.ActivityIndicator) -> ViewBuilders.UpdateActivityIndicator (prevOpt, curr, target)) 

    static member UpdateActivityIndicator (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.ActivityIndicator) = 
        // update the inherited View element
        let baseElement = (if ViewProto.ProtoView.IsNone then ViewProto.ProtoView <- Some (ViewBuilders.ConstructView())); ViewProto.ProtoView.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevColorOpt = ValueNone
        let mutable currColorOpt = ValueNone
        let mutable prevIsRunningOpt = ValueNone
        let mutable currIsRunningOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.ColorAttribKey.KeyValue then 
                currColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
            if kvp.Key = ViewAttributes.IsRunningAttribKey.KeyValue then 
                currIsRunningOpt <- ValueSome (kvp.Value :?> bool)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.ColorAttribKey.KeyValue then 
                    prevColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
                if kvp.Key = ViewAttributes.IsRunningAttribKey.KeyValue then 
                    prevIsRunningOpt <- ValueSome (kvp.Value :?> bool)
        match prevColorOpt, currColorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Color <-  currValue
        | ValueSome _, ValueNone -> target.Color <- Xamarin.Forms.Color.Default
        | ValueNone, ValueNone -> ()
        match prevIsRunningOpt, currIsRunningOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.IsRunning <-  currValue
        | ValueSome _, ValueNone -> target.IsRunning <- false
        | ValueNone, ValueNone -> ()

    static member inline ConstructActivityIndicator(?color: Xamarin.Forms.Color,
                                                    ?isRunning: bool,
                                                    ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                                    ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                                    ?margin: obj,
                                                    ?gestureRecognizers: ViewElement list,
                                                    ?anchorX: double,
                                                    ?anchorY: double,
                                                    ?backgroundColor: Xamarin.Forms.Color,
                                                    ?heightRequest: double,
                                                    ?inputTransparent: bool,
                                                    ?isEnabled: bool,
                                                    ?isVisible: bool,
                                                    ?minimumHeightRequest: double,
                                                    ?minimumWidthRequest: double,
                                                    ?opacity: double,
                                                    ?rotation: double,
                                                    ?rotationX: double,
                                                    ?rotationY: double,
                                                    ?scale: double,
                                                    ?style: Xamarin.Forms.Style,
                                                    ?styleClass: obj,
                                                    ?translationX: double,
                                                    ?translationY: double,
                                                    ?widthRequest: double,
                                                    ?resources: (string * obj) list,
                                                    ?styles: Xamarin.Forms.Style list,
                                                    ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                                    ?isTabStop: bool,
                                                    ?scaleX: double,
                                                    ?scaleY: double,
                                                    ?tabIndex: int,
                                                    ?childrenReordered: System.EventArgs -> unit,
                                                    ?measureInvalidated: System.EventArgs -> unit,
                                                    ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                                    ?sizeChanged: System.EventArgs -> unit,
                                                    ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                                    ?classId: string,
                                                    ?styleId: string,
                                                    ?automationId: string,
                                                    ?created: (Xamarin.Forms.ActivityIndicator -> unit),
                                                    ?ref: ViewRef<Xamarin.Forms.ActivityIndicator>) = 

        let attribBuilder = ViewBuilders.BuildActivityIndicator(0,
                               ?color=color,
                               ?isRunning=isRunning,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.ActivityIndicator> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.ActivityIndicator>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.ActivityIndicator>(ViewBuilders.CreateFuncActivityIndicator, ViewBuilders.UpdateFuncActivityIndicator, attribBuilder)

    /// Builds the attributes for a BoxView in the view
    static member inline BuildBoxView(attribCount: int,
                                      ?color: Xamarin.Forms.Color,
                                      ?cornerRadius: Xamarin.Forms.CornerRadius,
                                      ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                      ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                      ?margin: obj,
                                      ?gestureRecognizers: ViewElement list,
                                      ?anchorX: double,
                                      ?anchorY: double,
                                      ?backgroundColor: Xamarin.Forms.Color,
                                      ?heightRequest: double,
                                      ?inputTransparent: bool,
                                      ?isEnabled: bool,
                                      ?isVisible: bool,
                                      ?minimumHeightRequest: double,
                                      ?minimumWidthRequest: double,
                                      ?opacity: double,
                                      ?rotation: double,
                                      ?rotationX: double,
                                      ?rotationY: double,
                                      ?scale: double,
                                      ?style: Xamarin.Forms.Style,
                                      ?styleClass: obj,
                                      ?translationX: double,
                                      ?translationY: double,
                                      ?widthRequest: double,
                                      ?resources: (string * obj) list,
                                      ?styles: Xamarin.Forms.Style list,
                                      ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                      ?isTabStop: bool,
                                      ?scaleX: double,
                                      ?scaleY: double,
                                      ?tabIndex: int,
                                      ?childrenReordered: System.EventArgs -> unit,
                                      ?measureInvalidated: System.EventArgs -> unit,
                                      ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                      ?sizeChanged: System.EventArgs -> unit,
                                      ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                      ?classId: string,
                                      ?styleId: string,
                                      ?automationId: string,
                                      ?created: obj -> unit,
                                      ?ref: ViewRef) = 

        let attribCount = match color with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match cornerRadius with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildView(attribCount, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match color with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ColorAttribKey, (v)) 
        match cornerRadius with None -> () | Some v -> attribBuilder.Add(ViewAttributes.BoxViewCornerRadiusAttribKey, (v)) 
        attribBuilder

    static member val CreateFuncBoxView : (unit -> Xamarin.Forms.BoxView) = (fun () -> ViewBuilders.CreateBoxView())

    static member CreateBoxView () : Xamarin.Forms.BoxView =
        upcast (new Xamarin.Forms.BoxView())

    static member val UpdateFuncBoxView =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.BoxView) -> ViewBuilders.UpdateBoxView (prevOpt, curr, target)) 

    static member UpdateBoxView (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.BoxView) = 
        // update the inherited View element
        let baseElement = (if ViewProto.ProtoView.IsNone then ViewProto.ProtoView <- Some (ViewBuilders.ConstructView())); ViewProto.ProtoView.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevColorOpt = ValueNone
        let mutable currColorOpt = ValueNone
        let mutable prevBoxViewCornerRadiusOpt = ValueNone
        let mutable currBoxViewCornerRadiusOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.ColorAttribKey.KeyValue then 
                currColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
            if kvp.Key = ViewAttributes.BoxViewCornerRadiusAttribKey.KeyValue then 
                currBoxViewCornerRadiusOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.CornerRadius)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.ColorAttribKey.KeyValue then 
                    prevColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
                if kvp.Key = ViewAttributes.BoxViewCornerRadiusAttribKey.KeyValue then 
                    prevBoxViewCornerRadiusOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.CornerRadius)
        match prevColorOpt, currColorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Color <-  currValue
        | ValueSome _, ValueNone -> target.Color <- Xamarin.Forms.Color.Default
        | ValueNone, ValueNone -> ()
        match prevBoxViewCornerRadiusOpt, currBoxViewCornerRadiusOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.CornerRadius <-  currValue
        | ValueSome _, ValueNone -> target.CornerRadius <- Unchecked.defaultof<Xamarin.Forms.CornerRadius>
        | ValueNone, ValueNone -> ()

    static member inline ConstructBoxView(?color: Xamarin.Forms.Color,
                                          ?cornerRadius: Xamarin.Forms.CornerRadius,
                                          ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                          ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                          ?margin: obj,
                                          ?gestureRecognizers: ViewElement list,
                                          ?anchorX: double,
                                          ?anchorY: double,
                                          ?backgroundColor: Xamarin.Forms.Color,
                                          ?heightRequest: double,
                                          ?inputTransparent: bool,
                                          ?isEnabled: bool,
                                          ?isVisible: bool,
                                          ?minimumHeightRequest: double,
                                          ?minimumWidthRequest: double,
                                          ?opacity: double,
                                          ?rotation: double,
                                          ?rotationX: double,
                                          ?rotationY: double,
                                          ?scale: double,
                                          ?style: Xamarin.Forms.Style,
                                          ?styleClass: obj,
                                          ?translationX: double,
                                          ?translationY: double,
                                          ?widthRequest: double,
                                          ?resources: (string * obj) list,
                                          ?styles: Xamarin.Forms.Style list,
                                          ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                          ?isTabStop: bool,
                                          ?scaleX: double,
                                          ?scaleY: double,
                                          ?tabIndex: int,
                                          ?childrenReordered: System.EventArgs -> unit,
                                          ?measureInvalidated: System.EventArgs -> unit,
                                          ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                          ?sizeChanged: System.EventArgs -> unit,
                                          ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                          ?classId: string,
                                          ?styleId: string,
                                          ?automationId: string,
                                          ?created: (Xamarin.Forms.BoxView -> unit),
                                          ?ref: ViewRef<Xamarin.Forms.BoxView>) = 

        let attribBuilder = ViewBuilders.BuildBoxView(0,
                               ?color=color,
                               ?cornerRadius=cornerRadius,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.BoxView> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.BoxView>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.BoxView>(ViewBuilders.CreateFuncBoxView, ViewBuilders.UpdateFuncBoxView, attribBuilder)

    /// Builds the attributes for a ProgressBar in the view
    static member inline BuildProgressBar(attribCount: int,
                                          ?progress: double,
                                          ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                          ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                          ?margin: obj,
                                          ?gestureRecognizers: ViewElement list,
                                          ?anchorX: double,
                                          ?anchorY: double,
                                          ?backgroundColor: Xamarin.Forms.Color,
                                          ?heightRequest: double,
                                          ?inputTransparent: bool,
                                          ?isEnabled: bool,
                                          ?isVisible: bool,
                                          ?minimumHeightRequest: double,
                                          ?minimumWidthRequest: double,
                                          ?opacity: double,
                                          ?rotation: double,
                                          ?rotationX: double,
                                          ?rotationY: double,
                                          ?scale: double,
                                          ?style: Xamarin.Forms.Style,
                                          ?styleClass: obj,
                                          ?translationX: double,
                                          ?translationY: double,
                                          ?widthRequest: double,
                                          ?resources: (string * obj) list,
                                          ?styles: Xamarin.Forms.Style list,
                                          ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                          ?isTabStop: bool,
                                          ?scaleX: double,
                                          ?scaleY: double,
                                          ?tabIndex: int,
                                          ?childrenReordered: System.EventArgs -> unit,
                                          ?measureInvalidated: System.EventArgs -> unit,
                                          ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                          ?sizeChanged: System.EventArgs -> unit,
                                          ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                          ?classId: string,
                                          ?styleId: string,
                                          ?automationId: string,
                                          ?created: obj -> unit,
                                          ?ref: ViewRef) = 

        let attribCount = match progress with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildView(attribCount, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match progress with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ProgressAttribKey, (v)) 
        attribBuilder

    static member val CreateFuncProgressBar : (unit -> Xamarin.Forms.ProgressBar) = (fun () -> ViewBuilders.CreateProgressBar())

    static member CreateProgressBar () : Xamarin.Forms.ProgressBar =
        upcast (new Xamarin.Forms.ProgressBar())

    static member val UpdateFuncProgressBar =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.ProgressBar) -> ViewBuilders.UpdateProgressBar (prevOpt, curr, target)) 

    static member UpdateProgressBar (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.ProgressBar) = 
        // update the inherited View element
        let baseElement = (if ViewProto.ProtoView.IsNone then ViewProto.ProtoView <- Some (ViewBuilders.ConstructView())); ViewProto.ProtoView.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevProgressOpt = ValueNone
        let mutable currProgressOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.ProgressAttribKey.KeyValue then 
                currProgressOpt <- ValueSome (kvp.Value :?> double)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.ProgressAttribKey.KeyValue then 
                    prevProgressOpt <- ValueSome (kvp.Value :?> double)
        match prevProgressOpt, currProgressOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Progress <-  currValue
        | ValueSome _, ValueNone -> target.Progress <- 0.0
        | ValueNone, ValueNone -> ()

    static member inline ConstructProgressBar(?progress: double,
                                              ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                              ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                              ?margin: obj,
                                              ?gestureRecognizers: ViewElement list,
                                              ?anchorX: double,
                                              ?anchorY: double,
                                              ?backgroundColor: Xamarin.Forms.Color,
                                              ?heightRequest: double,
                                              ?inputTransparent: bool,
                                              ?isEnabled: bool,
                                              ?isVisible: bool,
                                              ?minimumHeightRequest: double,
                                              ?minimumWidthRequest: double,
                                              ?opacity: double,
                                              ?rotation: double,
                                              ?rotationX: double,
                                              ?rotationY: double,
                                              ?scale: double,
                                              ?style: Xamarin.Forms.Style,
                                              ?styleClass: obj,
                                              ?translationX: double,
                                              ?translationY: double,
                                              ?widthRequest: double,
                                              ?resources: (string * obj) list,
                                              ?styles: Xamarin.Forms.Style list,
                                              ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                              ?isTabStop: bool,
                                              ?scaleX: double,
                                              ?scaleY: double,
                                              ?tabIndex: int,
                                              ?childrenReordered: System.EventArgs -> unit,
                                              ?measureInvalidated: System.EventArgs -> unit,
                                              ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                              ?sizeChanged: System.EventArgs -> unit,
                                              ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                              ?classId: string,
                                              ?styleId: string,
                                              ?automationId: string,
                                              ?created: (Xamarin.Forms.ProgressBar -> unit),
                                              ?ref: ViewRef<Xamarin.Forms.ProgressBar>) = 

        let attribBuilder = ViewBuilders.BuildProgressBar(0,
                               ?progress=progress,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.ProgressBar> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.ProgressBar>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.ProgressBar>(ViewBuilders.CreateFuncProgressBar, ViewBuilders.UpdateFuncProgressBar, attribBuilder)

    /// Builds the attributes for a Layout in the view
    static member inline BuildLayout(attribCount: int,
                                     ?isClippedToBounds: bool,
                                     ?padding: obj,
                                     ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                     ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                     ?margin: obj,
                                     ?gestureRecognizers: ViewElement list,
                                     ?anchorX: double,
                                     ?anchorY: double,
                                     ?backgroundColor: Xamarin.Forms.Color,
                                     ?heightRequest: double,
                                     ?inputTransparent: bool,
                                     ?isEnabled: bool,
                                     ?isVisible: bool,
                                     ?minimumHeightRequest: double,
                                     ?minimumWidthRequest: double,
                                     ?opacity: double,
                                     ?rotation: double,
                                     ?rotationX: double,
                                     ?rotationY: double,
                                     ?scale: double,
                                     ?style: Xamarin.Forms.Style,
                                     ?styleClass: obj,
                                     ?translationX: double,
                                     ?translationY: double,
                                     ?widthRequest: double,
                                     ?resources: (string * obj) list,
                                     ?styles: Xamarin.Forms.Style list,
                                     ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                     ?isTabStop: bool,
                                     ?scaleX: double,
                                     ?scaleY: double,
                                     ?tabIndex: int,
                                     ?childrenReordered: System.EventArgs -> unit,
                                     ?measureInvalidated: System.EventArgs -> unit,
                                     ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                     ?sizeChanged: System.EventArgs -> unit,
                                     ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                     ?classId: string,
                                     ?styleId: string,
                                     ?automationId: string,
                                     ?created: obj -> unit,
                                     ?ref: ViewRef) = 

        let attribCount = match isClippedToBounds with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match padding with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildView(attribCount, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match isClippedToBounds with None -> () | Some v -> attribBuilder.Add(ViewAttributes.IsClippedToBoundsAttribKey, (v)) 
        match padding with None -> () | Some v -> attribBuilder.Add(ViewAttributes.PaddingAttribKey, makeThickness(v)) 
        attribBuilder

    static member val CreateFuncLayout : (unit -> Xamarin.Forms.Layout) = (fun () -> ViewBuilders.CreateLayout())

    static member CreateLayout () : Xamarin.Forms.Layout =
        failwith "can't create Xamarin.Forms.Layout"

    static member val UpdateFuncLayout =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.Layout) -> ViewBuilders.UpdateLayout (prevOpt, curr, target)) 

    static member UpdateLayout (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.Layout) = 
        // update the inherited View element
        let baseElement = (if ViewProto.ProtoView.IsNone then ViewProto.ProtoView <- Some (ViewBuilders.ConstructView())); ViewProto.ProtoView.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevIsClippedToBoundsOpt = ValueNone
        let mutable currIsClippedToBoundsOpt = ValueNone
        let mutable prevPaddingOpt = ValueNone
        let mutable currPaddingOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.IsClippedToBoundsAttribKey.KeyValue then 
                currIsClippedToBoundsOpt <- ValueSome (kvp.Value :?> bool)
            if kvp.Key = ViewAttributes.PaddingAttribKey.KeyValue then 
                currPaddingOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Thickness)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.IsClippedToBoundsAttribKey.KeyValue then 
                    prevIsClippedToBoundsOpt <- ValueSome (kvp.Value :?> bool)
                if kvp.Key = ViewAttributes.PaddingAttribKey.KeyValue then 
                    prevPaddingOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Thickness)
        match prevIsClippedToBoundsOpt, currIsClippedToBoundsOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.IsClippedToBounds <-  currValue
        | ValueSome _, ValueNone -> target.IsClippedToBounds <- false
        | ValueNone, ValueNone -> ()
        match prevPaddingOpt, currPaddingOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Padding <-  currValue
        | ValueSome _, ValueNone -> target.Padding <- Unchecked.defaultof<Xamarin.Forms.Thickness>
        | ValueNone, ValueNone -> ()

    static member inline ConstructLayout(?isClippedToBounds: bool,
                                         ?padding: obj,
                                         ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                         ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                         ?margin: obj,
                                         ?gestureRecognizers: ViewElement list,
                                         ?anchorX: double,
                                         ?anchorY: double,
                                         ?backgroundColor: Xamarin.Forms.Color,
                                         ?heightRequest: double,
                                         ?inputTransparent: bool,
                                         ?isEnabled: bool,
                                         ?isVisible: bool,
                                         ?minimumHeightRequest: double,
                                         ?minimumWidthRequest: double,
                                         ?opacity: double,
                                         ?rotation: double,
                                         ?rotationX: double,
                                         ?rotationY: double,
                                         ?scale: double,
                                         ?style: Xamarin.Forms.Style,
                                         ?styleClass: obj,
                                         ?translationX: double,
                                         ?translationY: double,
                                         ?widthRequest: double,
                                         ?resources: (string * obj) list,
                                         ?styles: Xamarin.Forms.Style list,
                                         ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                         ?isTabStop: bool,
                                         ?scaleX: double,
                                         ?scaleY: double,
                                         ?tabIndex: int,
                                         ?childrenReordered: System.EventArgs -> unit,
                                         ?measureInvalidated: System.EventArgs -> unit,
                                         ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                         ?sizeChanged: System.EventArgs -> unit,
                                         ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                         ?classId: string,
                                         ?styleId: string,
                                         ?automationId: string,
                                         ?created: (Xamarin.Forms.Layout -> unit),
                                         ?ref: ViewRef<Xamarin.Forms.Layout>) = 

        let attribBuilder = ViewBuilders.BuildLayout(0,
                               ?isClippedToBounds=isClippedToBounds,
                               ?padding=padding,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.Layout> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.Layout>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.Layout>(ViewBuilders.CreateFuncLayout, ViewBuilders.UpdateFuncLayout, attribBuilder)

    /// Builds the attributes for a ScrollView in the view
    static member inline BuildScrollView(attribCount: int,
                                         ?content: ViewElement,
                                         ?orientation: Xamarin.Forms.ScrollOrientation,
                                         ?horizontalScrollBarVisibility: Xamarin.Forms.ScrollBarVisibility,
                                         ?verticalScrollBarVisibility: Xamarin.Forms.ScrollBarVisibility,
                                         ?scrollTo: float * float * Fabulous.DynamicViews.AnimationKind,
                                         ?scrolled: Xamarin.Forms.ScrolledEventArgs -> unit,
                                         ?isClippedToBounds: bool,
                                         ?padding: obj,
                                         ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                         ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                         ?margin: obj,
                                         ?gestureRecognizers: ViewElement list,
                                         ?anchorX: double,
                                         ?anchorY: double,
                                         ?backgroundColor: Xamarin.Forms.Color,
                                         ?heightRequest: double,
                                         ?inputTransparent: bool,
                                         ?isEnabled: bool,
                                         ?isVisible: bool,
                                         ?minimumHeightRequest: double,
                                         ?minimumWidthRequest: double,
                                         ?opacity: double,
                                         ?rotation: double,
                                         ?rotationX: double,
                                         ?rotationY: double,
                                         ?scale: double,
                                         ?style: Xamarin.Forms.Style,
                                         ?styleClass: obj,
                                         ?translationX: double,
                                         ?translationY: double,
                                         ?widthRequest: double,
                                         ?resources: (string * obj) list,
                                         ?styles: Xamarin.Forms.Style list,
                                         ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                         ?isTabStop: bool,
                                         ?scaleX: double,
                                         ?scaleY: double,
                                         ?tabIndex: int,
                                         ?childrenReordered: System.EventArgs -> unit,
                                         ?measureInvalidated: System.EventArgs -> unit,
                                         ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                         ?sizeChanged: System.EventArgs -> unit,
                                         ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                         ?classId: string,
                                         ?styleId: string,
                                         ?automationId: string,
                                         ?created: obj -> unit,
                                         ?ref: ViewRef) = 

        let attribCount = match content with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match orientation with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match horizontalScrollBarVisibility with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match verticalScrollBarVisibility with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match scrollTo with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match scrolled with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildLayout(attribCount, ?isClippedToBounds=isClippedToBounds, ?padding=padding, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match content with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ContentAttribKey, (v)) 
        match orientation with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ScrollOrientationAttribKey, (v)) 
        match horizontalScrollBarVisibility with None -> () | Some v -> attribBuilder.Add(ViewAttributes.HorizontalScrollBarVisibilityAttribKey, (v)) 
        match verticalScrollBarVisibility with None -> () | Some v -> attribBuilder.Add(ViewAttributes.VerticalScrollBarVisibilityAttribKey, (v)) 
        match scrollTo with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ScrollToAttribKey, (v)) 
        match scrolled with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ScrolledAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.ScrolledEventArgs>(fun _sender args -> f args))(v)) 
        attribBuilder

    static member val CreateFuncScrollView : (unit -> Xamarin.Forms.ScrollView) = (fun () -> ViewBuilders.CreateScrollView())

    static member CreateScrollView () : Xamarin.Forms.ScrollView =
        upcast (new Xamarin.Forms.ScrollView())

    static member val UpdateFuncScrollView =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.ScrollView) -> ViewBuilders.UpdateScrollView (prevOpt, curr, target)) 

    static member UpdateScrollView (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.ScrollView) = 
        // update the inherited Layout element
        let baseElement = (if ViewProto.ProtoLayout.IsNone then ViewProto.ProtoLayout <- Some (ViewBuilders.ConstructLayout())); ViewProto.ProtoLayout.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevContentOpt = ValueNone
        let mutable currContentOpt = ValueNone
        let mutable prevScrollOrientationOpt = ValueNone
        let mutable currScrollOrientationOpt = ValueNone
        let mutable prevHorizontalScrollBarVisibilityOpt = ValueNone
        let mutable currHorizontalScrollBarVisibilityOpt = ValueNone
        let mutable prevVerticalScrollBarVisibilityOpt = ValueNone
        let mutable currVerticalScrollBarVisibilityOpt = ValueNone
        let mutable prevScrollToOpt = ValueNone
        let mutable currScrollToOpt = ValueNone
        let mutable prevScrolledOpt = ValueNone
        let mutable currScrolledOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.ContentAttribKey.KeyValue then 
                currContentOpt <- ValueSome (kvp.Value :?> ViewElement)
            if kvp.Key = ViewAttributes.ScrollOrientationAttribKey.KeyValue then 
                currScrollOrientationOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.ScrollOrientation)
            if kvp.Key = ViewAttributes.HorizontalScrollBarVisibilityAttribKey.KeyValue then 
                currHorizontalScrollBarVisibilityOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.ScrollBarVisibility)
            if kvp.Key = ViewAttributes.VerticalScrollBarVisibilityAttribKey.KeyValue then 
                currVerticalScrollBarVisibilityOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.ScrollBarVisibility)
            if kvp.Key = ViewAttributes.ScrollToAttribKey.KeyValue then 
                currScrollToOpt <- ValueSome (kvp.Value :?> float * float * Fabulous.DynamicViews.AnimationKind)
            if kvp.Key = ViewAttributes.ScrolledAttribKey.KeyValue then 
                currScrolledOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.ScrolledEventArgs>)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.ContentAttribKey.KeyValue then 
                    prevContentOpt <- ValueSome (kvp.Value :?> ViewElement)
                if kvp.Key = ViewAttributes.ScrollOrientationAttribKey.KeyValue then 
                    prevScrollOrientationOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.ScrollOrientation)
                if kvp.Key = ViewAttributes.HorizontalScrollBarVisibilityAttribKey.KeyValue then 
                    prevHorizontalScrollBarVisibilityOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.ScrollBarVisibility)
                if kvp.Key = ViewAttributes.VerticalScrollBarVisibilityAttribKey.KeyValue then 
                    prevVerticalScrollBarVisibilityOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.ScrollBarVisibility)
                if kvp.Key = ViewAttributes.ScrollToAttribKey.KeyValue then 
                    prevScrollToOpt <- ValueSome (kvp.Value :?> float * float * Fabulous.DynamicViews.AnimationKind)
                if kvp.Key = ViewAttributes.ScrolledAttribKey.KeyValue then 
                    prevScrolledOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.ScrolledEventArgs>)
        match prevContentOpt, currContentOpt with
        // For structured objects, dependsOn on reference equality
        | ValueSome prevValue, ValueSome newValue when identical prevValue newValue -> ()
        | ValueSome prevValue, ValueSome newValue when canReuseChild prevValue newValue ->
            newValue.UpdateIncremental(prevValue, target.Content)
        | _, ValueSome newValue ->
            target.Content <- (newValue.Create() :?> Xamarin.Forms.View)
        | ValueSome _, ValueNone ->
            target.Content <- null
        | ValueNone, ValueNone -> ()
        match prevScrollOrientationOpt, currScrollOrientationOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Orientation <-  currValue
        | ValueSome _, ValueNone -> target.Orientation <- Unchecked.defaultof<Xamarin.Forms.ScrollOrientation>
        | ValueNone, ValueNone -> ()
        match prevHorizontalScrollBarVisibilityOpt, currHorizontalScrollBarVisibilityOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.HorizontalScrollBarVisibility <-  currValue
        | ValueSome _, ValueNone -> target.HorizontalScrollBarVisibility <- Xamarin.Forms.ScrollBarVisibility.Default
        | ValueNone, ValueNone -> ()
        match prevVerticalScrollBarVisibilityOpt, currVerticalScrollBarVisibilityOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.VerticalScrollBarVisibility <-  currValue
        | ValueSome _, ValueNone -> target.VerticalScrollBarVisibility <- Xamarin.Forms.ScrollBarVisibility.Default
        | ValueNone, ValueNone -> ()
        (fun _ curr target -> triggerScrollToAsync curr target) prevScrollToOpt currScrollToOpt target
        match prevScrolledOpt, currScrolledOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.Scrolled.RemoveHandler(prevValue); target.Scrolled.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.Scrolled.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.Scrolled.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()

    static member inline ConstructScrollView(?content: ViewElement,
                                             ?orientation: Xamarin.Forms.ScrollOrientation,
                                             ?horizontalScrollBarVisibility: Xamarin.Forms.ScrollBarVisibility,
                                             ?verticalScrollBarVisibility: Xamarin.Forms.ScrollBarVisibility,
                                             ?scrollTo: float * float * Fabulous.DynamicViews.AnimationKind,
                                             ?scrolled: Xamarin.Forms.ScrolledEventArgs -> unit,
                                             ?isClippedToBounds: bool,
                                             ?padding: obj,
                                             ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                             ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                             ?margin: obj,
                                             ?gestureRecognizers: ViewElement list,
                                             ?anchorX: double,
                                             ?anchorY: double,
                                             ?backgroundColor: Xamarin.Forms.Color,
                                             ?heightRequest: double,
                                             ?inputTransparent: bool,
                                             ?isEnabled: bool,
                                             ?isVisible: bool,
                                             ?minimumHeightRequest: double,
                                             ?minimumWidthRequest: double,
                                             ?opacity: double,
                                             ?rotation: double,
                                             ?rotationX: double,
                                             ?rotationY: double,
                                             ?scale: double,
                                             ?style: Xamarin.Forms.Style,
                                             ?styleClass: obj,
                                             ?translationX: double,
                                             ?translationY: double,
                                             ?widthRequest: double,
                                             ?resources: (string * obj) list,
                                             ?styles: Xamarin.Forms.Style list,
                                             ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                             ?isTabStop: bool,
                                             ?scaleX: double,
                                             ?scaleY: double,
                                             ?tabIndex: int,
                                             ?childrenReordered: System.EventArgs -> unit,
                                             ?measureInvalidated: System.EventArgs -> unit,
                                             ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                             ?sizeChanged: System.EventArgs -> unit,
                                             ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                             ?classId: string,
                                             ?styleId: string,
                                             ?automationId: string,
                                             ?created: (Xamarin.Forms.ScrollView -> unit),
                                             ?ref: ViewRef<Xamarin.Forms.ScrollView>) = 

        let attribBuilder = ViewBuilders.BuildScrollView(0,
                               ?content=content,
                               ?orientation=orientation,
                               ?horizontalScrollBarVisibility=horizontalScrollBarVisibility,
                               ?verticalScrollBarVisibility=verticalScrollBarVisibility,
                               ?scrollTo=scrollTo,
                               ?scrolled=scrolled,
                               ?isClippedToBounds=isClippedToBounds,
                               ?padding=padding,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.ScrollView> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.ScrollView>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.ScrollView>(ViewBuilders.CreateFuncScrollView, ViewBuilders.UpdateFuncScrollView, attribBuilder)

    /// Builds the attributes for a SearchBar in the view
    static member inline BuildSearchBar(attribCount: int,
                                        ?cancelButtonColor: Xamarin.Forms.Color,
                                        ?fontFamily: string,
                                        ?fontAttributes: Xamarin.Forms.FontAttributes,
                                        ?fontSize: obj,
                                        ?horizontalTextAlignment: Xamarin.Forms.TextAlignment,
                                        ?placeholder: string,
                                        ?placeholderColor: Xamarin.Forms.Color,
                                        ?searchCommand: string -> unit,
                                        ?canExecute: bool,
                                        ?text: string,
                                        ?textColor: Xamarin.Forms.Color,
                                        ?textChanged: Xamarin.Forms.TextChangedEventArgs -> unit,
                                        ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                        ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                        ?margin: obj,
                                        ?gestureRecognizers: ViewElement list,
                                        ?anchorX: double,
                                        ?anchorY: double,
                                        ?backgroundColor: Xamarin.Forms.Color,
                                        ?heightRequest: double,
                                        ?inputTransparent: bool,
                                        ?isEnabled: bool,
                                        ?isVisible: bool,
                                        ?minimumHeightRequest: double,
                                        ?minimumWidthRequest: double,
                                        ?opacity: double,
                                        ?rotation: double,
                                        ?rotationX: double,
                                        ?rotationY: double,
                                        ?scale: double,
                                        ?style: Xamarin.Forms.Style,
                                        ?styleClass: obj,
                                        ?translationX: double,
                                        ?translationY: double,
                                        ?widthRequest: double,
                                        ?resources: (string * obj) list,
                                        ?styles: Xamarin.Forms.Style list,
                                        ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                        ?isTabStop: bool,
                                        ?scaleX: double,
                                        ?scaleY: double,
                                        ?tabIndex: int,
                                        ?childrenReordered: System.EventArgs -> unit,
                                        ?measureInvalidated: System.EventArgs -> unit,
                                        ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                        ?sizeChanged: System.EventArgs -> unit,
                                        ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                        ?classId: string,
                                        ?styleId: string,
                                        ?automationId: string,
                                        ?created: obj -> unit,
                                        ?ref: ViewRef) = 

        let attribCount = match cancelButtonColor with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match fontFamily with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match fontAttributes with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match fontSize with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match horizontalTextAlignment with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match placeholder with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match placeholderColor with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match searchCommand with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match canExecute with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match text with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match textColor with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match textChanged with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildView(attribCount, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match cancelButtonColor with None -> () | Some v -> attribBuilder.Add(ViewAttributes.CancelButtonColorAttribKey, (v)) 
        match fontFamily with None -> () | Some v -> attribBuilder.Add(ViewAttributes.FontFamilyAttribKey, (v)) 
        match fontAttributes with None -> () | Some v -> attribBuilder.Add(ViewAttributes.FontAttributesAttribKey, (v)) 
        match fontSize with None -> () | Some v -> attribBuilder.Add(ViewAttributes.FontSizeAttribKey, makeFontSize(v)) 
        match horizontalTextAlignment with None -> () | Some v -> attribBuilder.Add(ViewAttributes.HorizontalTextAlignmentAttribKey, (v)) 
        match placeholder with None -> () | Some v -> attribBuilder.Add(ViewAttributes.PlaceholderAttribKey, (v)) 
        match placeholderColor with None -> () | Some v -> attribBuilder.Add(ViewAttributes.PlaceholderColorAttribKey, (v)) 
        match searchCommand with None -> () | Some v -> attribBuilder.Add(ViewAttributes.SearchBarCommandAttribKey, (v)) 
        match canExecute with None -> () | Some v -> attribBuilder.Add(ViewAttributes.SearchBarCanExecuteAttribKey, (v)) 
        match text with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TextAttribKey, (v)) 
        match textColor with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TextColorAttribKey, (v)) 
        match textChanged with None -> () | Some v -> attribBuilder.Add(ViewAttributes.SearchBarTextChangedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.TextChangedEventArgs>(fun _sender args -> f args))(v)) 
        attribBuilder

    static member val CreateFuncSearchBar : (unit -> Xamarin.Forms.SearchBar) = (fun () -> ViewBuilders.CreateSearchBar())

    static member CreateSearchBar () : Xamarin.Forms.SearchBar =
        upcast (new Xamarin.Forms.SearchBar())

    static member val UpdateFuncSearchBar =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.SearchBar) -> ViewBuilders.UpdateSearchBar (prevOpt, curr, target)) 

    static member UpdateSearchBar (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.SearchBar) = 
        // update the inherited View element
        let baseElement = (if ViewProto.ProtoView.IsNone then ViewProto.ProtoView <- Some (ViewBuilders.ConstructView())); ViewProto.ProtoView.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevCancelButtonColorOpt = ValueNone
        let mutable currCancelButtonColorOpt = ValueNone
        let mutable prevFontFamilyOpt = ValueNone
        let mutable currFontFamilyOpt = ValueNone
        let mutable prevFontAttributesOpt = ValueNone
        let mutable currFontAttributesOpt = ValueNone
        let mutable prevFontSizeOpt = ValueNone
        let mutable currFontSizeOpt = ValueNone
        let mutable prevHorizontalTextAlignmentOpt = ValueNone
        let mutable currHorizontalTextAlignmentOpt = ValueNone
        let mutable prevPlaceholderOpt = ValueNone
        let mutable currPlaceholderOpt = ValueNone
        let mutable prevPlaceholderColorOpt = ValueNone
        let mutable currPlaceholderColorOpt = ValueNone
        let mutable prevSearchBarCommandOpt = ValueNone
        let mutable currSearchBarCommandOpt = ValueNone
        let mutable prevSearchBarCanExecuteOpt = ValueNone
        let mutable currSearchBarCanExecuteOpt = ValueNone
        let mutable prevTextOpt = ValueNone
        let mutable currTextOpt = ValueNone
        let mutable prevTextColorOpt = ValueNone
        let mutable currTextColorOpt = ValueNone
        let mutable prevSearchBarTextChangedOpt = ValueNone
        let mutable currSearchBarTextChangedOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.CancelButtonColorAttribKey.KeyValue then 
                currCancelButtonColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
            if kvp.Key = ViewAttributes.FontFamilyAttribKey.KeyValue then 
                currFontFamilyOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.FontAttributesAttribKey.KeyValue then 
                currFontAttributesOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.FontAttributes)
            if kvp.Key = ViewAttributes.FontSizeAttribKey.KeyValue then 
                currFontSizeOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.HorizontalTextAlignmentAttribKey.KeyValue then 
                currHorizontalTextAlignmentOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.TextAlignment)
            if kvp.Key = ViewAttributes.PlaceholderAttribKey.KeyValue then 
                currPlaceholderOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.PlaceholderColorAttribKey.KeyValue then 
                currPlaceholderColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
            if kvp.Key = ViewAttributes.SearchBarCommandAttribKey.KeyValue then 
                currSearchBarCommandOpt <- ValueSome (kvp.Value :?> string -> unit)
            if kvp.Key = ViewAttributes.SearchBarCanExecuteAttribKey.KeyValue then 
                currSearchBarCanExecuteOpt <- ValueSome (kvp.Value :?> bool)
            if kvp.Key = ViewAttributes.TextAttribKey.KeyValue then 
                currTextOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.TextColorAttribKey.KeyValue then 
                currTextColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
            if kvp.Key = ViewAttributes.SearchBarTextChangedAttribKey.KeyValue then 
                currSearchBarTextChangedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.TextChangedEventArgs>)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.CancelButtonColorAttribKey.KeyValue then 
                    prevCancelButtonColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
                if kvp.Key = ViewAttributes.FontFamilyAttribKey.KeyValue then 
                    prevFontFamilyOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.FontAttributesAttribKey.KeyValue then 
                    prevFontAttributesOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.FontAttributes)
                if kvp.Key = ViewAttributes.FontSizeAttribKey.KeyValue then 
                    prevFontSizeOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.HorizontalTextAlignmentAttribKey.KeyValue then 
                    prevHorizontalTextAlignmentOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.TextAlignment)
                if kvp.Key = ViewAttributes.PlaceholderAttribKey.KeyValue then 
                    prevPlaceholderOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.PlaceholderColorAttribKey.KeyValue then 
                    prevPlaceholderColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
                if kvp.Key = ViewAttributes.SearchBarCommandAttribKey.KeyValue then 
                    prevSearchBarCommandOpt <- ValueSome (kvp.Value :?> string -> unit)
                if kvp.Key = ViewAttributes.SearchBarCanExecuteAttribKey.KeyValue then 
                    prevSearchBarCanExecuteOpt <- ValueSome (kvp.Value :?> bool)
                if kvp.Key = ViewAttributes.TextAttribKey.KeyValue then 
                    prevTextOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.TextColorAttribKey.KeyValue then 
                    prevTextColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
                if kvp.Key = ViewAttributes.SearchBarTextChangedAttribKey.KeyValue then 
                    prevSearchBarTextChangedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.TextChangedEventArgs>)
        match prevCancelButtonColorOpt, currCancelButtonColorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.CancelButtonColor <-  currValue
        | ValueSome _, ValueNone -> target.CancelButtonColor <- Xamarin.Forms.Color.Default
        | ValueNone, ValueNone -> ()
        match prevFontFamilyOpt, currFontFamilyOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.FontFamily <-  currValue
        | ValueSome _, ValueNone -> target.FontFamily <- null
        | ValueNone, ValueNone -> ()
        match prevFontAttributesOpt, currFontAttributesOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.FontAttributes <-  currValue
        | ValueSome _, ValueNone -> target.FontAttributes <- Xamarin.Forms.FontAttributes.None
        | ValueNone, ValueNone -> ()
        match prevFontSizeOpt, currFontSizeOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.FontSize <-  currValue
        | ValueSome _, ValueNone -> target.FontSize <- -1.0
        | ValueNone, ValueNone -> ()
        match prevHorizontalTextAlignmentOpt, currHorizontalTextAlignmentOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.HorizontalTextAlignment <-  currValue
        | ValueSome _, ValueNone -> target.HorizontalTextAlignment <- Xamarin.Forms.TextAlignment.Start
        | ValueNone, ValueNone -> ()
        match prevPlaceholderOpt, currPlaceholderOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Placeholder <-  currValue
        | ValueSome _, ValueNone -> target.Placeholder <- null
        | ValueNone, ValueNone -> ()
        match prevPlaceholderColorOpt, currPlaceholderColorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.PlaceholderColor <-  currValue
        | ValueSome _, ValueNone -> target.PlaceholderColor <- Xamarin.Forms.Color.Default
        | ValueNone, ValueNone -> ()
        (fun _ _ _ -> ()) prevSearchBarCommandOpt currSearchBarCommandOpt target
        updateCommand prevSearchBarCommandOpt currSearchBarCommandOpt (fun (target: Xamarin.Forms.SearchBar) -> target.Text) (fun (target: Xamarin.Forms.SearchBar) cmd -> target.SearchCommand <- cmd) prevSearchBarCanExecuteOpt currSearchBarCanExecuteOpt target
        match prevTextOpt, currTextOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Text <-  currValue
        | ValueSome _, ValueNone -> target.Text <- null
        | ValueNone, ValueNone -> ()
        match prevTextColorOpt, currTextColorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.TextColor <-  currValue
        | ValueSome _, ValueNone -> target.TextColor <- Xamarin.Forms.Color.Default
        | ValueNone, ValueNone -> ()
        match prevSearchBarTextChangedOpt, currSearchBarTextChangedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.TextChanged.RemoveHandler(prevValue); target.TextChanged.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.TextChanged.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.TextChanged.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()

    static member inline ConstructSearchBar(?cancelButtonColor: Xamarin.Forms.Color,
                                            ?fontFamily: string,
                                            ?fontAttributes: Xamarin.Forms.FontAttributes,
                                            ?fontSize: obj,
                                            ?horizontalTextAlignment: Xamarin.Forms.TextAlignment,
                                            ?placeholder: string,
                                            ?placeholderColor: Xamarin.Forms.Color,
                                            ?searchCommand: string -> unit,
                                            ?canExecute: bool,
                                            ?text: string,
                                            ?textColor: Xamarin.Forms.Color,
                                            ?textChanged: Xamarin.Forms.TextChangedEventArgs -> unit,
                                            ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                            ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                            ?margin: obj,
                                            ?gestureRecognizers: ViewElement list,
                                            ?anchorX: double,
                                            ?anchorY: double,
                                            ?backgroundColor: Xamarin.Forms.Color,
                                            ?heightRequest: double,
                                            ?inputTransparent: bool,
                                            ?isEnabled: bool,
                                            ?isVisible: bool,
                                            ?minimumHeightRequest: double,
                                            ?minimumWidthRequest: double,
                                            ?opacity: double,
                                            ?rotation: double,
                                            ?rotationX: double,
                                            ?rotationY: double,
                                            ?scale: double,
                                            ?style: Xamarin.Forms.Style,
                                            ?styleClass: obj,
                                            ?translationX: double,
                                            ?translationY: double,
                                            ?widthRequest: double,
                                            ?resources: (string * obj) list,
                                            ?styles: Xamarin.Forms.Style list,
                                            ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                            ?isTabStop: bool,
                                            ?scaleX: double,
                                            ?scaleY: double,
                                            ?tabIndex: int,
                                            ?childrenReordered: System.EventArgs -> unit,
                                            ?measureInvalidated: System.EventArgs -> unit,
                                            ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                            ?sizeChanged: System.EventArgs -> unit,
                                            ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                            ?classId: string,
                                            ?styleId: string,
                                            ?automationId: string,
                                            ?created: (Xamarin.Forms.SearchBar -> unit),
                                            ?ref: ViewRef<Xamarin.Forms.SearchBar>) = 

        let attribBuilder = ViewBuilders.BuildSearchBar(0,
                               ?cancelButtonColor=cancelButtonColor,
                               ?fontFamily=fontFamily,
                               ?fontAttributes=fontAttributes,
                               ?fontSize=fontSize,
                               ?horizontalTextAlignment=horizontalTextAlignment,
                               ?placeholder=placeholder,
                               ?placeholderColor=placeholderColor,
                               ?searchCommand=searchCommand,
                               ?canExecute=canExecute,
                               ?text=text,
                               ?textColor=textColor,
                               ?textChanged=textChanged,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.SearchBar> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.SearchBar>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.SearchBar>(ViewBuilders.CreateFuncSearchBar, ViewBuilders.UpdateFuncSearchBar, attribBuilder)

    /// Builds the attributes for a Button in the view
    static member inline BuildButton(attribCount: int,
                                     ?text: string,
                                     ?command: unit -> unit,
                                     ?canExecute: bool,
                                     ?borderColor: Xamarin.Forms.Color,
                                     ?borderWidth: double,
                                     ?commandParameter: System.Object,
                                     ?contentLayout: Xamarin.Forms.Button.ButtonContentLayout,
                                     ?cornerRadius: int,
                                     ?fontFamily: string,
                                     ?fontAttributes: Xamarin.Forms.FontAttributes,
                                     ?fontSize: obj,
                                     ?image: string,
                                     ?textColor: Xamarin.Forms.Color,
                                     ?padding: Xamarin.Forms.Thickness,
                                     ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                     ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                     ?margin: obj,
                                     ?gestureRecognizers: ViewElement list,
                                     ?anchorX: double,
                                     ?anchorY: double,
                                     ?backgroundColor: Xamarin.Forms.Color,
                                     ?heightRequest: double,
                                     ?inputTransparent: bool,
                                     ?isEnabled: bool,
                                     ?isVisible: bool,
                                     ?minimumHeightRequest: double,
                                     ?minimumWidthRequest: double,
                                     ?opacity: double,
                                     ?rotation: double,
                                     ?rotationX: double,
                                     ?rotationY: double,
                                     ?scale: double,
                                     ?style: Xamarin.Forms.Style,
                                     ?styleClass: obj,
                                     ?translationX: double,
                                     ?translationY: double,
                                     ?widthRequest: double,
                                     ?resources: (string * obj) list,
                                     ?styles: Xamarin.Forms.Style list,
                                     ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                     ?isTabStop: bool,
                                     ?scaleX: double,
                                     ?scaleY: double,
                                     ?tabIndex: int,
                                     ?childrenReordered: System.EventArgs -> unit,
                                     ?measureInvalidated: System.EventArgs -> unit,
                                     ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                     ?sizeChanged: System.EventArgs -> unit,
                                     ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                     ?classId: string,
                                     ?styleId: string,
                                     ?automationId: string,
                                     ?created: obj -> unit,
                                     ?ref: ViewRef) = 

        let attribCount = match text with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match command with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match canExecute with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match borderColor with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match borderWidth with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match commandParameter with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match contentLayout with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match cornerRadius with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match fontFamily with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match fontAttributes with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match fontSize with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match image with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match textColor with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match padding with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildView(attribCount, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match text with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TextAttribKey, (v)) 
        match command with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ButtonCommandAttribKey, (v)) 
        match canExecute with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ButtonCanExecuteAttribKey, (v)) 
        match borderColor with None -> () | Some v -> attribBuilder.Add(ViewAttributes.BorderColorAttribKey, (v)) 
        match borderWidth with None -> () | Some v -> attribBuilder.Add(ViewAttributes.BorderWidthAttribKey, (v)) 
        match commandParameter with None -> () | Some v -> attribBuilder.Add(ViewAttributes.CommandParameterAttribKey, (v)) 
        match contentLayout with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ContentLayoutAttribKey, (v)) 
        match cornerRadius with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ButtonCornerRadiusAttribKey, (v)) 
        match fontFamily with None -> () | Some v -> attribBuilder.Add(ViewAttributes.FontFamilyAttribKey, (v)) 
        match fontAttributes with None -> () | Some v -> attribBuilder.Add(ViewAttributes.FontAttributesAttribKey, (v)) 
        match fontSize with None -> () | Some v -> attribBuilder.Add(ViewAttributes.FontSizeAttribKey, makeFontSize(v)) 
        match image with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ButtonImageSourceAttribKey, (v)) 
        match textColor with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TextColorAttribKey, (v)) 
        match padding with None -> () | Some v -> attribBuilder.Add(ViewAttributes.PaddingAttribKey, (v)) 
        attribBuilder

    static member val CreateFuncButton : (unit -> Xamarin.Forms.Button) = (fun () -> ViewBuilders.CreateButton())

    static member CreateButton () : Xamarin.Forms.Button =
        upcast (new Xamarin.Forms.Button())

    static member val UpdateFuncButton =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.Button) -> ViewBuilders.UpdateButton (prevOpt, curr, target)) 

    static member UpdateButton (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.Button) = 
        // update the inherited View element
        let baseElement = (if ViewProto.ProtoView.IsNone then ViewProto.ProtoView <- Some (ViewBuilders.ConstructView())); ViewProto.ProtoView.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevTextOpt = ValueNone
        let mutable currTextOpt = ValueNone
        let mutable prevButtonCommandOpt = ValueNone
        let mutable currButtonCommandOpt = ValueNone
        let mutable prevButtonCanExecuteOpt = ValueNone
        let mutable currButtonCanExecuteOpt = ValueNone
        let mutable prevBorderColorOpt = ValueNone
        let mutable currBorderColorOpt = ValueNone
        let mutable prevBorderWidthOpt = ValueNone
        let mutable currBorderWidthOpt = ValueNone
        let mutable prevCommandParameterOpt = ValueNone
        let mutable currCommandParameterOpt = ValueNone
        let mutable prevContentLayoutOpt = ValueNone
        let mutable currContentLayoutOpt = ValueNone
        let mutable prevButtonCornerRadiusOpt = ValueNone
        let mutable currButtonCornerRadiusOpt = ValueNone
        let mutable prevFontFamilyOpt = ValueNone
        let mutable currFontFamilyOpt = ValueNone
        let mutable prevFontAttributesOpt = ValueNone
        let mutable currFontAttributesOpt = ValueNone
        let mutable prevFontSizeOpt = ValueNone
        let mutable currFontSizeOpt = ValueNone
        let mutable prevButtonImageSourceOpt = ValueNone
        let mutable currButtonImageSourceOpt = ValueNone
        let mutable prevTextColorOpt = ValueNone
        let mutable currTextColorOpt = ValueNone
        let mutable prevPaddingOpt = ValueNone
        let mutable currPaddingOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.TextAttribKey.KeyValue then 
                currTextOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.ButtonCommandAttribKey.KeyValue then 
                currButtonCommandOpt <- ValueSome (kvp.Value :?> unit -> unit)
            if kvp.Key = ViewAttributes.ButtonCanExecuteAttribKey.KeyValue then 
                currButtonCanExecuteOpt <- ValueSome (kvp.Value :?> bool)
            if kvp.Key = ViewAttributes.BorderColorAttribKey.KeyValue then 
                currBorderColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
            if kvp.Key = ViewAttributes.BorderWidthAttribKey.KeyValue then 
                currBorderWidthOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.CommandParameterAttribKey.KeyValue then 
                currCommandParameterOpt <- ValueSome (kvp.Value :?> System.Object)
            if kvp.Key = ViewAttributes.ContentLayoutAttribKey.KeyValue then 
                currContentLayoutOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Button.ButtonContentLayout)
            if kvp.Key = ViewAttributes.ButtonCornerRadiusAttribKey.KeyValue then 
                currButtonCornerRadiusOpt <- ValueSome (kvp.Value :?> int)
            if kvp.Key = ViewAttributes.FontFamilyAttribKey.KeyValue then 
                currFontFamilyOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.FontAttributesAttribKey.KeyValue then 
                currFontAttributesOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.FontAttributes)
            if kvp.Key = ViewAttributes.FontSizeAttribKey.KeyValue then 
                currFontSizeOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.ButtonImageSourceAttribKey.KeyValue then 
                currButtonImageSourceOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.TextColorAttribKey.KeyValue then 
                currTextColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
            if kvp.Key = ViewAttributes.PaddingAttribKey.KeyValue then 
                currPaddingOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Thickness)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.TextAttribKey.KeyValue then 
                    prevTextOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.ButtonCommandAttribKey.KeyValue then 
                    prevButtonCommandOpt <- ValueSome (kvp.Value :?> unit -> unit)
                if kvp.Key = ViewAttributes.ButtonCanExecuteAttribKey.KeyValue then 
                    prevButtonCanExecuteOpt <- ValueSome (kvp.Value :?> bool)
                if kvp.Key = ViewAttributes.BorderColorAttribKey.KeyValue then 
                    prevBorderColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
                if kvp.Key = ViewAttributes.BorderWidthAttribKey.KeyValue then 
                    prevBorderWidthOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.CommandParameterAttribKey.KeyValue then 
                    prevCommandParameterOpt <- ValueSome (kvp.Value :?> System.Object)
                if kvp.Key = ViewAttributes.ContentLayoutAttribKey.KeyValue then 
                    prevContentLayoutOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Button.ButtonContentLayout)
                if kvp.Key = ViewAttributes.ButtonCornerRadiusAttribKey.KeyValue then 
                    prevButtonCornerRadiusOpt <- ValueSome (kvp.Value :?> int)
                if kvp.Key = ViewAttributes.FontFamilyAttribKey.KeyValue then 
                    prevFontFamilyOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.FontAttributesAttribKey.KeyValue then 
                    prevFontAttributesOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.FontAttributes)
                if kvp.Key = ViewAttributes.FontSizeAttribKey.KeyValue then 
                    prevFontSizeOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.ButtonImageSourceAttribKey.KeyValue then 
                    prevButtonImageSourceOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.TextColorAttribKey.KeyValue then 
                    prevTextColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
                if kvp.Key = ViewAttributes.PaddingAttribKey.KeyValue then 
                    prevPaddingOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Thickness)
        match prevTextOpt, currTextOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Text <-  currValue
        | ValueSome _, ValueNone -> target.Text <- null
        | ValueNone, ValueNone -> ()
        (fun _ _ _ -> ()) prevButtonCommandOpt currButtonCommandOpt target
        updateCommand prevButtonCommandOpt currButtonCommandOpt (fun _target -> ()) (fun (target: Xamarin.Forms.Button) cmd -> target.Command <- cmd) prevButtonCanExecuteOpt currButtonCanExecuteOpt target
        match prevBorderColorOpt, currBorderColorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.BorderColor <-  currValue
        | ValueSome _, ValueNone -> target.BorderColor <- Xamarin.Forms.Color.Default
        | ValueNone, ValueNone -> ()
        match prevBorderWidthOpt, currBorderWidthOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.BorderWidth <-  currValue
        | ValueSome _, ValueNone -> target.BorderWidth <- -1.0
        | ValueNone, ValueNone -> ()
        match prevCommandParameterOpt, currCommandParameterOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.CommandParameter <-  currValue
        | ValueSome _, ValueNone -> target.CommandParameter <- null
        | ValueNone, ValueNone -> ()
        match prevContentLayoutOpt, currContentLayoutOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.ContentLayout <-  currValue
        | ValueSome _, ValueNone -> target.ContentLayout <- null
        | ValueNone, ValueNone -> ()
        match prevButtonCornerRadiusOpt, currButtonCornerRadiusOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.CornerRadius <-  currValue
        | ValueSome _, ValueNone -> target.CornerRadius <- 0
        | ValueNone, ValueNone -> ()
        match prevFontFamilyOpt, currFontFamilyOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.FontFamily <-  currValue
        | ValueSome _, ValueNone -> target.FontFamily <- null
        | ValueNone, ValueNone -> ()
        match prevFontAttributesOpt, currFontAttributesOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.FontAttributes <-  currValue
        | ValueSome _, ValueNone -> target.FontAttributes <- Xamarin.Forms.FontAttributes.None
        | ValueNone, ValueNone -> ()
        match prevFontSizeOpt, currFontSizeOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.FontSize <-  currValue
        | ValueSome _, ValueNone -> target.FontSize <- -1.0
        | ValueNone, ValueNone -> ()
        match prevButtonImageSourceOpt, currButtonImageSourceOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Image <- makeFileImageSource currValue
        | ValueSome _, ValueNone -> target.Image <- null
        | ValueNone, ValueNone -> ()
        match prevTextColorOpt, currTextColorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.TextColor <-  currValue
        | ValueSome _, ValueNone -> target.TextColor <- Xamarin.Forms.Color.Default
        | ValueNone, ValueNone -> ()
        match prevPaddingOpt, currPaddingOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Padding <-  currValue
        | ValueSome _, ValueNone -> target.Padding <- Unchecked.defaultof<Xamarin.Forms.Thickness>
        | ValueNone, ValueNone -> ()

    static member inline ConstructButton(?text: string,
                                         ?command: unit -> unit,
                                         ?canExecute: bool,
                                         ?borderColor: Xamarin.Forms.Color,
                                         ?borderWidth: double,
                                         ?commandParameter: System.Object,
                                         ?contentLayout: Xamarin.Forms.Button.ButtonContentLayout,
                                         ?cornerRadius: int,
                                         ?fontFamily: string,
                                         ?fontAttributes: Xamarin.Forms.FontAttributes,
                                         ?fontSize: obj,
                                         ?image: string,
                                         ?textColor: Xamarin.Forms.Color,
                                         ?padding: Xamarin.Forms.Thickness,
                                         ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                         ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                         ?margin: obj,
                                         ?gestureRecognizers: ViewElement list,
                                         ?anchorX: double,
                                         ?anchorY: double,
                                         ?backgroundColor: Xamarin.Forms.Color,
                                         ?heightRequest: double,
                                         ?inputTransparent: bool,
                                         ?isEnabled: bool,
                                         ?isVisible: bool,
                                         ?minimumHeightRequest: double,
                                         ?minimumWidthRequest: double,
                                         ?opacity: double,
                                         ?rotation: double,
                                         ?rotationX: double,
                                         ?rotationY: double,
                                         ?scale: double,
                                         ?style: Xamarin.Forms.Style,
                                         ?styleClass: obj,
                                         ?translationX: double,
                                         ?translationY: double,
                                         ?widthRequest: double,
                                         ?resources: (string * obj) list,
                                         ?styles: Xamarin.Forms.Style list,
                                         ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                         ?isTabStop: bool,
                                         ?scaleX: double,
                                         ?scaleY: double,
                                         ?tabIndex: int,
                                         ?childrenReordered: System.EventArgs -> unit,
                                         ?measureInvalidated: System.EventArgs -> unit,
                                         ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                         ?sizeChanged: System.EventArgs -> unit,
                                         ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                         ?classId: string,
                                         ?styleId: string,
                                         ?automationId: string,
                                         ?created: (Xamarin.Forms.Button -> unit),
                                         ?ref: ViewRef<Xamarin.Forms.Button>) = 

        let attribBuilder = ViewBuilders.BuildButton(0,
                               ?text=text,
                               ?command=command,
                               ?canExecute=canExecute,
                               ?borderColor=borderColor,
                               ?borderWidth=borderWidth,
                               ?commandParameter=commandParameter,
                               ?contentLayout=contentLayout,
                               ?cornerRadius=cornerRadius,
                               ?fontFamily=fontFamily,
                               ?fontAttributes=fontAttributes,
                               ?fontSize=fontSize,
                               ?image=image,
                               ?textColor=textColor,
                               ?padding=padding,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.Button> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.Button>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.Button>(ViewBuilders.CreateFuncButton, ViewBuilders.UpdateFuncButton, attribBuilder)

    /// Builds the attributes for a Slider in the view
    static member inline BuildSlider(attribCount: int,
                                     ?minimumMaximum: float * float,
                                     ?value: double,
                                     ?valueChanged: Xamarin.Forms.ValueChangedEventArgs -> unit,
                                     ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                     ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                     ?margin: obj,
                                     ?gestureRecognizers: ViewElement list,
                                     ?anchorX: double,
                                     ?anchorY: double,
                                     ?backgroundColor: Xamarin.Forms.Color,
                                     ?heightRequest: double,
                                     ?inputTransparent: bool,
                                     ?isEnabled: bool,
                                     ?isVisible: bool,
                                     ?minimumHeightRequest: double,
                                     ?minimumWidthRequest: double,
                                     ?opacity: double,
                                     ?rotation: double,
                                     ?rotationX: double,
                                     ?rotationY: double,
                                     ?scale: double,
                                     ?style: Xamarin.Forms.Style,
                                     ?styleClass: obj,
                                     ?translationX: double,
                                     ?translationY: double,
                                     ?widthRequest: double,
                                     ?resources: (string * obj) list,
                                     ?styles: Xamarin.Forms.Style list,
                                     ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                     ?isTabStop: bool,
                                     ?scaleX: double,
                                     ?scaleY: double,
                                     ?tabIndex: int,
                                     ?childrenReordered: System.EventArgs -> unit,
                                     ?measureInvalidated: System.EventArgs -> unit,
                                     ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                     ?sizeChanged: System.EventArgs -> unit,
                                     ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                     ?classId: string,
                                     ?styleId: string,
                                     ?automationId: string,
                                     ?created: obj -> unit,
                                     ?ref: ViewRef) = 

        let attribCount = match minimumMaximum with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match value with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match valueChanged with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildView(attribCount, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match minimumMaximum with None -> () | Some v -> attribBuilder.Add(ViewAttributes.MinimumMaximumAttribKey, (v)) 
        match value with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ValueAttribKey, (v)) 
        match valueChanged with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ValueChangedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.ValueChangedEventArgs>(fun _sender args -> f args))(v)) 
        attribBuilder

    static member val CreateFuncSlider : (unit -> Xamarin.Forms.Slider) = (fun () -> ViewBuilders.CreateSlider())

    static member CreateSlider () : Xamarin.Forms.Slider =
        upcast (new Xamarin.Forms.Slider())

    static member val UpdateFuncSlider =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.Slider) -> ViewBuilders.UpdateSlider (prevOpt, curr, target)) 

    static member UpdateSlider (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.Slider) = 
        // update the inherited View element
        let baseElement = (if ViewProto.ProtoView.IsNone then ViewProto.ProtoView <- Some (ViewBuilders.ConstructView())); ViewProto.ProtoView.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevMinimumMaximumOpt = ValueNone
        let mutable currMinimumMaximumOpt = ValueNone
        let mutable prevValueOpt = ValueNone
        let mutable currValueOpt = ValueNone
        let mutable prevValueChangedOpt = ValueNone
        let mutable currValueChangedOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.MinimumMaximumAttribKey.KeyValue then 
                currMinimumMaximumOpt <- ValueSome (kvp.Value :?> float * float)
            if kvp.Key = ViewAttributes.ValueAttribKey.KeyValue then 
                currValueOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.ValueChangedAttribKey.KeyValue then 
                currValueChangedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.ValueChangedEventArgs>)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.MinimumMaximumAttribKey.KeyValue then 
                    prevMinimumMaximumOpt <- ValueSome (kvp.Value :?> float * float)
                if kvp.Key = ViewAttributes.ValueAttribKey.KeyValue then 
                    prevValueOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.ValueChangedAttribKey.KeyValue then 
                    prevValueChangedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.ValueChangedEventArgs>)
        updateSliderMinimumMaximum prevMinimumMaximumOpt currMinimumMaximumOpt target
        match prevValueOpt, currValueOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Value <-  currValue
        | ValueSome _, ValueNone -> target.Value <- 0.0
        | ValueNone, ValueNone -> ()
        match prevValueChangedOpt, currValueChangedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.ValueChanged.RemoveHandler(prevValue); target.ValueChanged.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.ValueChanged.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.ValueChanged.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()

    static member inline ConstructSlider(?minimumMaximum: float * float,
                                         ?value: double,
                                         ?valueChanged: Xamarin.Forms.ValueChangedEventArgs -> unit,
                                         ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                         ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                         ?margin: obj,
                                         ?gestureRecognizers: ViewElement list,
                                         ?anchorX: double,
                                         ?anchorY: double,
                                         ?backgroundColor: Xamarin.Forms.Color,
                                         ?heightRequest: double,
                                         ?inputTransparent: bool,
                                         ?isEnabled: bool,
                                         ?isVisible: bool,
                                         ?minimumHeightRequest: double,
                                         ?minimumWidthRequest: double,
                                         ?opacity: double,
                                         ?rotation: double,
                                         ?rotationX: double,
                                         ?rotationY: double,
                                         ?scale: double,
                                         ?style: Xamarin.Forms.Style,
                                         ?styleClass: obj,
                                         ?translationX: double,
                                         ?translationY: double,
                                         ?widthRequest: double,
                                         ?resources: (string * obj) list,
                                         ?styles: Xamarin.Forms.Style list,
                                         ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                         ?isTabStop: bool,
                                         ?scaleX: double,
                                         ?scaleY: double,
                                         ?tabIndex: int,
                                         ?childrenReordered: System.EventArgs -> unit,
                                         ?measureInvalidated: System.EventArgs -> unit,
                                         ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                         ?sizeChanged: System.EventArgs -> unit,
                                         ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                         ?classId: string,
                                         ?styleId: string,
                                         ?automationId: string,
                                         ?created: (Xamarin.Forms.Slider -> unit),
                                         ?ref: ViewRef<Xamarin.Forms.Slider>) = 

        let attribBuilder = ViewBuilders.BuildSlider(0,
                               ?minimumMaximum=minimumMaximum,
                               ?value=value,
                               ?valueChanged=valueChanged,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.Slider> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.Slider>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.Slider>(ViewBuilders.CreateFuncSlider, ViewBuilders.UpdateFuncSlider, attribBuilder)

    /// Builds the attributes for a Stepper in the view
    static member inline BuildStepper(attribCount: int,
                                      ?minimumMaximum: float * float,
                                      ?value: double,
                                      ?increment: double,
                                      ?valueChanged: Xamarin.Forms.ValueChangedEventArgs -> unit,
                                      ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                      ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                      ?margin: obj,
                                      ?gestureRecognizers: ViewElement list,
                                      ?anchorX: double,
                                      ?anchorY: double,
                                      ?backgroundColor: Xamarin.Forms.Color,
                                      ?heightRequest: double,
                                      ?inputTransparent: bool,
                                      ?isEnabled: bool,
                                      ?isVisible: bool,
                                      ?minimumHeightRequest: double,
                                      ?minimumWidthRequest: double,
                                      ?opacity: double,
                                      ?rotation: double,
                                      ?rotationX: double,
                                      ?rotationY: double,
                                      ?scale: double,
                                      ?style: Xamarin.Forms.Style,
                                      ?styleClass: obj,
                                      ?translationX: double,
                                      ?translationY: double,
                                      ?widthRequest: double,
                                      ?resources: (string * obj) list,
                                      ?styles: Xamarin.Forms.Style list,
                                      ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                      ?isTabStop: bool,
                                      ?scaleX: double,
                                      ?scaleY: double,
                                      ?tabIndex: int,
                                      ?childrenReordered: System.EventArgs -> unit,
                                      ?measureInvalidated: System.EventArgs -> unit,
                                      ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                      ?sizeChanged: System.EventArgs -> unit,
                                      ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                      ?classId: string,
                                      ?styleId: string,
                                      ?automationId: string,
                                      ?created: obj -> unit,
                                      ?ref: ViewRef) = 

        let attribCount = match minimumMaximum with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match value with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match increment with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match valueChanged with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildView(attribCount, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match minimumMaximum with None -> () | Some v -> attribBuilder.Add(ViewAttributes.MinimumMaximumAttribKey, (v)) 
        match value with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ValueAttribKey, (v)) 
        match increment with None -> () | Some v -> attribBuilder.Add(ViewAttributes.IncrementAttribKey, (v)) 
        match valueChanged with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ValueChangedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.ValueChangedEventArgs>(fun _sender args -> f args))(v)) 
        attribBuilder

    static member val CreateFuncStepper : (unit -> Xamarin.Forms.Stepper) = (fun () -> ViewBuilders.CreateStepper())

    static member CreateStepper () : Xamarin.Forms.Stepper =
        upcast (new Xamarin.Forms.Stepper())

    static member val UpdateFuncStepper =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.Stepper) -> ViewBuilders.UpdateStepper (prevOpt, curr, target)) 

    static member UpdateStepper (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.Stepper) = 
        // update the inherited View element
        let baseElement = (if ViewProto.ProtoView.IsNone then ViewProto.ProtoView <- Some (ViewBuilders.ConstructView())); ViewProto.ProtoView.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevMinimumMaximumOpt = ValueNone
        let mutable currMinimumMaximumOpt = ValueNone
        let mutable prevValueOpt = ValueNone
        let mutable currValueOpt = ValueNone
        let mutable prevIncrementOpt = ValueNone
        let mutable currIncrementOpt = ValueNone
        let mutable prevValueChangedOpt = ValueNone
        let mutable currValueChangedOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.MinimumMaximumAttribKey.KeyValue then 
                currMinimumMaximumOpt <- ValueSome (kvp.Value :?> float * float)
            if kvp.Key = ViewAttributes.ValueAttribKey.KeyValue then 
                currValueOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.IncrementAttribKey.KeyValue then 
                currIncrementOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.ValueChangedAttribKey.KeyValue then 
                currValueChangedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.ValueChangedEventArgs>)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.MinimumMaximumAttribKey.KeyValue then 
                    prevMinimumMaximumOpt <- ValueSome (kvp.Value :?> float * float)
                if kvp.Key = ViewAttributes.ValueAttribKey.KeyValue then 
                    prevValueOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.IncrementAttribKey.KeyValue then 
                    prevIncrementOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.ValueChangedAttribKey.KeyValue then 
                    prevValueChangedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.ValueChangedEventArgs>)
        updateStepperMinimumMaximum prevMinimumMaximumOpt currMinimumMaximumOpt target
        match prevValueOpt, currValueOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Value <-  currValue
        | ValueSome _, ValueNone -> target.Value <- 0.0
        | ValueNone, ValueNone -> ()
        match prevIncrementOpt, currIncrementOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Increment <-  currValue
        | ValueSome _, ValueNone -> target.Increment <- 1.0
        | ValueNone, ValueNone -> ()
        match prevValueChangedOpt, currValueChangedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.ValueChanged.RemoveHandler(prevValue); target.ValueChanged.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.ValueChanged.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.ValueChanged.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()

    static member inline ConstructStepper(?minimumMaximum: float * float,
                                          ?value: double,
                                          ?increment: double,
                                          ?valueChanged: Xamarin.Forms.ValueChangedEventArgs -> unit,
                                          ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                          ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                          ?margin: obj,
                                          ?gestureRecognizers: ViewElement list,
                                          ?anchorX: double,
                                          ?anchorY: double,
                                          ?backgroundColor: Xamarin.Forms.Color,
                                          ?heightRequest: double,
                                          ?inputTransparent: bool,
                                          ?isEnabled: bool,
                                          ?isVisible: bool,
                                          ?minimumHeightRequest: double,
                                          ?minimumWidthRequest: double,
                                          ?opacity: double,
                                          ?rotation: double,
                                          ?rotationX: double,
                                          ?rotationY: double,
                                          ?scale: double,
                                          ?style: Xamarin.Forms.Style,
                                          ?styleClass: obj,
                                          ?translationX: double,
                                          ?translationY: double,
                                          ?widthRequest: double,
                                          ?resources: (string * obj) list,
                                          ?styles: Xamarin.Forms.Style list,
                                          ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                          ?isTabStop: bool,
                                          ?scaleX: double,
                                          ?scaleY: double,
                                          ?tabIndex: int,
                                          ?childrenReordered: System.EventArgs -> unit,
                                          ?measureInvalidated: System.EventArgs -> unit,
                                          ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                          ?sizeChanged: System.EventArgs -> unit,
                                          ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                          ?classId: string,
                                          ?styleId: string,
                                          ?automationId: string,
                                          ?created: (Xamarin.Forms.Stepper -> unit),
                                          ?ref: ViewRef<Xamarin.Forms.Stepper>) = 

        let attribBuilder = ViewBuilders.BuildStepper(0,
                               ?minimumMaximum=minimumMaximum,
                               ?value=value,
                               ?increment=increment,
                               ?valueChanged=valueChanged,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.Stepper> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.Stepper>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.Stepper>(ViewBuilders.CreateFuncStepper, ViewBuilders.UpdateFuncStepper, attribBuilder)

    /// Builds the attributes for a Switch in the view
    static member inline BuildSwitch(attribCount: int,
                                     ?isToggled: bool,
                                     ?toggled: Xamarin.Forms.ToggledEventArgs -> unit,
                                     ?onColor: Xamarin.Forms.Color,
                                     ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                     ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                     ?margin: obj,
                                     ?gestureRecognizers: ViewElement list,
                                     ?anchorX: double,
                                     ?anchorY: double,
                                     ?backgroundColor: Xamarin.Forms.Color,
                                     ?heightRequest: double,
                                     ?inputTransparent: bool,
                                     ?isEnabled: bool,
                                     ?isVisible: bool,
                                     ?minimumHeightRequest: double,
                                     ?minimumWidthRequest: double,
                                     ?opacity: double,
                                     ?rotation: double,
                                     ?rotationX: double,
                                     ?rotationY: double,
                                     ?scale: double,
                                     ?style: Xamarin.Forms.Style,
                                     ?styleClass: obj,
                                     ?translationX: double,
                                     ?translationY: double,
                                     ?widthRequest: double,
                                     ?resources: (string * obj) list,
                                     ?styles: Xamarin.Forms.Style list,
                                     ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                     ?isTabStop: bool,
                                     ?scaleX: double,
                                     ?scaleY: double,
                                     ?tabIndex: int,
                                     ?childrenReordered: System.EventArgs -> unit,
                                     ?measureInvalidated: System.EventArgs -> unit,
                                     ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                     ?sizeChanged: System.EventArgs -> unit,
                                     ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                     ?classId: string,
                                     ?styleId: string,
                                     ?automationId: string,
                                     ?created: obj -> unit,
                                     ?ref: ViewRef) = 

        let attribCount = match isToggled with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match toggled with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match onColor with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildView(attribCount, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match isToggled with None -> () | Some v -> attribBuilder.Add(ViewAttributes.IsToggledAttribKey, (v)) 
        match toggled with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ToggledAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.ToggledEventArgs>(fun _sender args -> f args))(v)) 
        match onColor with None -> () | Some v -> attribBuilder.Add(ViewAttributes.OnColorAttribKey, (v)) 
        attribBuilder

    static member val CreateFuncSwitch : (unit -> Xamarin.Forms.Switch) = (fun () -> ViewBuilders.CreateSwitch())

    static member CreateSwitch () : Xamarin.Forms.Switch =
        upcast (new Xamarin.Forms.Switch())

    static member val UpdateFuncSwitch =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.Switch) -> ViewBuilders.UpdateSwitch (prevOpt, curr, target)) 

    static member UpdateSwitch (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.Switch) = 
        // update the inherited View element
        let baseElement = (if ViewProto.ProtoView.IsNone then ViewProto.ProtoView <- Some (ViewBuilders.ConstructView())); ViewProto.ProtoView.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevIsToggledOpt = ValueNone
        let mutable currIsToggledOpt = ValueNone
        let mutable prevToggledOpt = ValueNone
        let mutable currToggledOpt = ValueNone
        let mutable prevOnColorOpt = ValueNone
        let mutable currOnColorOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.IsToggledAttribKey.KeyValue then 
                currIsToggledOpt <- ValueSome (kvp.Value :?> bool)
            if kvp.Key = ViewAttributes.ToggledAttribKey.KeyValue then 
                currToggledOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.ToggledEventArgs>)
            if kvp.Key = ViewAttributes.OnColorAttribKey.KeyValue then 
                currOnColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.IsToggledAttribKey.KeyValue then 
                    prevIsToggledOpt <- ValueSome (kvp.Value :?> bool)
                if kvp.Key = ViewAttributes.ToggledAttribKey.KeyValue then 
                    prevToggledOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.ToggledEventArgs>)
                if kvp.Key = ViewAttributes.OnColorAttribKey.KeyValue then 
                    prevOnColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
        match prevIsToggledOpt, currIsToggledOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.IsToggled <-  currValue
        | ValueSome _, ValueNone -> target.IsToggled <- false
        | ValueNone, ValueNone -> ()
        match prevToggledOpt, currToggledOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.Toggled.RemoveHandler(prevValue); target.Toggled.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.Toggled.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.Toggled.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevOnColorOpt, currOnColorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.OnColor <-  currValue
        | ValueSome _, ValueNone -> target.OnColor <- Xamarin.Forms.Color.Default
        | ValueNone, ValueNone -> ()

    static member inline ConstructSwitch(?isToggled: bool,
                                         ?toggled: Xamarin.Forms.ToggledEventArgs -> unit,
                                         ?onColor: Xamarin.Forms.Color,
                                         ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                         ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                         ?margin: obj,
                                         ?gestureRecognizers: ViewElement list,
                                         ?anchorX: double,
                                         ?anchorY: double,
                                         ?backgroundColor: Xamarin.Forms.Color,
                                         ?heightRequest: double,
                                         ?inputTransparent: bool,
                                         ?isEnabled: bool,
                                         ?isVisible: bool,
                                         ?minimumHeightRequest: double,
                                         ?minimumWidthRequest: double,
                                         ?opacity: double,
                                         ?rotation: double,
                                         ?rotationX: double,
                                         ?rotationY: double,
                                         ?scale: double,
                                         ?style: Xamarin.Forms.Style,
                                         ?styleClass: obj,
                                         ?translationX: double,
                                         ?translationY: double,
                                         ?widthRequest: double,
                                         ?resources: (string * obj) list,
                                         ?styles: Xamarin.Forms.Style list,
                                         ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                         ?isTabStop: bool,
                                         ?scaleX: double,
                                         ?scaleY: double,
                                         ?tabIndex: int,
                                         ?childrenReordered: System.EventArgs -> unit,
                                         ?measureInvalidated: System.EventArgs -> unit,
                                         ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                         ?sizeChanged: System.EventArgs -> unit,
                                         ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                         ?classId: string,
                                         ?styleId: string,
                                         ?automationId: string,
                                         ?created: (Xamarin.Forms.Switch -> unit),
                                         ?ref: ViewRef<Xamarin.Forms.Switch>) = 

        let attribBuilder = ViewBuilders.BuildSwitch(0,
                               ?isToggled=isToggled,
                               ?toggled=toggled,
                               ?onColor=onColor,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.Switch> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.Switch>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.Switch>(ViewBuilders.CreateFuncSwitch, ViewBuilders.UpdateFuncSwitch, attribBuilder)

    /// Builds the attributes for a Cell in the view
    static member inline BuildCell(attribCount: int,
                                   ?height: double,
                                   ?isEnabled: bool,
                                   ?classId: string,
                                   ?styleId: string,
                                   ?automationId: string,
                                   ?created: obj -> unit,
                                   ?ref: ViewRef) = 

        let attribCount = match height with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match isEnabled with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildElement(attribCount, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match height with None -> () | Some v -> attribBuilder.Add(ViewAttributes.HeightAttribKey, (v)) 
        match isEnabled with None -> () | Some v -> attribBuilder.Add(ViewAttributes.IsEnabledAttribKey, (v)) 
        attribBuilder

    static member val CreateFuncCell : (unit -> Xamarin.Forms.Cell) = (fun () -> ViewBuilders.CreateCell())

    static member CreateCell () : Xamarin.Forms.Cell =
        failwith "can't create Xamarin.Forms.Cell"

    static member val UpdateFuncCell =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.Cell) -> ViewBuilders.UpdateCell (prevOpt, curr, target)) 

    static member UpdateCell (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.Cell) = 
        // update the inherited Element element
        let baseElement = (if ViewProto.ProtoElement.IsNone then ViewProto.ProtoElement <- Some (ViewBuilders.ConstructElement())); ViewProto.ProtoElement.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevHeightOpt = ValueNone
        let mutable currHeightOpt = ValueNone
        let mutable prevIsEnabledOpt = ValueNone
        let mutable currIsEnabledOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.HeightAttribKey.KeyValue then 
                currHeightOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.IsEnabledAttribKey.KeyValue then 
                currIsEnabledOpt <- ValueSome (kvp.Value :?> bool)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.HeightAttribKey.KeyValue then 
                    prevHeightOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.IsEnabledAttribKey.KeyValue then 
                    prevIsEnabledOpt <- ValueSome (kvp.Value :?> bool)
        match prevHeightOpt, currHeightOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Height <-  currValue
        | ValueSome _, ValueNone -> target.Height <- -1.0
        | ValueNone, ValueNone -> ()
        match prevIsEnabledOpt, currIsEnabledOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.IsEnabled <-  currValue
        | ValueSome _, ValueNone -> target.IsEnabled <- true
        | ValueNone, ValueNone -> ()

    static member inline ConstructCell(?height: double,
                                       ?isEnabled: bool,
                                       ?classId: string,
                                       ?styleId: string,
                                       ?automationId: string,
                                       ?created: (Xamarin.Forms.Cell -> unit),
                                       ?ref: ViewRef<Xamarin.Forms.Cell>) = 

        let attribBuilder = ViewBuilders.BuildCell(0,
                               ?height=height,
                               ?isEnabled=isEnabled,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.Cell> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.Cell>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.Cell>(ViewBuilders.CreateFuncCell, ViewBuilders.UpdateFuncCell, attribBuilder)

    /// Builds the attributes for a SwitchCell in the view
    static member inline BuildSwitchCell(attribCount: int,
                                         ?on: bool,
                                         ?text: string,
                                         ?onChanged: Xamarin.Forms.ToggledEventArgs -> unit,
                                         ?height: double,
                                         ?isEnabled: bool,
                                         ?classId: string,
                                         ?styleId: string,
                                         ?automationId: string,
                                         ?created: obj -> unit,
                                         ?ref: ViewRef) = 

        let attribCount = match on with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match text with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match onChanged with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildCell(attribCount, ?height=height, ?isEnabled=isEnabled, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match on with None -> () | Some v -> attribBuilder.Add(ViewAttributes.OnAttribKey, (v)) 
        match text with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TextAttribKey, (v)) 
        match onChanged with None -> () | Some v -> attribBuilder.Add(ViewAttributes.OnChangedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.ToggledEventArgs>(fun _sender args -> f args))(v)) 
        attribBuilder

    static member val CreateFuncSwitchCell : (unit -> Xamarin.Forms.SwitchCell) = (fun () -> ViewBuilders.CreateSwitchCell())

    static member CreateSwitchCell () : Xamarin.Forms.SwitchCell =
        upcast (new Xamarin.Forms.SwitchCell())

    static member val UpdateFuncSwitchCell =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.SwitchCell) -> ViewBuilders.UpdateSwitchCell (prevOpt, curr, target)) 

    static member UpdateSwitchCell (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.SwitchCell) = 
        // update the inherited Cell element
        let baseElement = (if ViewProto.ProtoCell.IsNone then ViewProto.ProtoCell <- Some (ViewBuilders.ConstructCell())); ViewProto.ProtoCell.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevOnOpt = ValueNone
        let mutable currOnOpt = ValueNone
        let mutable prevTextOpt = ValueNone
        let mutable currTextOpt = ValueNone
        let mutable prevOnChangedOpt = ValueNone
        let mutable currOnChangedOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.OnAttribKey.KeyValue then 
                currOnOpt <- ValueSome (kvp.Value :?> bool)
            if kvp.Key = ViewAttributes.TextAttribKey.KeyValue then 
                currTextOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.OnChangedAttribKey.KeyValue then 
                currOnChangedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.ToggledEventArgs>)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.OnAttribKey.KeyValue then 
                    prevOnOpt <- ValueSome (kvp.Value :?> bool)
                if kvp.Key = ViewAttributes.TextAttribKey.KeyValue then 
                    prevTextOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.OnChangedAttribKey.KeyValue then 
                    prevOnChangedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.ToggledEventArgs>)
        match prevOnOpt, currOnOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.On <-  currValue
        | ValueSome _, ValueNone -> target.On <- false
        | ValueNone, ValueNone -> ()
        match prevTextOpt, currTextOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Text <-  currValue
        | ValueSome _, ValueNone -> target.Text <- null
        | ValueNone, ValueNone -> ()
        match prevOnChangedOpt, currOnChangedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.OnChanged.RemoveHandler(prevValue); target.OnChanged.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.OnChanged.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.OnChanged.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()

    static member inline ConstructSwitchCell(?on: bool,
                                             ?text: string,
                                             ?onChanged: Xamarin.Forms.ToggledEventArgs -> unit,
                                             ?height: double,
                                             ?isEnabled: bool,
                                             ?classId: string,
                                             ?styleId: string,
                                             ?automationId: string,
                                             ?created: (Xamarin.Forms.SwitchCell -> unit),
                                             ?ref: ViewRef<Xamarin.Forms.SwitchCell>) = 

        let attribBuilder = ViewBuilders.BuildSwitchCell(0,
                               ?on=on,
                               ?text=text,
                               ?onChanged=onChanged,
                               ?height=height,
                               ?isEnabled=isEnabled,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.SwitchCell> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.SwitchCell>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.SwitchCell>(ViewBuilders.CreateFuncSwitchCell, ViewBuilders.UpdateFuncSwitchCell, attribBuilder)

    /// Builds the attributes for a TableView in the view
    static member inline BuildTableView(attribCount: int,
                                        ?intent: Xamarin.Forms.TableIntent,
                                        ?hasUnevenRows: bool,
                                        ?rowHeight: int,
                                        ?items: (string * ViewElement list) list,
                                        ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                        ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                        ?margin: obj,
                                        ?gestureRecognizers: ViewElement list,
                                        ?anchorX: double,
                                        ?anchorY: double,
                                        ?backgroundColor: Xamarin.Forms.Color,
                                        ?heightRequest: double,
                                        ?inputTransparent: bool,
                                        ?isEnabled: bool,
                                        ?isVisible: bool,
                                        ?minimumHeightRequest: double,
                                        ?minimumWidthRequest: double,
                                        ?opacity: double,
                                        ?rotation: double,
                                        ?rotationX: double,
                                        ?rotationY: double,
                                        ?scale: double,
                                        ?style: Xamarin.Forms.Style,
                                        ?styleClass: obj,
                                        ?translationX: double,
                                        ?translationY: double,
                                        ?widthRequest: double,
                                        ?resources: (string * obj) list,
                                        ?styles: Xamarin.Forms.Style list,
                                        ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                        ?isTabStop: bool,
                                        ?scaleX: double,
                                        ?scaleY: double,
                                        ?tabIndex: int,
                                        ?childrenReordered: System.EventArgs -> unit,
                                        ?measureInvalidated: System.EventArgs -> unit,
                                        ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                        ?sizeChanged: System.EventArgs -> unit,
                                        ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                        ?classId: string,
                                        ?styleId: string,
                                        ?automationId: string,
                                        ?created: obj -> unit,
                                        ?ref: ViewRef) = 

        let attribCount = match intent with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match hasUnevenRows with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match rowHeight with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match items with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildView(attribCount, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match intent with None -> () | Some v -> attribBuilder.Add(ViewAttributes.IntentAttribKey, (v)) 
        match hasUnevenRows with None -> () | Some v -> attribBuilder.Add(ViewAttributes.HasUnevenRowsAttribKey, (v)) 
        match rowHeight with None -> () | Some v -> attribBuilder.Add(ViewAttributes.RowHeightAttribKey, (v)) 
        match items with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TableRootAttribKey, (fun es -> es |> Array.ofList |> Array.map (fun (title, es) -> (title, Array.ofList es)))(v)) 
        attribBuilder

    static member val CreateFuncTableView : (unit -> Xamarin.Forms.TableView) = (fun () -> ViewBuilders.CreateTableView())

    static member CreateTableView () : Xamarin.Forms.TableView =
        upcast (new Xamarin.Forms.TableView())

    static member val UpdateFuncTableView =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.TableView) -> ViewBuilders.UpdateTableView (prevOpt, curr, target)) 

    static member UpdateTableView (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.TableView) = 
        // update the inherited View element
        let baseElement = (if ViewProto.ProtoView.IsNone then ViewProto.ProtoView <- Some (ViewBuilders.ConstructView())); ViewProto.ProtoView.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevIntentOpt = ValueNone
        let mutable currIntentOpt = ValueNone
        let mutable prevHasUnevenRowsOpt = ValueNone
        let mutable currHasUnevenRowsOpt = ValueNone
        let mutable prevRowHeightOpt = ValueNone
        let mutable currRowHeightOpt = ValueNone
        let mutable prevTableRootOpt = ValueNone
        let mutable currTableRootOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.IntentAttribKey.KeyValue then 
                currIntentOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.TableIntent)
            if kvp.Key = ViewAttributes.HasUnevenRowsAttribKey.KeyValue then 
                currHasUnevenRowsOpt <- ValueSome (kvp.Value :?> bool)
            if kvp.Key = ViewAttributes.RowHeightAttribKey.KeyValue then 
                currRowHeightOpt <- ValueSome (kvp.Value :?> int)
            if kvp.Key = ViewAttributes.TableRootAttribKey.KeyValue then 
                currTableRootOpt <- ValueSome (kvp.Value :?> (string * ViewElement[])[])
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.IntentAttribKey.KeyValue then 
                    prevIntentOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.TableIntent)
                if kvp.Key = ViewAttributes.HasUnevenRowsAttribKey.KeyValue then 
                    prevHasUnevenRowsOpt <- ValueSome (kvp.Value :?> bool)
                if kvp.Key = ViewAttributes.RowHeightAttribKey.KeyValue then 
                    prevRowHeightOpt <- ValueSome (kvp.Value :?> int)
                if kvp.Key = ViewAttributes.TableRootAttribKey.KeyValue then 
                    prevTableRootOpt <- ValueSome (kvp.Value :?> (string * ViewElement[])[])
        match prevIntentOpt, currIntentOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Intent <-  currValue
        | ValueSome _, ValueNone -> target.Intent <- Unchecked.defaultof<Xamarin.Forms.TableIntent>
        | ValueNone, ValueNone -> ()
        match prevHasUnevenRowsOpt, currHasUnevenRowsOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.HasUnevenRows <-  currValue
        | ValueSome _, ValueNone -> target.HasUnevenRows <- false
        | ValueNone, ValueNone -> ()
        match prevRowHeightOpt, currRowHeightOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.RowHeight <-  currValue
        | ValueSome _, ValueNone -> target.RowHeight <- -1
        | ValueNone, ValueNone -> ()
        updateTableViewItems prevTableRootOpt currTableRootOpt target

    static member inline ConstructTableView(?intent: Xamarin.Forms.TableIntent,
                                            ?hasUnevenRows: bool,
                                            ?rowHeight: int,
                                            ?items: (string * ViewElement list) list,
                                            ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                            ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                            ?margin: obj,
                                            ?gestureRecognizers: ViewElement list,
                                            ?anchorX: double,
                                            ?anchorY: double,
                                            ?backgroundColor: Xamarin.Forms.Color,
                                            ?heightRequest: double,
                                            ?inputTransparent: bool,
                                            ?isEnabled: bool,
                                            ?isVisible: bool,
                                            ?minimumHeightRequest: double,
                                            ?minimumWidthRequest: double,
                                            ?opacity: double,
                                            ?rotation: double,
                                            ?rotationX: double,
                                            ?rotationY: double,
                                            ?scale: double,
                                            ?style: Xamarin.Forms.Style,
                                            ?styleClass: obj,
                                            ?translationX: double,
                                            ?translationY: double,
                                            ?widthRequest: double,
                                            ?resources: (string * obj) list,
                                            ?styles: Xamarin.Forms.Style list,
                                            ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                            ?isTabStop: bool,
                                            ?scaleX: double,
                                            ?scaleY: double,
                                            ?tabIndex: int,
                                            ?childrenReordered: System.EventArgs -> unit,
                                            ?measureInvalidated: System.EventArgs -> unit,
                                            ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                            ?sizeChanged: System.EventArgs -> unit,
                                            ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                            ?classId: string,
                                            ?styleId: string,
                                            ?automationId: string,
                                            ?created: (Xamarin.Forms.TableView -> unit),
                                            ?ref: ViewRef<Xamarin.Forms.TableView>) = 

        let attribBuilder = ViewBuilders.BuildTableView(0,
                               ?intent=intent,
                               ?hasUnevenRows=hasUnevenRows,
                               ?rowHeight=rowHeight,
                               ?items=items,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.TableView> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.TableView>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.TableView>(ViewBuilders.CreateFuncTableView, ViewBuilders.UpdateFuncTableView, attribBuilder)

    /// Builds the attributes for a RowDefinition in the view
    static member inline BuildRowDefinition(attribCount: int,
                                            ?height: obj) = 

        let attribCount = match height with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = new AttributesBuilder(attribCount)
        match height with None -> () | Some v -> attribBuilder.Add(ViewAttributes.RowDefinitionHeightAttribKey, makeGridLength(v)) 
        attribBuilder

    static member val CreateFuncRowDefinition : (unit -> Xamarin.Forms.RowDefinition) = (fun () -> ViewBuilders.CreateRowDefinition())

    static member CreateRowDefinition () : Xamarin.Forms.RowDefinition =
        upcast (new Xamarin.Forms.RowDefinition())

    static member val UpdateFuncRowDefinition =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.RowDefinition) -> ViewBuilders.UpdateRowDefinition (prevOpt, curr, target)) 

    static member UpdateRowDefinition (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.RowDefinition) = 
        let mutable prevRowDefinitionHeightOpt = ValueNone
        let mutable currRowDefinitionHeightOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.RowDefinitionHeightAttribKey.KeyValue then 
                currRowDefinitionHeightOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.GridLength)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.RowDefinitionHeightAttribKey.KeyValue then 
                    prevRowDefinitionHeightOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.GridLength)
        match prevRowDefinitionHeightOpt, currRowDefinitionHeightOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Height <-  currValue
        | ValueSome _, ValueNone -> target.Height <- Xamarin.Forms.GridLength.Auto
        | ValueNone, ValueNone -> ()

    static member inline ConstructRowDefinition(?height: obj) = 

        let attribBuilder = ViewBuilders.BuildRowDefinition(0,
                               ?height=height)

        ViewElement.Create<Xamarin.Forms.RowDefinition>(ViewBuilders.CreateFuncRowDefinition, ViewBuilders.UpdateFuncRowDefinition, attribBuilder)

    /// Builds the attributes for a ColumnDefinition in the view
    static member inline BuildColumnDefinition(attribCount: int,
                                               ?width: obj) = 

        let attribCount = match width with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = new AttributesBuilder(attribCount)
        match width with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ColumnDefinitionWidthAttribKey, makeGridLength(v)) 
        attribBuilder

    static member val CreateFuncColumnDefinition : (unit -> Xamarin.Forms.ColumnDefinition) = (fun () -> ViewBuilders.CreateColumnDefinition())

    static member CreateColumnDefinition () : Xamarin.Forms.ColumnDefinition =
        upcast (new Xamarin.Forms.ColumnDefinition())

    static member val UpdateFuncColumnDefinition =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.ColumnDefinition) -> ViewBuilders.UpdateColumnDefinition (prevOpt, curr, target)) 

    static member UpdateColumnDefinition (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.ColumnDefinition) = 
        let mutable prevColumnDefinitionWidthOpt = ValueNone
        let mutable currColumnDefinitionWidthOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.ColumnDefinitionWidthAttribKey.KeyValue then 
                currColumnDefinitionWidthOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.GridLength)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.ColumnDefinitionWidthAttribKey.KeyValue then 
                    prevColumnDefinitionWidthOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.GridLength)
        match prevColumnDefinitionWidthOpt, currColumnDefinitionWidthOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Width <-  currValue
        | ValueSome _, ValueNone -> target.Width <- Xamarin.Forms.GridLength.Auto
        | ValueNone, ValueNone -> ()

    static member inline ConstructColumnDefinition(?width: obj) = 

        let attribBuilder = ViewBuilders.BuildColumnDefinition(0,
                               ?width=width)

        ViewElement.Create<Xamarin.Forms.ColumnDefinition>(ViewBuilders.CreateFuncColumnDefinition, ViewBuilders.UpdateFuncColumnDefinition, attribBuilder)

    /// Builds the attributes for a Grid in the view
    static member inline BuildGrid(attribCount: int,
                                   ?rowdefs: obj list,
                                   ?coldefs: obj list,
                                   ?rowSpacing: double,
                                   ?columnSpacing: double,
                                   ?children: ViewElement list,
                                   ?isClippedToBounds: bool,
                                   ?padding: obj,
                                   ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                   ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                   ?margin: obj,
                                   ?gestureRecognizers: ViewElement list,
                                   ?anchorX: double,
                                   ?anchorY: double,
                                   ?backgroundColor: Xamarin.Forms.Color,
                                   ?heightRequest: double,
                                   ?inputTransparent: bool,
                                   ?isEnabled: bool,
                                   ?isVisible: bool,
                                   ?minimumHeightRequest: double,
                                   ?minimumWidthRequest: double,
                                   ?opacity: double,
                                   ?rotation: double,
                                   ?rotationX: double,
                                   ?rotationY: double,
                                   ?scale: double,
                                   ?style: Xamarin.Forms.Style,
                                   ?styleClass: obj,
                                   ?translationX: double,
                                   ?translationY: double,
                                   ?widthRequest: double,
                                   ?resources: (string * obj) list,
                                   ?styles: Xamarin.Forms.Style list,
                                   ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                   ?isTabStop: bool,
                                   ?scaleX: double,
                                   ?scaleY: double,
                                   ?tabIndex: int,
                                   ?childrenReordered: System.EventArgs -> unit,
                                   ?measureInvalidated: System.EventArgs -> unit,
                                   ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                   ?sizeChanged: System.EventArgs -> unit,
                                   ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                   ?classId: string,
                                   ?styleId: string,
                                   ?automationId: string,
                                   ?created: obj -> unit,
                                   ?ref: ViewRef) = 

        let attribCount = match rowdefs with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match coldefs with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match rowSpacing with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match columnSpacing with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match children with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildLayout(attribCount, ?isClippedToBounds=isClippedToBounds, ?padding=padding, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match rowdefs with None -> () | Some v -> attribBuilder.Add(ViewAttributes.GridRowDefinitionsAttribKey, (fun es -> es |> Array.ofList |> Array.map (fun h -> ViewBuilders.ConstructRowDefinition(height=h)))(v)) 
        match coldefs with None -> () | Some v -> attribBuilder.Add(ViewAttributes.GridColumnDefinitionsAttribKey, (fun es -> es |> Array.ofList |> Array.map (fun h -> ViewBuilders.ConstructColumnDefinition(width=h)))(v)) 
        match rowSpacing with None -> () | Some v -> attribBuilder.Add(ViewAttributes.RowSpacingAttribKey, (v)) 
        match columnSpacing with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ColumnSpacingAttribKey, (v)) 
        match children with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ChildrenAttribKey, Array.ofList(v)) 
        attribBuilder

    static member val CreateFuncGrid : (unit -> Xamarin.Forms.Grid) = (fun () -> ViewBuilders.CreateGrid())

    static member CreateGrid () : Xamarin.Forms.Grid =
        upcast (new Xamarin.Forms.Grid())

    static member val UpdateFuncGrid =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.Grid) -> ViewBuilders.UpdateGrid (prevOpt, curr, target)) 

    static member UpdateGrid (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.Grid) = 
        // update the inherited Layout element
        let baseElement = (if ViewProto.ProtoLayout.IsNone then ViewProto.ProtoLayout <- Some (ViewBuilders.ConstructLayout())); ViewProto.ProtoLayout.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevGridRowDefinitionsOpt = ValueNone
        let mutable currGridRowDefinitionsOpt = ValueNone
        let mutable prevGridColumnDefinitionsOpt = ValueNone
        let mutable currGridColumnDefinitionsOpt = ValueNone
        let mutable prevRowSpacingOpt = ValueNone
        let mutable currRowSpacingOpt = ValueNone
        let mutable prevColumnSpacingOpt = ValueNone
        let mutable currColumnSpacingOpt = ValueNone
        let mutable prevChildrenOpt = ValueNone
        let mutable currChildrenOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.GridRowDefinitionsAttribKey.KeyValue then 
                currGridRowDefinitionsOpt <- ValueSome (kvp.Value :?> ViewElement[])
            if kvp.Key = ViewAttributes.GridColumnDefinitionsAttribKey.KeyValue then 
                currGridColumnDefinitionsOpt <- ValueSome (kvp.Value :?> ViewElement[])
            if kvp.Key = ViewAttributes.RowSpacingAttribKey.KeyValue then 
                currRowSpacingOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.ColumnSpacingAttribKey.KeyValue then 
                currColumnSpacingOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.ChildrenAttribKey.KeyValue then 
                currChildrenOpt <- ValueSome (kvp.Value :?> ViewElement[])
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.GridRowDefinitionsAttribKey.KeyValue then 
                    prevGridRowDefinitionsOpt <- ValueSome (kvp.Value :?> ViewElement[])
                if kvp.Key = ViewAttributes.GridColumnDefinitionsAttribKey.KeyValue then 
                    prevGridColumnDefinitionsOpt <- ValueSome (kvp.Value :?> ViewElement[])
                if kvp.Key = ViewAttributes.RowSpacingAttribKey.KeyValue then 
                    prevRowSpacingOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.ColumnSpacingAttribKey.KeyValue then 
                    prevColumnSpacingOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.ChildrenAttribKey.KeyValue then 
                    prevChildrenOpt <- ValueSome (kvp.Value :?> ViewElement[])
        updateCollectionGeneric prevGridRowDefinitionsOpt currGridRowDefinitionsOpt target.RowDefinitions
            (fun (x:ViewElement) -> x.Create() :?> Xamarin.Forms.RowDefinition)
            (fun _ _ _ -> ())
            canReuseChild
            updateChild
        updateCollectionGeneric prevGridColumnDefinitionsOpt currGridColumnDefinitionsOpt target.ColumnDefinitions
            (fun (x:ViewElement) -> x.Create() :?> Xamarin.Forms.ColumnDefinition)
            (fun _ _ _ -> ())
            canReuseChild
            updateChild
        match prevRowSpacingOpt, currRowSpacingOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.RowSpacing <-  currValue
        | ValueSome _, ValueNone -> target.RowSpacing <- 0.0
        | ValueNone, ValueNone -> ()
        match prevColumnSpacingOpt, currColumnSpacingOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.ColumnSpacing <-  currValue
        | ValueSome _, ValueNone -> target.ColumnSpacing <- 0.0
        | ValueNone, ValueNone -> ()
        updateCollectionGeneric prevChildrenOpt currChildrenOpt target.Children
            (fun (x:ViewElement) -> x.Create() :?> Xamarin.Forms.View)
            (fun prevChildOpt newChild targetChild -> 
                // Adjust the attached properties
                let prevChildValueOpt = match prevChildOpt with ValueNone -> ValueNone | ValueSome prevChild -> prevChild.TryGetAttributeKeyed<int>(ViewAttributes.GridRowAttribKey)
                let childValueOpt = newChild.TryGetAttributeKeyed<int>(ViewAttributes.GridRowAttribKey)
                match prevChildValueOpt, childValueOpt with
                | ValueSome prevChildValue, ValueSome currChildValue when prevChildValue = currChildValue -> ()
                | _, ValueSome currChildValue -> Xamarin.Forms.Grid.SetRow(targetChild, currChildValue)
                | ValueSome _, ValueNone -> Xamarin.Forms.Grid.SetRow(targetChild, 0)
                | _ -> ()
                // Adjust the attached properties
                let prevChildValueOpt = match prevChildOpt with ValueNone -> ValueNone | ValueSome prevChild -> prevChild.TryGetAttributeKeyed<int>(ViewAttributes.GridRowSpanAttribKey)
                let childValueOpt = newChild.TryGetAttributeKeyed<int>(ViewAttributes.GridRowSpanAttribKey)
                match prevChildValueOpt, childValueOpt with
                | ValueSome prevChildValue, ValueSome currChildValue when prevChildValue = currChildValue -> ()
                | _, ValueSome currChildValue -> Xamarin.Forms.Grid.SetRowSpan(targetChild, currChildValue)
                | ValueSome _, ValueNone -> Xamarin.Forms.Grid.SetRowSpan(targetChild, 0)
                | _ -> ()
                // Adjust the attached properties
                let prevChildValueOpt = match prevChildOpt with ValueNone -> ValueNone | ValueSome prevChild -> prevChild.TryGetAttributeKeyed<int>(ViewAttributes.GridColumnAttribKey)
                let childValueOpt = newChild.TryGetAttributeKeyed<int>(ViewAttributes.GridColumnAttribKey)
                match prevChildValueOpt, childValueOpt with
                | ValueSome prevChildValue, ValueSome currChildValue when prevChildValue = currChildValue -> ()
                | _, ValueSome currChildValue -> Xamarin.Forms.Grid.SetColumn(targetChild, currChildValue)
                | ValueSome _, ValueNone -> Xamarin.Forms.Grid.SetColumn(targetChild, 0)
                | _ -> ()
                // Adjust the attached properties
                let prevChildValueOpt = match prevChildOpt with ValueNone -> ValueNone | ValueSome prevChild -> prevChild.TryGetAttributeKeyed<int>(ViewAttributes.GridColumnSpanAttribKey)
                let childValueOpt = newChild.TryGetAttributeKeyed<int>(ViewAttributes.GridColumnSpanAttribKey)
                match prevChildValueOpt, childValueOpt with
                | ValueSome prevChildValue, ValueSome currChildValue when prevChildValue = currChildValue -> ()
                | _, ValueSome currChildValue -> Xamarin.Forms.Grid.SetColumnSpan(targetChild, currChildValue)
                | ValueSome _, ValueNone -> Xamarin.Forms.Grid.SetColumnSpan(targetChild, 0)
                | _ -> ()
                ())
            canReuseChild
            updateChild

    static member inline ConstructGrid(?rowdefs: obj list,
                                       ?coldefs: obj list,
                                       ?rowSpacing: double,
                                       ?columnSpacing: double,
                                       ?children: ViewElement list,
                                       ?isClippedToBounds: bool,
                                       ?padding: obj,
                                       ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                       ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                       ?margin: obj,
                                       ?gestureRecognizers: ViewElement list,
                                       ?anchorX: double,
                                       ?anchorY: double,
                                       ?backgroundColor: Xamarin.Forms.Color,
                                       ?heightRequest: double,
                                       ?inputTransparent: bool,
                                       ?isEnabled: bool,
                                       ?isVisible: bool,
                                       ?minimumHeightRequest: double,
                                       ?minimumWidthRequest: double,
                                       ?opacity: double,
                                       ?rotation: double,
                                       ?rotationX: double,
                                       ?rotationY: double,
                                       ?scale: double,
                                       ?style: Xamarin.Forms.Style,
                                       ?styleClass: obj,
                                       ?translationX: double,
                                       ?translationY: double,
                                       ?widthRequest: double,
                                       ?resources: (string * obj) list,
                                       ?styles: Xamarin.Forms.Style list,
                                       ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                       ?isTabStop: bool,
                                       ?scaleX: double,
                                       ?scaleY: double,
                                       ?tabIndex: int,
                                       ?childrenReordered: System.EventArgs -> unit,
                                       ?measureInvalidated: System.EventArgs -> unit,
                                       ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                       ?sizeChanged: System.EventArgs -> unit,
                                       ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                       ?classId: string,
                                       ?styleId: string,
                                       ?automationId: string,
                                       ?created: (Xamarin.Forms.Grid -> unit),
                                       ?ref: ViewRef<Xamarin.Forms.Grid>) = 

        let attribBuilder = ViewBuilders.BuildGrid(0,
                               ?rowdefs=rowdefs,
                               ?coldefs=coldefs,
                               ?rowSpacing=rowSpacing,
                               ?columnSpacing=columnSpacing,
                               ?children=children,
                               ?isClippedToBounds=isClippedToBounds,
                               ?padding=padding,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.Grid> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.Grid>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.Grid>(ViewBuilders.CreateFuncGrid, ViewBuilders.UpdateFuncGrid, attribBuilder)

    /// Builds the attributes for a AbsoluteLayout in the view
    static member inline BuildAbsoluteLayout(attribCount: int,
                                             ?children: ViewElement list,
                                             ?isClippedToBounds: bool,
                                             ?padding: obj,
                                             ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                             ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                             ?margin: obj,
                                             ?gestureRecognizers: ViewElement list,
                                             ?anchorX: double,
                                             ?anchorY: double,
                                             ?backgroundColor: Xamarin.Forms.Color,
                                             ?heightRequest: double,
                                             ?inputTransparent: bool,
                                             ?isEnabled: bool,
                                             ?isVisible: bool,
                                             ?minimumHeightRequest: double,
                                             ?minimumWidthRequest: double,
                                             ?opacity: double,
                                             ?rotation: double,
                                             ?rotationX: double,
                                             ?rotationY: double,
                                             ?scale: double,
                                             ?style: Xamarin.Forms.Style,
                                             ?styleClass: obj,
                                             ?translationX: double,
                                             ?translationY: double,
                                             ?widthRequest: double,
                                             ?resources: (string * obj) list,
                                             ?styles: Xamarin.Forms.Style list,
                                             ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                             ?isTabStop: bool,
                                             ?scaleX: double,
                                             ?scaleY: double,
                                             ?tabIndex: int,
                                             ?childrenReordered: System.EventArgs -> unit,
                                             ?measureInvalidated: System.EventArgs -> unit,
                                             ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                             ?sizeChanged: System.EventArgs -> unit,
                                             ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                             ?classId: string,
                                             ?styleId: string,
                                             ?automationId: string,
                                             ?created: obj -> unit,
                                             ?ref: ViewRef) = 

        let attribCount = match children with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildLayout(attribCount, ?isClippedToBounds=isClippedToBounds, ?padding=padding, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match children with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ChildrenAttribKey, Array.ofList(v)) 
        attribBuilder

    static member val CreateFuncAbsoluteLayout : (unit -> Xamarin.Forms.AbsoluteLayout) = (fun () -> ViewBuilders.CreateAbsoluteLayout())

    static member CreateAbsoluteLayout () : Xamarin.Forms.AbsoluteLayout =
        upcast (new Xamarin.Forms.AbsoluteLayout())

    static member val UpdateFuncAbsoluteLayout =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.AbsoluteLayout) -> ViewBuilders.UpdateAbsoluteLayout (prevOpt, curr, target)) 

    static member UpdateAbsoluteLayout (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.AbsoluteLayout) = 
        // update the inherited Layout element
        let baseElement = (if ViewProto.ProtoLayout.IsNone then ViewProto.ProtoLayout <- Some (ViewBuilders.ConstructLayout())); ViewProto.ProtoLayout.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevChildrenOpt = ValueNone
        let mutable currChildrenOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.ChildrenAttribKey.KeyValue then 
                currChildrenOpt <- ValueSome (kvp.Value :?> ViewElement[])
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.ChildrenAttribKey.KeyValue then 
                    prevChildrenOpt <- ValueSome (kvp.Value :?> ViewElement[])
        updateCollectionGeneric prevChildrenOpt currChildrenOpt target.Children
            (fun (x:ViewElement) -> x.Create() :?> Xamarin.Forms.View)
            (fun prevChildOpt newChild targetChild -> 
                // Adjust the attached properties
                let prevChildValueOpt = match prevChildOpt with ValueNone -> ValueNone | ValueSome prevChild -> prevChild.TryGetAttributeKeyed<Xamarin.Forms.Rectangle>(ViewAttributes.LayoutBoundsAttribKey)
                let childValueOpt = newChild.TryGetAttributeKeyed<Xamarin.Forms.Rectangle>(ViewAttributes.LayoutBoundsAttribKey)
                match prevChildValueOpt, childValueOpt with
                | ValueSome prevChildValue, ValueSome currChildValue when prevChildValue = currChildValue -> ()
                | _, ValueSome currChildValue -> Xamarin.Forms.AbsoluteLayout.SetLayoutBounds(targetChild, currChildValue)
                | ValueSome _, ValueNone -> Xamarin.Forms.AbsoluteLayout.SetLayoutBounds(targetChild, Xamarin.Forms.Rectangle.Zero)
                | _ -> ()
                // Adjust the attached properties
                let prevChildValueOpt = match prevChildOpt with ValueNone -> ValueNone | ValueSome prevChild -> prevChild.TryGetAttributeKeyed<Xamarin.Forms.AbsoluteLayoutFlags>(ViewAttributes.LayoutFlagsAttribKey)
                let childValueOpt = newChild.TryGetAttributeKeyed<Xamarin.Forms.AbsoluteLayoutFlags>(ViewAttributes.LayoutFlagsAttribKey)
                match prevChildValueOpt, childValueOpt with
                | ValueSome prevChildValue, ValueSome currChildValue when prevChildValue = currChildValue -> ()
                | _, ValueSome currChildValue -> Xamarin.Forms.AbsoluteLayout.SetLayoutFlags(targetChild, currChildValue)
                | ValueSome _, ValueNone -> Xamarin.Forms.AbsoluteLayout.SetLayoutFlags(targetChild, Xamarin.Forms.AbsoluteLayoutFlags.None)
                | _ -> ()
                ())
            canReuseChild
            updateChild

    static member inline ConstructAbsoluteLayout(?children: ViewElement list,
                                                 ?isClippedToBounds: bool,
                                                 ?padding: obj,
                                                 ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                                 ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                                 ?margin: obj,
                                                 ?gestureRecognizers: ViewElement list,
                                                 ?anchorX: double,
                                                 ?anchorY: double,
                                                 ?backgroundColor: Xamarin.Forms.Color,
                                                 ?heightRequest: double,
                                                 ?inputTransparent: bool,
                                                 ?isEnabled: bool,
                                                 ?isVisible: bool,
                                                 ?minimumHeightRequest: double,
                                                 ?minimumWidthRequest: double,
                                                 ?opacity: double,
                                                 ?rotation: double,
                                                 ?rotationX: double,
                                                 ?rotationY: double,
                                                 ?scale: double,
                                                 ?style: Xamarin.Forms.Style,
                                                 ?styleClass: obj,
                                                 ?translationX: double,
                                                 ?translationY: double,
                                                 ?widthRequest: double,
                                                 ?resources: (string * obj) list,
                                                 ?styles: Xamarin.Forms.Style list,
                                                 ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                                 ?isTabStop: bool,
                                                 ?scaleX: double,
                                                 ?scaleY: double,
                                                 ?tabIndex: int,
                                                 ?childrenReordered: System.EventArgs -> unit,
                                                 ?measureInvalidated: System.EventArgs -> unit,
                                                 ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                                 ?sizeChanged: System.EventArgs -> unit,
                                                 ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                                 ?classId: string,
                                                 ?styleId: string,
                                                 ?automationId: string,
                                                 ?created: (Xamarin.Forms.AbsoluteLayout -> unit),
                                                 ?ref: ViewRef<Xamarin.Forms.AbsoluteLayout>) = 

        let attribBuilder = ViewBuilders.BuildAbsoluteLayout(0,
                               ?children=children,
                               ?isClippedToBounds=isClippedToBounds,
                               ?padding=padding,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.AbsoluteLayout> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.AbsoluteLayout>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.AbsoluteLayout>(ViewBuilders.CreateFuncAbsoluteLayout, ViewBuilders.UpdateFuncAbsoluteLayout, attribBuilder)

    /// Builds the attributes for a RelativeLayout in the view
    static member inline BuildRelativeLayout(attribCount: int,
                                             ?children: ViewElement list,
                                             ?isClippedToBounds: bool,
                                             ?padding: obj,
                                             ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                             ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                             ?margin: obj,
                                             ?gestureRecognizers: ViewElement list,
                                             ?anchorX: double,
                                             ?anchorY: double,
                                             ?backgroundColor: Xamarin.Forms.Color,
                                             ?heightRequest: double,
                                             ?inputTransparent: bool,
                                             ?isEnabled: bool,
                                             ?isVisible: bool,
                                             ?minimumHeightRequest: double,
                                             ?minimumWidthRequest: double,
                                             ?opacity: double,
                                             ?rotation: double,
                                             ?rotationX: double,
                                             ?rotationY: double,
                                             ?scale: double,
                                             ?style: Xamarin.Forms.Style,
                                             ?styleClass: obj,
                                             ?translationX: double,
                                             ?translationY: double,
                                             ?widthRequest: double,
                                             ?resources: (string * obj) list,
                                             ?styles: Xamarin.Forms.Style list,
                                             ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                             ?isTabStop: bool,
                                             ?scaleX: double,
                                             ?scaleY: double,
                                             ?tabIndex: int,
                                             ?childrenReordered: System.EventArgs -> unit,
                                             ?measureInvalidated: System.EventArgs -> unit,
                                             ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                             ?sizeChanged: System.EventArgs -> unit,
                                             ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                             ?classId: string,
                                             ?styleId: string,
                                             ?automationId: string,
                                             ?created: obj -> unit,
                                             ?ref: ViewRef) = 

        let attribCount = match children with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildLayout(attribCount, ?isClippedToBounds=isClippedToBounds, ?padding=padding, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match children with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ChildrenAttribKey, Array.ofList(v)) 
        attribBuilder

    static member val CreateFuncRelativeLayout : (unit -> Xamarin.Forms.RelativeLayout) = (fun () -> ViewBuilders.CreateRelativeLayout())

    static member CreateRelativeLayout () : Xamarin.Forms.RelativeLayout =
        upcast (new Xamarin.Forms.RelativeLayout())

    static member val UpdateFuncRelativeLayout =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.RelativeLayout) -> ViewBuilders.UpdateRelativeLayout (prevOpt, curr, target)) 

    static member UpdateRelativeLayout (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.RelativeLayout) = 
        // update the inherited Layout element
        let baseElement = (if ViewProto.ProtoLayout.IsNone then ViewProto.ProtoLayout <- Some (ViewBuilders.ConstructLayout())); ViewProto.ProtoLayout.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevChildrenOpt = ValueNone
        let mutable currChildrenOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.ChildrenAttribKey.KeyValue then 
                currChildrenOpt <- ValueSome (kvp.Value :?> ViewElement[])
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.ChildrenAttribKey.KeyValue then 
                    prevChildrenOpt <- ValueSome (kvp.Value :?> ViewElement[])
        updateCollectionGeneric prevChildrenOpt currChildrenOpt target.Children
            (fun (x:ViewElement) -> x.Create() :?> Xamarin.Forms.View)
            (fun prevChildOpt newChild targetChild -> 
                // Adjust the attached properties
                let prevChildValueOpt = match prevChildOpt with ValueNone -> ValueNone | ValueSome prevChild -> prevChild.TryGetAttributeKeyed<Xamarin.Forms.BoundsConstraint>(ViewAttributes.BoundsConstraintAttribKey)
                let childValueOpt = newChild.TryGetAttributeKeyed<Xamarin.Forms.BoundsConstraint>(ViewAttributes.BoundsConstraintAttribKey)
                match prevChildValueOpt, childValueOpt with
                | ValueSome prevChildValue, ValueSome currChildValue when prevChildValue = currChildValue -> ()
                | _, ValueSome currChildValue -> Xamarin.Forms.RelativeLayout.SetBoundsConstraint(targetChild, currChildValue)
                | ValueSome _, ValueNone -> Xamarin.Forms.RelativeLayout.SetBoundsConstraint(targetChild, null)
                | _ -> ()
                // Adjust the attached properties
                let prevChildValueOpt = match prevChildOpt with ValueNone -> ValueNone | ValueSome prevChild -> prevChild.TryGetAttributeKeyed<Xamarin.Forms.Constraint>(ViewAttributes.HeightConstraintAttribKey)
                let childValueOpt = newChild.TryGetAttributeKeyed<Xamarin.Forms.Constraint>(ViewAttributes.HeightConstraintAttribKey)
                match prevChildValueOpt, childValueOpt with
                | ValueSome prevChildValue, ValueSome currChildValue when prevChildValue = currChildValue -> ()
                | _, ValueSome currChildValue -> Xamarin.Forms.RelativeLayout.SetHeightConstraint(targetChild, currChildValue)
                | ValueSome _, ValueNone -> Xamarin.Forms.RelativeLayout.SetHeightConstraint(targetChild, null)
                | _ -> ()
                // Adjust the attached properties
                let prevChildValueOpt = match prevChildOpt with ValueNone -> ValueNone | ValueSome prevChild -> prevChild.TryGetAttributeKeyed<Xamarin.Forms.Constraint>(ViewAttributes.WidthConstraintAttribKey)
                let childValueOpt = newChild.TryGetAttributeKeyed<Xamarin.Forms.Constraint>(ViewAttributes.WidthConstraintAttribKey)
                match prevChildValueOpt, childValueOpt with
                | ValueSome prevChildValue, ValueSome currChildValue when prevChildValue = currChildValue -> ()
                | _, ValueSome currChildValue -> Xamarin.Forms.RelativeLayout.SetWidthConstraint(targetChild, currChildValue)
                | ValueSome _, ValueNone -> Xamarin.Forms.RelativeLayout.SetWidthConstraint(targetChild, null)
                | _ -> ()
                // Adjust the attached properties
                let prevChildValueOpt = match prevChildOpt with ValueNone -> ValueNone | ValueSome prevChild -> prevChild.TryGetAttributeKeyed<Xamarin.Forms.Constraint>(ViewAttributes.XConstraintAttribKey)
                let childValueOpt = newChild.TryGetAttributeKeyed<Xamarin.Forms.Constraint>(ViewAttributes.XConstraintAttribKey)
                match prevChildValueOpt, childValueOpt with
                | ValueSome prevChildValue, ValueSome currChildValue when prevChildValue = currChildValue -> ()
                | _, ValueSome currChildValue -> Xamarin.Forms.RelativeLayout.SetXConstraint(targetChild, currChildValue)
                | ValueSome _, ValueNone -> Xamarin.Forms.RelativeLayout.SetXConstraint(targetChild, null)
                | _ -> ()
                // Adjust the attached properties
                let prevChildValueOpt = match prevChildOpt with ValueNone -> ValueNone | ValueSome prevChild -> prevChild.TryGetAttributeKeyed<Xamarin.Forms.Constraint>(ViewAttributes.YConstraintAttribKey)
                let childValueOpt = newChild.TryGetAttributeKeyed<Xamarin.Forms.Constraint>(ViewAttributes.YConstraintAttribKey)
                match prevChildValueOpt, childValueOpt with
                | ValueSome prevChildValue, ValueSome currChildValue when prevChildValue = currChildValue -> ()
                | _, ValueSome currChildValue -> Xamarin.Forms.RelativeLayout.SetYConstraint(targetChild, currChildValue)
                | ValueSome _, ValueNone -> Xamarin.Forms.RelativeLayout.SetYConstraint(targetChild, null)
                | _ -> ()
                ())
            canReuseChild
            updateChild

    static member inline ConstructRelativeLayout(?children: ViewElement list,
                                                 ?isClippedToBounds: bool,
                                                 ?padding: obj,
                                                 ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                                 ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                                 ?margin: obj,
                                                 ?gestureRecognizers: ViewElement list,
                                                 ?anchorX: double,
                                                 ?anchorY: double,
                                                 ?backgroundColor: Xamarin.Forms.Color,
                                                 ?heightRequest: double,
                                                 ?inputTransparent: bool,
                                                 ?isEnabled: bool,
                                                 ?isVisible: bool,
                                                 ?minimumHeightRequest: double,
                                                 ?minimumWidthRequest: double,
                                                 ?opacity: double,
                                                 ?rotation: double,
                                                 ?rotationX: double,
                                                 ?rotationY: double,
                                                 ?scale: double,
                                                 ?style: Xamarin.Forms.Style,
                                                 ?styleClass: obj,
                                                 ?translationX: double,
                                                 ?translationY: double,
                                                 ?widthRequest: double,
                                                 ?resources: (string * obj) list,
                                                 ?styles: Xamarin.Forms.Style list,
                                                 ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                                 ?isTabStop: bool,
                                                 ?scaleX: double,
                                                 ?scaleY: double,
                                                 ?tabIndex: int,
                                                 ?childrenReordered: System.EventArgs -> unit,
                                                 ?measureInvalidated: System.EventArgs -> unit,
                                                 ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                                 ?sizeChanged: System.EventArgs -> unit,
                                                 ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                                 ?classId: string,
                                                 ?styleId: string,
                                                 ?automationId: string,
                                                 ?created: (Xamarin.Forms.RelativeLayout -> unit),
                                                 ?ref: ViewRef<Xamarin.Forms.RelativeLayout>) = 

        let attribBuilder = ViewBuilders.BuildRelativeLayout(0,
                               ?children=children,
                               ?isClippedToBounds=isClippedToBounds,
                               ?padding=padding,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.RelativeLayout> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.RelativeLayout>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.RelativeLayout>(ViewBuilders.CreateFuncRelativeLayout, ViewBuilders.UpdateFuncRelativeLayout, attribBuilder)

    /// Builds the attributes for a FlexLayout in the view
    static member inline BuildFlexLayout(attribCount: int,
                                         ?alignContent: Xamarin.Forms.FlexAlignContent,
                                         ?alignItems: Xamarin.Forms.FlexAlignItems,
                                         ?direction: Xamarin.Forms.FlexDirection,
                                         ?position: Xamarin.Forms.FlexPosition,
                                         ?wrap: Xamarin.Forms.FlexWrap,
                                         ?justifyContent: Xamarin.Forms.FlexJustify,
                                         ?children: ViewElement list,
                                         ?isClippedToBounds: bool,
                                         ?padding: obj,
                                         ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                         ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                         ?margin: obj,
                                         ?gestureRecognizers: ViewElement list,
                                         ?anchorX: double,
                                         ?anchorY: double,
                                         ?backgroundColor: Xamarin.Forms.Color,
                                         ?heightRequest: double,
                                         ?inputTransparent: bool,
                                         ?isEnabled: bool,
                                         ?isVisible: bool,
                                         ?minimumHeightRequest: double,
                                         ?minimumWidthRequest: double,
                                         ?opacity: double,
                                         ?rotation: double,
                                         ?rotationX: double,
                                         ?rotationY: double,
                                         ?scale: double,
                                         ?style: Xamarin.Forms.Style,
                                         ?styleClass: obj,
                                         ?translationX: double,
                                         ?translationY: double,
                                         ?widthRequest: double,
                                         ?resources: (string * obj) list,
                                         ?styles: Xamarin.Forms.Style list,
                                         ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                         ?isTabStop: bool,
                                         ?scaleX: double,
                                         ?scaleY: double,
                                         ?tabIndex: int,
                                         ?childrenReordered: System.EventArgs -> unit,
                                         ?measureInvalidated: System.EventArgs -> unit,
                                         ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                         ?sizeChanged: System.EventArgs -> unit,
                                         ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                         ?classId: string,
                                         ?styleId: string,
                                         ?automationId: string,
                                         ?created: obj -> unit,
                                         ?ref: ViewRef) = 

        let attribCount = match alignContent with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match alignItems with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match direction with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match position with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match wrap with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match justifyContent with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match children with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildLayout(attribCount, ?isClippedToBounds=isClippedToBounds, ?padding=padding, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match alignContent with None -> () | Some v -> attribBuilder.Add(ViewAttributes.AlignContentAttribKey, (v)) 
        match alignItems with None -> () | Some v -> attribBuilder.Add(ViewAttributes.AlignItemsAttribKey, (v)) 
        match direction with None -> () | Some v -> attribBuilder.Add(ViewAttributes.FlexLayoutDirectionAttribKey, (v)) 
        match position with None -> () | Some v -> attribBuilder.Add(ViewAttributes.PositionAttribKey, (v)) 
        match wrap with None -> () | Some v -> attribBuilder.Add(ViewAttributes.WrapAttribKey, (v)) 
        match justifyContent with None -> () | Some v -> attribBuilder.Add(ViewAttributes.JustifyContentAttribKey, (v)) 
        match children with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ChildrenAttribKey, Array.ofList(v)) 
        attribBuilder

    static member val CreateFuncFlexLayout : (unit -> Xamarin.Forms.FlexLayout) = (fun () -> ViewBuilders.CreateFlexLayout())

    static member CreateFlexLayout () : Xamarin.Forms.FlexLayout =
        upcast (new Xamarin.Forms.FlexLayout())

    static member val UpdateFuncFlexLayout =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.FlexLayout) -> ViewBuilders.UpdateFlexLayout (prevOpt, curr, target)) 

    static member UpdateFlexLayout (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.FlexLayout) = 
        // update the inherited Layout element
        let baseElement = (if ViewProto.ProtoLayout.IsNone then ViewProto.ProtoLayout <- Some (ViewBuilders.ConstructLayout())); ViewProto.ProtoLayout.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevAlignContentOpt = ValueNone
        let mutable currAlignContentOpt = ValueNone
        let mutable prevAlignItemsOpt = ValueNone
        let mutable currAlignItemsOpt = ValueNone
        let mutable prevFlexLayoutDirectionOpt = ValueNone
        let mutable currFlexLayoutDirectionOpt = ValueNone
        let mutable prevPositionOpt = ValueNone
        let mutable currPositionOpt = ValueNone
        let mutable prevWrapOpt = ValueNone
        let mutable currWrapOpt = ValueNone
        let mutable prevJustifyContentOpt = ValueNone
        let mutable currJustifyContentOpt = ValueNone
        let mutable prevChildrenOpt = ValueNone
        let mutable currChildrenOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.AlignContentAttribKey.KeyValue then 
                currAlignContentOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.FlexAlignContent)
            if kvp.Key = ViewAttributes.AlignItemsAttribKey.KeyValue then 
                currAlignItemsOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.FlexAlignItems)
            if kvp.Key = ViewAttributes.FlexLayoutDirectionAttribKey.KeyValue then 
                currFlexLayoutDirectionOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.FlexDirection)
            if kvp.Key = ViewAttributes.PositionAttribKey.KeyValue then 
                currPositionOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.FlexPosition)
            if kvp.Key = ViewAttributes.WrapAttribKey.KeyValue then 
                currWrapOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.FlexWrap)
            if kvp.Key = ViewAttributes.JustifyContentAttribKey.KeyValue then 
                currJustifyContentOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.FlexJustify)
            if kvp.Key = ViewAttributes.ChildrenAttribKey.KeyValue then 
                currChildrenOpt <- ValueSome (kvp.Value :?> ViewElement[])
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.AlignContentAttribKey.KeyValue then 
                    prevAlignContentOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.FlexAlignContent)
                if kvp.Key = ViewAttributes.AlignItemsAttribKey.KeyValue then 
                    prevAlignItemsOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.FlexAlignItems)
                if kvp.Key = ViewAttributes.FlexLayoutDirectionAttribKey.KeyValue then 
                    prevFlexLayoutDirectionOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.FlexDirection)
                if kvp.Key = ViewAttributes.PositionAttribKey.KeyValue then 
                    prevPositionOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.FlexPosition)
                if kvp.Key = ViewAttributes.WrapAttribKey.KeyValue then 
                    prevWrapOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.FlexWrap)
                if kvp.Key = ViewAttributes.JustifyContentAttribKey.KeyValue then 
                    prevJustifyContentOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.FlexJustify)
                if kvp.Key = ViewAttributes.ChildrenAttribKey.KeyValue then 
                    prevChildrenOpt <- ValueSome (kvp.Value :?> ViewElement[])
        match prevAlignContentOpt, currAlignContentOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.AlignContent <-  currValue
        | ValueSome _, ValueNone -> target.AlignContent <- Unchecked.defaultof<Xamarin.Forms.FlexAlignContent>
        | ValueNone, ValueNone -> ()
        match prevAlignItemsOpt, currAlignItemsOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.AlignItems <-  currValue
        | ValueSome _, ValueNone -> target.AlignItems <- Unchecked.defaultof<Xamarin.Forms.FlexAlignItems>
        | ValueNone, ValueNone -> ()
        match prevFlexLayoutDirectionOpt, currFlexLayoutDirectionOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Direction <-  currValue
        | ValueSome _, ValueNone -> target.Direction <- Unchecked.defaultof<Xamarin.Forms.FlexDirection>
        | ValueNone, ValueNone -> ()
        match prevPositionOpt, currPositionOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Position <-  currValue
        | ValueSome _, ValueNone -> target.Position <- Unchecked.defaultof<Xamarin.Forms.FlexPosition>
        | ValueNone, ValueNone -> ()
        match prevWrapOpt, currWrapOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Wrap <-  currValue
        | ValueSome _, ValueNone -> target.Wrap <- Unchecked.defaultof<Xamarin.Forms.FlexWrap>
        | ValueNone, ValueNone -> ()
        match prevJustifyContentOpt, currJustifyContentOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.JustifyContent <-  currValue
        | ValueSome _, ValueNone -> target.JustifyContent <- Unchecked.defaultof<Xamarin.Forms.FlexJustify>
        | ValueNone, ValueNone -> ()
        updateCollectionGeneric prevChildrenOpt currChildrenOpt target.Children
            (fun (x:ViewElement) -> x.Create() :?> Xamarin.Forms.View)
            (fun prevChildOpt newChild targetChild -> 
                // Adjust the attached properties
                let prevChildValueOpt = match prevChildOpt with ValueNone -> ValueNone | ValueSome prevChild -> prevChild.TryGetAttributeKeyed<Xamarin.Forms.FlexAlignSelf>(ViewAttributes.FlexAlignSelfAttribKey)
                let childValueOpt = newChild.TryGetAttributeKeyed<Xamarin.Forms.FlexAlignSelf>(ViewAttributes.FlexAlignSelfAttribKey)
                match prevChildValueOpt, childValueOpt with
                | ValueSome prevChildValue, ValueSome currChildValue when prevChildValue = currChildValue -> ()
                | _, ValueSome currChildValue -> Xamarin.Forms.FlexLayout.SetAlignSelf(targetChild, currChildValue)
                | ValueSome _, ValueNone -> Xamarin.Forms.FlexLayout.SetAlignSelf(targetChild, Unchecked.defaultof<Xamarin.Forms.FlexAlignSelf>)
                | _ -> ()
                // Adjust the attached properties
                let prevChildValueOpt = match prevChildOpt with ValueNone -> ValueNone | ValueSome prevChild -> prevChild.TryGetAttributeKeyed<int>(ViewAttributes.FlexOrderAttribKey)
                let childValueOpt = newChild.TryGetAttributeKeyed<int>(ViewAttributes.FlexOrderAttribKey)
                match prevChildValueOpt, childValueOpt with
                | ValueSome prevChildValue, ValueSome currChildValue when prevChildValue = currChildValue -> ()
                | _, ValueSome currChildValue -> Xamarin.Forms.FlexLayout.SetOrder(targetChild, currChildValue)
                | ValueSome _, ValueNone -> Xamarin.Forms.FlexLayout.SetOrder(targetChild, 0)
                | _ -> ()
                // Adjust the attached properties
                let prevChildValueOpt = match prevChildOpt with ValueNone -> ValueNone | ValueSome prevChild -> prevChild.TryGetAttributeKeyed<Xamarin.Forms.FlexBasis>(ViewAttributes.FlexBasisAttribKey)
                let childValueOpt = newChild.TryGetAttributeKeyed<Xamarin.Forms.FlexBasis>(ViewAttributes.FlexBasisAttribKey)
                match prevChildValueOpt, childValueOpt with
                | ValueSome prevChildValue, ValueSome currChildValue when prevChildValue = currChildValue -> ()
                | _, ValueSome currChildValue -> Xamarin.Forms.FlexLayout.SetBasis(targetChild, currChildValue)
                | ValueSome _, ValueNone -> Xamarin.Forms.FlexLayout.SetBasis(targetChild, Unchecked.defaultof<Xamarin.Forms.FlexBasis>)
                | _ -> ()
                // Adjust the attached properties
                let prevChildValueOpt = match prevChildOpt with ValueNone -> ValueNone | ValueSome prevChild -> prevChild.TryGetAttributeKeyed<single>(ViewAttributes.FlexGrowAttribKey)
                let childValueOpt = newChild.TryGetAttributeKeyed<single>(ViewAttributes.FlexGrowAttribKey)
                match prevChildValueOpt, childValueOpt with
                | ValueSome prevChildValue, ValueSome currChildValue when prevChildValue = currChildValue -> ()
                | _, ValueSome currChildValue -> Xamarin.Forms.FlexLayout.SetGrow(targetChild, currChildValue)
                | ValueSome _, ValueNone -> Xamarin.Forms.FlexLayout.SetGrow(targetChild, 0.0f)
                | _ -> ()
                // Adjust the attached properties
                let prevChildValueOpt = match prevChildOpt with ValueNone -> ValueNone | ValueSome prevChild -> prevChild.TryGetAttributeKeyed<single>(ViewAttributes.FlexShrinkAttribKey)
                let childValueOpt = newChild.TryGetAttributeKeyed<single>(ViewAttributes.FlexShrinkAttribKey)
                match prevChildValueOpt, childValueOpt with
                | ValueSome prevChildValue, ValueSome currChildValue when prevChildValue = currChildValue -> ()
                | _, ValueSome currChildValue -> Xamarin.Forms.FlexLayout.SetShrink(targetChild, currChildValue)
                | ValueSome _, ValueNone -> Xamarin.Forms.FlexLayout.SetShrink(targetChild, 1.0f)
                | _ -> ()
                ())
            canReuseChild
            updateChild

    static member inline ConstructFlexLayout(?alignContent: Xamarin.Forms.FlexAlignContent,
                                             ?alignItems: Xamarin.Forms.FlexAlignItems,
                                             ?direction: Xamarin.Forms.FlexDirection,
                                             ?position: Xamarin.Forms.FlexPosition,
                                             ?wrap: Xamarin.Forms.FlexWrap,
                                             ?justifyContent: Xamarin.Forms.FlexJustify,
                                             ?children: ViewElement list,
                                             ?isClippedToBounds: bool,
                                             ?padding: obj,
                                             ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                             ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                             ?margin: obj,
                                             ?gestureRecognizers: ViewElement list,
                                             ?anchorX: double,
                                             ?anchorY: double,
                                             ?backgroundColor: Xamarin.Forms.Color,
                                             ?heightRequest: double,
                                             ?inputTransparent: bool,
                                             ?isEnabled: bool,
                                             ?isVisible: bool,
                                             ?minimumHeightRequest: double,
                                             ?minimumWidthRequest: double,
                                             ?opacity: double,
                                             ?rotation: double,
                                             ?rotationX: double,
                                             ?rotationY: double,
                                             ?scale: double,
                                             ?style: Xamarin.Forms.Style,
                                             ?styleClass: obj,
                                             ?translationX: double,
                                             ?translationY: double,
                                             ?widthRequest: double,
                                             ?resources: (string * obj) list,
                                             ?styles: Xamarin.Forms.Style list,
                                             ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                             ?isTabStop: bool,
                                             ?scaleX: double,
                                             ?scaleY: double,
                                             ?tabIndex: int,
                                             ?childrenReordered: System.EventArgs -> unit,
                                             ?measureInvalidated: System.EventArgs -> unit,
                                             ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                             ?sizeChanged: System.EventArgs -> unit,
                                             ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                             ?classId: string,
                                             ?styleId: string,
                                             ?automationId: string,
                                             ?created: (Xamarin.Forms.FlexLayout -> unit),
                                             ?ref: ViewRef<Xamarin.Forms.FlexLayout>) = 

        let attribBuilder = ViewBuilders.BuildFlexLayout(0,
                               ?alignContent=alignContent,
                               ?alignItems=alignItems,
                               ?direction=direction,
                               ?position=position,
                               ?wrap=wrap,
                               ?justifyContent=justifyContent,
                               ?children=children,
                               ?isClippedToBounds=isClippedToBounds,
                               ?padding=padding,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.FlexLayout> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.FlexLayout>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.FlexLayout>(ViewBuilders.CreateFuncFlexLayout, ViewBuilders.UpdateFuncFlexLayout, attribBuilder)

    /// Builds the attributes for a TemplatedView in the view
    static member inline BuildTemplatedView(attribCount: int,
                                            ?isClippedToBounds: bool,
                                            ?padding: obj,
                                            ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                            ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                            ?margin: obj,
                                            ?gestureRecognizers: ViewElement list,
                                            ?anchorX: double,
                                            ?anchorY: double,
                                            ?backgroundColor: Xamarin.Forms.Color,
                                            ?heightRequest: double,
                                            ?inputTransparent: bool,
                                            ?isEnabled: bool,
                                            ?isVisible: bool,
                                            ?minimumHeightRequest: double,
                                            ?minimumWidthRequest: double,
                                            ?opacity: double,
                                            ?rotation: double,
                                            ?rotationX: double,
                                            ?rotationY: double,
                                            ?scale: double,
                                            ?style: Xamarin.Forms.Style,
                                            ?styleClass: obj,
                                            ?translationX: double,
                                            ?translationY: double,
                                            ?widthRequest: double,
                                            ?resources: (string * obj) list,
                                            ?styles: Xamarin.Forms.Style list,
                                            ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                            ?isTabStop: bool,
                                            ?scaleX: double,
                                            ?scaleY: double,
                                            ?tabIndex: int,
                                            ?childrenReordered: System.EventArgs -> unit,
                                            ?measureInvalidated: System.EventArgs -> unit,
                                            ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                            ?sizeChanged: System.EventArgs -> unit,
                                            ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                            ?classId: string,
                                            ?styleId: string,
                                            ?automationId: string,
                                            ?created: obj -> unit,
                                            ?ref: ViewRef) = 
        let attribBuilder = ViewBuilders.BuildLayout(attribCount, ?isClippedToBounds=isClippedToBounds, ?padding=padding, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        attribBuilder

    static member val CreateFuncTemplatedView : (unit -> Xamarin.Forms.TemplatedView) = (fun () -> ViewBuilders.CreateTemplatedView())

    static member CreateTemplatedView () : Xamarin.Forms.TemplatedView =
        upcast (new Xamarin.Forms.TemplatedView())

    static member val UpdateFuncTemplatedView =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.TemplatedView) -> ViewBuilders.UpdateTemplatedView (prevOpt, curr, target)) 

    static member UpdateTemplatedView (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.TemplatedView) = 
        // update the inherited Layout element
        let baseElement = (if ViewProto.ProtoLayout.IsNone then ViewProto.ProtoLayout <- Some (ViewBuilders.ConstructLayout())); ViewProto.ProtoLayout.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        ignore prevOpt
        ignore curr
        ignore target

    static member inline ConstructTemplatedView(?isClippedToBounds: bool,
                                                ?padding: obj,
                                                ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                                ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                                ?margin: obj,
                                                ?gestureRecognizers: ViewElement list,
                                                ?anchorX: double,
                                                ?anchorY: double,
                                                ?backgroundColor: Xamarin.Forms.Color,
                                                ?heightRequest: double,
                                                ?inputTransparent: bool,
                                                ?isEnabled: bool,
                                                ?isVisible: bool,
                                                ?minimumHeightRequest: double,
                                                ?minimumWidthRequest: double,
                                                ?opacity: double,
                                                ?rotation: double,
                                                ?rotationX: double,
                                                ?rotationY: double,
                                                ?scale: double,
                                                ?style: Xamarin.Forms.Style,
                                                ?styleClass: obj,
                                                ?translationX: double,
                                                ?translationY: double,
                                                ?widthRequest: double,
                                                ?resources: (string * obj) list,
                                                ?styles: Xamarin.Forms.Style list,
                                                ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                                ?isTabStop: bool,
                                                ?scaleX: double,
                                                ?scaleY: double,
                                                ?tabIndex: int,
                                                ?childrenReordered: System.EventArgs -> unit,
                                                ?measureInvalidated: System.EventArgs -> unit,
                                                ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                                ?sizeChanged: System.EventArgs -> unit,
                                                ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                                ?classId: string,
                                                ?styleId: string,
                                                ?automationId: string,
                                                ?created: (Xamarin.Forms.TemplatedView -> unit),
                                                ?ref: ViewRef<Xamarin.Forms.TemplatedView>) = 

        let attribBuilder = ViewBuilders.BuildTemplatedView(0,
                               ?isClippedToBounds=isClippedToBounds,
                               ?padding=padding,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.TemplatedView> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.TemplatedView>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.TemplatedView>(ViewBuilders.CreateFuncTemplatedView, ViewBuilders.UpdateFuncTemplatedView, attribBuilder)

    /// Builds the attributes for a ContentView in the view
    static member inline BuildContentView(attribCount: int,
                                          ?content: ViewElement,
                                          ?isClippedToBounds: bool,
                                          ?padding: obj,
                                          ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                          ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                          ?margin: obj,
                                          ?gestureRecognizers: ViewElement list,
                                          ?anchorX: double,
                                          ?anchorY: double,
                                          ?backgroundColor: Xamarin.Forms.Color,
                                          ?heightRequest: double,
                                          ?inputTransparent: bool,
                                          ?isEnabled: bool,
                                          ?isVisible: bool,
                                          ?minimumHeightRequest: double,
                                          ?minimumWidthRequest: double,
                                          ?opacity: double,
                                          ?rotation: double,
                                          ?rotationX: double,
                                          ?rotationY: double,
                                          ?scale: double,
                                          ?style: Xamarin.Forms.Style,
                                          ?styleClass: obj,
                                          ?translationX: double,
                                          ?translationY: double,
                                          ?widthRequest: double,
                                          ?resources: (string * obj) list,
                                          ?styles: Xamarin.Forms.Style list,
                                          ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                          ?isTabStop: bool,
                                          ?scaleX: double,
                                          ?scaleY: double,
                                          ?tabIndex: int,
                                          ?childrenReordered: System.EventArgs -> unit,
                                          ?measureInvalidated: System.EventArgs -> unit,
                                          ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                          ?sizeChanged: System.EventArgs -> unit,
                                          ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                          ?classId: string,
                                          ?styleId: string,
                                          ?automationId: string,
                                          ?created: obj -> unit,
                                          ?ref: ViewRef) = 

        let attribCount = match content with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildTemplatedView(attribCount, ?isClippedToBounds=isClippedToBounds, ?padding=padding, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match content with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ContentAttribKey, (v)) 
        attribBuilder

    static member val CreateFuncContentView : (unit -> Xamarin.Forms.ContentView) = (fun () -> ViewBuilders.CreateContentView())

    static member CreateContentView () : Xamarin.Forms.ContentView =
        upcast (new Xamarin.Forms.ContentView())

    static member val UpdateFuncContentView =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.ContentView) -> ViewBuilders.UpdateContentView (prevOpt, curr, target)) 

    static member UpdateContentView (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.ContentView) = 
        // update the inherited TemplatedView element
        let baseElement = (if ViewProto.ProtoTemplatedView.IsNone then ViewProto.ProtoTemplatedView <- Some (ViewBuilders.ConstructTemplatedView())); ViewProto.ProtoTemplatedView.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevContentOpt = ValueNone
        let mutable currContentOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.ContentAttribKey.KeyValue then 
                currContentOpt <- ValueSome (kvp.Value :?> ViewElement)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.ContentAttribKey.KeyValue then 
                    prevContentOpt <- ValueSome (kvp.Value :?> ViewElement)
        match prevContentOpt, currContentOpt with
        // For structured objects, dependsOn on reference equality
        | ValueSome prevValue, ValueSome newValue when identical prevValue newValue -> ()
        | ValueSome prevValue, ValueSome newValue when canReuseChild prevValue newValue ->
            newValue.UpdateIncremental(prevValue, target.Content)
        | _, ValueSome newValue ->
            target.Content <- (newValue.Create() :?> Xamarin.Forms.View)
        | ValueSome _, ValueNone ->
            target.Content <- null
        | ValueNone, ValueNone -> ()

    static member inline ConstructContentView(?content: ViewElement,
                                              ?isClippedToBounds: bool,
                                              ?padding: obj,
                                              ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                              ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                              ?margin: obj,
                                              ?gestureRecognizers: ViewElement list,
                                              ?anchorX: double,
                                              ?anchorY: double,
                                              ?backgroundColor: Xamarin.Forms.Color,
                                              ?heightRequest: double,
                                              ?inputTransparent: bool,
                                              ?isEnabled: bool,
                                              ?isVisible: bool,
                                              ?minimumHeightRequest: double,
                                              ?minimumWidthRequest: double,
                                              ?opacity: double,
                                              ?rotation: double,
                                              ?rotationX: double,
                                              ?rotationY: double,
                                              ?scale: double,
                                              ?style: Xamarin.Forms.Style,
                                              ?styleClass: obj,
                                              ?translationX: double,
                                              ?translationY: double,
                                              ?widthRequest: double,
                                              ?resources: (string * obj) list,
                                              ?styles: Xamarin.Forms.Style list,
                                              ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                              ?isTabStop: bool,
                                              ?scaleX: double,
                                              ?scaleY: double,
                                              ?tabIndex: int,
                                              ?childrenReordered: System.EventArgs -> unit,
                                              ?measureInvalidated: System.EventArgs -> unit,
                                              ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                              ?sizeChanged: System.EventArgs -> unit,
                                              ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                              ?classId: string,
                                              ?styleId: string,
                                              ?automationId: string,
                                              ?created: (Xamarin.Forms.ContentView -> unit),
                                              ?ref: ViewRef<Xamarin.Forms.ContentView>) = 

        let attribBuilder = ViewBuilders.BuildContentView(0,
                               ?content=content,
                               ?isClippedToBounds=isClippedToBounds,
                               ?padding=padding,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.ContentView> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.ContentView>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.ContentView>(ViewBuilders.CreateFuncContentView, ViewBuilders.UpdateFuncContentView, attribBuilder)

    /// Builds the attributes for a DatePicker in the view
    static member inline BuildDatePicker(attribCount: int,
                                         ?date: System.DateTime,
                                         ?format: string,
                                         ?minimumDate: System.DateTime,
                                         ?maximumDate: System.DateTime,
                                         ?dateSelected: Xamarin.Forms.DateChangedEventArgs -> unit,
                                         ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                         ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                         ?margin: obj,
                                         ?gestureRecognizers: ViewElement list,
                                         ?anchorX: double,
                                         ?anchorY: double,
                                         ?backgroundColor: Xamarin.Forms.Color,
                                         ?heightRequest: double,
                                         ?inputTransparent: bool,
                                         ?isEnabled: bool,
                                         ?isVisible: bool,
                                         ?minimumHeightRequest: double,
                                         ?minimumWidthRequest: double,
                                         ?opacity: double,
                                         ?rotation: double,
                                         ?rotationX: double,
                                         ?rotationY: double,
                                         ?scale: double,
                                         ?style: Xamarin.Forms.Style,
                                         ?styleClass: obj,
                                         ?translationX: double,
                                         ?translationY: double,
                                         ?widthRequest: double,
                                         ?resources: (string * obj) list,
                                         ?styles: Xamarin.Forms.Style list,
                                         ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                         ?isTabStop: bool,
                                         ?scaleX: double,
                                         ?scaleY: double,
                                         ?tabIndex: int,
                                         ?childrenReordered: System.EventArgs -> unit,
                                         ?measureInvalidated: System.EventArgs -> unit,
                                         ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                         ?sizeChanged: System.EventArgs -> unit,
                                         ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                         ?classId: string,
                                         ?styleId: string,
                                         ?automationId: string,
                                         ?created: obj -> unit,
                                         ?ref: ViewRef) = 

        let attribCount = match date with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match format with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match minimumDate with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match maximumDate with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match dateSelected with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildView(attribCount, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match date with None -> () | Some v -> attribBuilder.Add(ViewAttributes.DateAttribKey, (v)) 
        match format with None -> () | Some v -> attribBuilder.Add(ViewAttributes.FormatAttribKey, (v)) 
        match minimumDate with None -> () | Some v -> attribBuilder.Add(ViewAttributes.MinimumDateAttribKey, (v)) 
        match maximumDate with None -> () | Some v -> attribBuilder.Add(ViewAttributes.MaximumDateAttribKey, (v)) 
        match dateSelected with None -> () | Some v -> attribBuilder.Add(ViewAttributes.DateSelectedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.DateChangedEventArgs>(fun _sender args -> f args))(v)) 
        attribBuilder

    static member val CreateFuncDatePicker : (unit -> Xamarin.Forms.DatePicker) = (fun () -> ViewBuilders.CreateDatePicker())

    static member CreateDatePicker () : Xamarin.Forms.DatePicker =
        upcast (new Xamarin.Forms.DatePicker())

    static member val UpdateFuncDatePicker =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.DatePicker) -> ViewBuilders.UpdateDatePicker (prevOpt, curr, target)) 

    static member UpdateDatePicker (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.DatePicker) = 
        // update the inherited View element
        let baseElement = (if ViewProto.ProtoView.IsNone then ViewProto.ProtoView <- Some (ViewBuilders.ConstructView())); ViewProto.ProtoView.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevDateOpt = ValueNone
        let mutable currDateOpt = ValueNone
        let mutable prevFormatOpt = ValueNone
        let mutable currFormatOpt = ValueNone
        let mutable prevMinimumDateOpt = ValueNone
        let mutable currMinimumDateOpt = ValueNone
        let mutable prevMaximumDateOpt = ValueNone
        let mutable currMaximumDateOpt = ValueNone
        let mutable prevDateSelectedOpt = ValueNone
        let mutable currDateSelectedOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.DateAttribKey.KeyValue then 
                currDateOpt <- ValueSome (kvp.Value :?> System.DateTime)
            if kvp.Key = ViewAttributes.FormatAttribKey.KeyValue then 
                currFormatOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.MinimumDateAttribKey.KeyValue then 
                currMinimumDateOpt <- ValueSome (kvp.Value :?> System.DateTime)
            if kvp.Key = ViewAttributes.MaximumDateAttribKey.KeyValue then 
                currMaximumDateOpt <- ValueSome (kvp.Value :?> System.DateTime)
            if kvp.Key = ViewAttributes.DateSelectedAttribKey.KeyValue then 
                currDateSelectedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.DateChangedEventArgs>)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.DateAttribKey.KeyValue then 
                    prevDateOpt <- ValueSome (kvp.Value :?> System.DateTime)
                if kvp.Key = ViewAttributes.FormatAttribKey.KeyValue then 
                    prevFormatOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.MinimumDateAttribKey.KeyValue then 
                    prevMinimumDateOpt <- ValueSome (kvp.Value :?> System.DateTime)
                if kvp.Key = ViewAttributes.MaximumDateAttribKey.KeyValue then 
                    prevMaximumDateOpt <- ValueSome (kvp.Value :?> System.DateTime)
                if kvp.Key = ViewAttributes.DateSelectedAttribKey.KeyValue then 
                    prevDateSelectedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.DateChangedEventArgs>)
        match prevDateOpt, currDateOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Date <-  currValue
        | ValueSome _, ValueNone -> target.Date <- Unchecked.defaultof<System.DateTime>
        | ValueNone, ValueNone -> ()
        match prevFormatOpt, currFormatOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Format <-  currValue
        | ValueSome _, ValueNone -> target.Format <- "d"
        | ValueNone, ValueNone -> ()
        match prevMinimumDateOpt, currMinimumDateOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.MinimumDate <-  currValue
        | ValueSome _, ValueNone -> target.MinimumDate <- new System.DateTime(1900, 1, 1)
        | ValueNone, ValueNone -> ()
        match prevMaximumDateOpt, currMaximumDateOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.MaximumDate <-  currValue
        | ValueSome _, ValueNone -> target.MaximumDate <- new System.DateTime(2100, 12, 31)
        | ValueNone, ValueNone -> ()
        match prevDateSelectedOpt, currDateSelectedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.DateSelected.RemoveHandler(prevValue); target.DateSelected.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.DateSelected.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.DateSelected.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()

    static member inline ConstructDatePicker(?date: System.DateTime,
                                             ?format: string,
                                             ?minimumDate: System.DateTime,
                                             ?maximumDate: System.DateTime,
                                             ?dateSelected: Xamarin.Forms.DateChangedEventArgs -> unit,
                                             ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                             ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                             ?margin: obj,
                                             ?gestureRecognizers: ViewElement list,
                                             ?anchorX: double,
                                             ?anchorY: double,
                                             ?backgroundColor: Xamarin.Forms.Color,
                                             ?heightRequest: double,
                                             ?inputTransparent: bool,
                                             ?isEnabled: bool,
                                             ?isVisible: bool,
                                             ?minimumHeightRequest: double,
                                             ?minimumWidthRequest: double,
                                             ?opacity: double,
                                             ?rotation: double,
                                             ?rotationX: double,
                                             ?rotationY: double,
                                             ?scale: double,
                                             ?style: Xamarin.Forms.Style,
                                             ?styleClass: obj,
                                             ?translationX: double,
                                             ?translationY: double,
                                             ?widthRequest: double,
                                             ?resources: (string * obj) list,
                                             ?styles: Xamarin.Forms.Style list,
                                             ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                             ?isTabStop: bool,
                                             ?scaleX: double,
                                             ?scaleY: double,
                                             ?tabIndex: int,
                                             ?childrenReordered: System.EventArgs -> unit,
                                             ?measureInvalidated: System.EventArgs -> unit,
                                             ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                             ?sizeChanged: System.EventArgs -> unit,
                                             ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                             ?classId: string,
                                             ?styleId: string,
                                             ?automationId: string,
                                             ?created: (Xamarin.Forms.DatePicker -> unit),
                                             ?ref: ViewRef<Xamarin.Forms.DatePicker>) = 

        let attribBuilder = ViewBuilders.BuildDatePicker(0,
                               ?date=date,
                               ?format=format,
                               ?minimumDate=minimumDate,
                               ?maximumDate=maximumDate,
                               ?dateSelected=dateSelected,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.DatePicker> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.DatePicker>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.DatePicker>(ViewBuilders.CreateFuncDatePicker, ViewBuilders.UpdateFuncDatePicker, attribBuilder)

    /// Builds the attributes for a Picker in the view
    static member inline BuildPicker(attribCount: int,
                                     ?itemsSource: seq<'T>,
                                     ?selectedIndex: int,
                                     ?title: string,
                                     ?textColor: Xamarin.Forms.Color,
                                     ?selectedIndexChanged: (int * 'T option) -> unit,
                                     ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                     ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                     ?margin: obj,
                                     ?gestureRecognizers: ViewElement list,
                                     ?anchorX: double,
                                     ?anchorY: double,
                                     ?backgroundColor: Xamarin.Forms.Color,
                                     ?heightRequest: double,
                                     ?inputTransparent: bool,
                                     ?isEnabled: bool,
                                     ?isVisible: bool,
                                     ?minimumHeightRequest: double,
                                     ?minimumWidthRequest: double,
                                     ?opacity: double,
                                     ?rotation: double,
                                     ?rotationX: double,
                                     ?rotationY: double,
                                     ?scale: double,
                                     ?style: Xamarin.Forms.Style,
                                     ?styleClass: obj,
                                     ?translationX: double,
                                     ?translationY: double,
                                     ?widthRequest: double,
                                     ?resources: (string * obj) list,
                                     ?styles: Xamarin.Forms.Style list,
                                     ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                     ?isTabStop: bool,
                                     ?scaleX: double,
                                     ?scaleY: double,
                                     ?tabIndex: int,
                                     ?childrenReordered: System.EventArgs -> unit,
                                     ?measureInvalidated: System.EventArgs -> unit,
                                     ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                     ?sizeChanged: System.EventArgs -> unit,
                                     ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                     ?classId: string,
                                     ?styleId: string,
                                     ?automationId: string,
                                     ?created: obj -> unit,
                                     ?ref: ViewRef) = 

        let attribCount = match itemsSource with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match selectedIndex with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match title with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match textColor with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match selectedIndexChanged with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildView(attribCount, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match itemsSource with None -> () | Some v -> attribBuilder.Add(ViewAttributes.PickerItemsSourceAttribKey, seqToIListUntyped(v)) 
        match selectedIndex with None -> () | Some v -> attribBuilder.Add(ViewAttributes.SelectedIndexAttribKey, (v)) 
        match title with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TitleAttribKey, (v)) 
        match textColor with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TextColorAttribKey, (v)) 
        match selectedIndexChanged with None -> () | Some v -> attribBuilder.Add(ViewAttributes.SelectedIndexChangedAttribKey, (fun f -> System.EventHandler(fun sender args -> let picker = (sender :?> Xamarin.Forms.Picker) in f (picker.SelectedIndex, (picker.SelectedItem |> Option.ofObj |> Option.map unbox<'T>))))(v)) 
        attribBuilder

    static member val CreateFuncPicker : (unit -> Xamarin.Forms.Picker) = (fun () -> ViewBuilders.CreatePicker())

    static member CreatePicker () : Xamarin.Forms.Picker =
        upcast (new Xamarin.Forms.Picker())

    static member val UpdateFuncPicker =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.Picker) -> ViewBuilders.UpdatePicker (prevOpt, curr, target)) 

    static member UpdatePicker (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.Picker) = 
        // update the inherited View element
        let baseElement = (if ViewProto.ProtoView.IsNone then ViewProto.ProtoView <- Some (ViewBuilders.ConstructView())); ViewProto.ProtoView.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevPickerItemsSourceOpt = ValueNone
        let mutable currPickerItemsSourceOpt = ValueNone
        let mutable prevSelectedIndexOpt = ValueNone
        let mutable currSelectedIndexOpt = ValueNone
        let mutable prevTitleOpt = ValueNone
        let mutable currTitleOpt = ValueNone
        let mutable prevTextColorOpt = ValueNone
        let mutable currTextColorOpt = ValueNone
        let mutable prevSelectedIndexChangedOpt = ValueNone
        let mutable currSelectedIndexChangedOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.PickerItemsSourceAttribKey.KeyValue then 
                currPickerItemsSourceOpt <- ValueSome (kvp.Value :?> System.Collections.IList)
            if kvp.Key = ViewAttributes.SelectedIndexAttribKey.KeyValue then 
                currSelectedIndexOpt <- ValueSome (kvp.Value :?> int)
            if kvp.Key = ViewAttributes.TitleAttribKey.KeyValue then 
                currTitleOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.TextColorAttribKey.KeyValue then 
                currTextColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
            if kvp.Key = ViewAttributes.SelectedIndexChangedAttribKey.KeyValue then 
                currSelectedIndexChangedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.PickerItemsSourceAttribKey.KeyValue then 
                    prevPickerItemsSourceOpt <- ValueSome (kvp.Value :?> System.Collections.IList)
                if kvp.Key = ViewAttributes.SelectedIndexAttribKey.KeyValue then 
                    prevSelectedIndexOpt <- ValueSome (kvp.Value :?> int)
                if kvp.Key = ViewAttributes.TitleAttribKey.KeyValue then 
                    prevTitleOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.TextColorAttribKey.KeyValue then 
                    prevTextColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
                if kvp.Key = ViewAttributes.SelectedIndexChangedAttribKey.KeyValue then 
                    prevSelectedIndexChangedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
        match prevPickerItemsSourceOpt, currPickerItemsSourceOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.ItemsSource <-  currValue
        | ValueSome _, ValueNone -> target.ItemsSource <- null
        | ValueNone, ValueNone -> ()
        match prevSelectedIndexOpt, currSelectedIndexOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.SelectedIndex <-  currValue
        | ValueSome _, ValueNone -> target.SelectedIndex <- 0
        | ValueNone, ValueNone -> ()
        match prevTitleOpt, currTitleOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Title <-  currValue
        | ValueSome _, ValueNone -> target.Title <- null
        | ValueNone, ValueNone -> ()
        match prevTextColorOpt, currTextColorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.TextColor <-  currValue
        | ValueSome _, ValueNone -> target.TextColor <- Xamarin.Forms.Color.Default
        | ValueNone, ValueNone -> ()
        match prevSelectedIndexChangedOpt, currSelectedIndexChangedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.SelectedIndexChanged.RemoveHandler(prevValue); target.SelectedIndexChanged.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.SelectedIndexChanged.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.SelectedIndexChanged.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()

    static member inline ConstructPicker(?itemsSource: seq<'T>,
                                         ?selectedIndex: int,
                                         ?title: string,
                                         ?textColor: Xamarin.Forms.Color,
                                         ?selectedIndexChanged: (int * 'T option) -> unit,
                                         ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                         ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                         ?margin: obj,
                                         ?gestureRecognizers: ViewElement list,
                                         ?anchorX: double,
                                         ?anchorY: double,
                                         ?backgroundColor: Xamarin.Forms.Color,
                                         ?heightRequest: double,
                                         ?inputTransparent: bool,
                                         ?isEnabled: bool,
                                         ?isVisible: bool,
                                         ?minimumHeightRequest: double,
                                         ?minimumWidthRequest: double,
                                         ?opacity: double,
                                         ?rotation: double,
                                         ?rotationX: double,
                                         ?rotationY: double,
                                         ?scale: double,
                                         ?style: Xamarin.Forms.Style,
                                         ?styleClass: obj,
                                         ?translationX: double,
                                         ?translationY: double,
                                         ?widthRequest: double,
                                         ?resources: (string * obj) list,
                                         ?styles: Xamarin.Forms.Style list,
                                         ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                         ?isTabStop: bool,
                                         ?scaleX: double,
                                         ?scaleY: double,
                                         ?tabIndex: int,
                                         ?childrenReordered: System.EventArgs -> unit,
                                         ?measureInvalidated: System.EventArgs -> unit,
                                         ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                         ?sizeChanged: System.EventArgs -> unit,
                                         ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                         ?classId: string,
                                         ?styleId: string,
                                         ?automationId: string,
                                         ?created: (Xamarin.Forms.Picker -> unit),
                                         ?ref: ViewRef<Xamarin.Forms.Picker>) = 

        let attribBuilder = ViewBuilders.BuildPicker(0,
                               ?itemsSource=itemsSource,
                               ?selectedIndex=selectedIndex,
                               ?title=title,
                               ?textColor=textColor,
                               ?selectedIndexChanged=selectedIndexChanged,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.Picker> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.Picker>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.Picker>(ViewBuilders.CreateFuncPicker, ViewBuilders.UpdateFuncPicker, attribBuilder)

    /// Builds the attributes for a Frame in the view
    static member inline BuildFrame(attribCount: int,
                                    ?borderColor: Xamarin.Forms.Color,
                                    ?cornerRadius: double,
                                    ?hasShadow: bool,
                                    ?content: ViewElement,
                                    ?isClippedToBounds: bool,
                                    ?padding: obj,
                                    ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                    ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                    ?margin: obj,
                                    ?gestureRecognizers: ViewElement list,
                                    ?anchorX: double,
                                    ?anchorY: double,
                                    ?backgroundColor: Xamarin.Forms.Color,
                                    ?heightRequest: double,
                                    ?inputTransparent: bool,
                                    ?isEnabled: bool,
                                    ?isVisible: bool,
                                    ?minimumHeightRequest: double,
                                    ?minimumWidthRequest: double,
                                    ?opacity: double,
                                    ?rotation: double,
                                    ?rotationX: double,
                                    ?rotationY: double,
                                    ?scale: double,
                                    ?style: Xamarin.Forms.Style,
                                    ?styleClass: obj,
                                    ?translationX: double,
                                    ?translationY: double,
                                    ?widthRequest: double,
                                    ?resources: (string * obj) list,
                                    ?styles: Xamarin.Forms.Style list,
                                    ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                    ?isTabStop: bool,
                                    ?scaleX: double,
                                    ?scaleY: double,
                                    ?tabIndex: int,
                                    ?childrenReordered: System.EventArgs -> unit,
                                    ?measureInvalidated: System.EventArgs -> unit,
                                    ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                    ?sizeChanged: System.EventArgs -> unit,
                                    ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                    ?classId: string,
                                    ?styleId: string,
                                    ?automationId: string,
                                    ?created: obj -> unit,
                                    ?ref: ViewRef) = 

        let attribCount = match borderColor with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match cornerRadius with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match hasShadow with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildContentView(attribCount, ?content=content, ?isClippedToBounds=isClippedToBounds, ?padding=padding, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match borderColor with None -> () | Some v -> attribBuilder.Add(ViewAttributes.BorderColorAttribKey, (v)) 
        match cornerRadius with None -> () | Some v -> attribBuilder.Add(ViewAttributes.FrameCornerRadiusAttribKey, single(v)) 
        match hasShadow with None -> () | Some v -> attribBuilder.Add(ViewAttributes.HasShadowAttribKey, (v)) 
        attribBuilder

    static member val CreateFuncFrame : (unit -> Xamarin.Forms.Frame) = (fun () -> ViewBuilders.CreateFrame())

    static member CreateFrame () : Xamarin.Forms.Frame =
        upcast (new Xamarin.Forms.Frame())

    static member val UpdateFuncFrame =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.Frame) -> ViewBuilders.UpdateFrame (prevOpt, curr, target)) 

    static member UpdateFrame (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.Frame) = 
        // update the inherited ContentView element
        let baseElement = (if ViewProto.ProtoContentView.IsNone then ViewProto.ProtoContentView <- Some (ViewBuilders.ConstructContentView())); ViewProto.ProtoContentView.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevBorderColorOpt = ValueNone
        let mutable currBorderColorOpt = ValueNone
        let mutable prevFrameCornerRadiusOpt = ValueNone
        let mutable currFrameCornerRadiusOpt = ValueNone
        let mutable prevHasShadowOpt = ValueNone
        let mutable currHasShadowOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.BorderColorAttribKey.KeyValue then 
                currBorderColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
            if kvp.Key = ViewAttributes.FrameCornerRadiusAttribKey.KeyValue then 
                currFrameCornerRadiusOpt <- ValueSome (kvp.Value :?> single)
            if kvp.Key = ViewAttributes.HasShadowAttribKey.KeyValue then 
                currHasShadowOpt <- ValueSome (kvp.Value :?> bool)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.BorderColorAttribKey.KeyValue then 
                    prevBorderColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
                if kvp.Key = ViewAttributes.FrameCornerRadiusAttribKey.KeyValue then 
                    prevFrameCornerRadiusOpt <- ValueSome (kvp.Value :?> single)
                if kvp.Key = ViewAttributes.HasShadowAttribKey.KeyValue then 
                    prevHasShadowOpt <- ValueSome (kvp.Value :?> bool)
        match prevBorderColorOpt, currBorderColorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.BorderColor <-  currValue
        | ValueSome _, ValueNone -> target.BorderColor <- Xamarin.Forms.Color.Default
        | ValueNone, ValueNone -> ()
        match prevFrameCornerRadiusOpt, currFrameCornerRadiusOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.CornerRadius <-  currValue
        | ValueSome _, ValueNone -> target.CornerRadius <- -1.0f
        | ValueNone, ValueNone -> ()
        match prevHasShadowOpt, currHasShadowOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.HasShadow <-  currValue
        | ValueSome _, ValueNone -> target.HasShadow <- true
        | ValueNone, ValueNone -> ()

    static member inline ConstructFrame(?borderColor: Xamarin.Forms.Color,
                                        ?cornerRadius: double,
                                        ?hasShadow: bool,
                                        ?content: ViewElement,
                                        ?isClippedToBounds: bool,
                                        ?padding: obj,
                                        ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                        ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                        ?margin: obj,
                                        ?gestureRecognizers: ViewElement list,
                                        ?anchorX: double,
                                        ?anchorY: double,
                                        ?backgroundColor: Xamarin.Forms.Color,
                                        ?heightRequest: double,
                                        ?inputTransparent: bool,
                                        ?isEnabled: bool,
                                        ?isVisible: bool,
                                        ?minimumHeightRequest: double,
                                        ?minimumWidthRequest: double,
                                        ?opacity: double,
                                        ?rotation: double,
                                        ?rotationX: double,
                                        ?rotationY: double,
                                        ?scale: double,
                                        ?style: Xamarin.Forms.Style,
                                        ?styleClass: obj,
                                        ?translationX: double,
                                        ?translationY: double,
                                        ?widthRequest: double,
                                        ?resources: (string * obj) list,
                                        ?styles: Xamarin.Forms.Style list,
                                        ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                        ?isTabStop: bool,
                                        ?scaleX: double,
                                        ?scaleY: double,
                                        ?tabIndex: int,
                                        ?childrenReordered: System.EventArgs -> unit,
                                        ?measureInvalidated: System.EventArgs -> unit,
                                        ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                        ?sizeChanged: System.EventArgs -> unit,
                                        ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                        ?classId: string,
                                        ?styleId: string,
                                        ?automationId: string,
                                        ?created: (Xamarin.Forms.Frame -> unit),
                                        ?ref: ViewRef<Xamarin.Forms.Frame>) = 

        let attribBuilder = ViewBuilders.BuildFrame(0,
                               ?borderColor=borderColor,
                               ?cornerRadius=cornerRadius,
                               ?hasShadow=hasShadow,
                               ?content=content,
                               ?isClippedToBounds=isClippedToBounds,
                               ?padding=padding,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.Frame> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.Frame>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.Frame>(ViewBuilders.CreateFuncFrame, ViewBuilders.UpdateFuncFrame, attribBuilder)

    /// Builds the attributes for a Image in the view
    static member inline BuildImage(attribCount: int,
                                    ?source: obj,
                                    ?aspect: Xamarin.Forms.Aspect,
                                    ?isOpaque: bool,
                                    ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                    ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                    ?margin: obj,
                                    ?gestureRecognizers: ViewElement list,
                                    ?anchorX: double,
                                    ?anchorY: double,
                                    ?backgroundColor: Xamarin.Forms.Color,
                                    ?heightRequest: double,
                                    ?inputTransparent: bool,
                                    ?isEnabled: bool,
                                    ?isVisible: bool,
                                    ?minimumHeightRequest: double,
                                    ?minimumWidthRequest: double,
                                    ?opacity: double,
                                    ?rotation: double,
                                    ?rotationX: double,
                                    ?rotationY: double,
                                    ?scale: double,
                                    ?style: Xamarin.Forms.Style,
                                    ?styleClass: obj,
                                    ?translationX: double,
                                    ?translationY: double,
                                    ?widthRequest: double,
                                    ?resources: (string * obj) list,
                                    ?styles: Xamarin.Forms.Style list,
                                    ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                    ?isTabStop: bool,
                                    ?scaleX: double,
                                    ?scaleY: double,
                                    ?tabIndex: int,
                                    ?childrenReordered: System.EventArgs -> unit,
                                    ?measureInvalidated: System.EventArgs -> unit,
                                    ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                    ?sizeChanged: System.EventArgs -> unit,
                                    ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                    ?classId: string,
                                    ?styleId: string,
                                    ?automationId: string,
                                    ?created: obj -> unit,
                                    ?ref: ViewRef) = 

        let attribCount = match source with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match aspect with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match isOpaque with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildView(attribCount, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match source with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ImageSourceAttribKey, (v)) 
        match aspect with None -> () | Some v -> attribBuilder.Add(ViewAttributes.AspectAttribKey, (v)) 
        match isOpaque with None -> () | Some v -> attribBuilder.Add(ViewAttributes.IsOpaqueAttribKey, (v)) 
        attribBuilder

    static member val CreateFuncImage : (unit -> Xamarin.Forms.Image) = (fun () -> ViewBuilders.CreateImage())

    static member CreateImage () : Xamarin.Forms.Image =
        upcast (new Xamarin.Forms.Image())

    static member val UpdateFuncImage =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.Image) -> ViewBuilders.UpdateImage (prevOpt, curr, target)) 

    static member UpdateImage (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.Image) = 
        // update the inherited View element
        let baseElement = (if ViewProto.ProtoView.IsNone then ViewProto.ProtoView <- Some (ViewBuilders.ConstructView())); ViewProto.ProtoView.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevImageSourceOpt = ValueNone
        let mutable currImageSourceOpt = ValueNone
        let mutable prevAspectOpt = ValueNone
        let mutable currAspectOpt = ValueNone
        let mutable prevIsOpaqueOpt = ValueNone
        let mutable currIsOpaqueOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.ImageSourceAttribKey.KeyValue then 
                currImageSourceOpt <- ValueSome (kvp.Value :?> obj)
            if kvp.Key = ViewAttributes.AspectAttribKey.KeyValue then 
                currAspectOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Aspect)
            if kvp.Key = ViewAttributes.IsOpaqueAttribKey.KeyValue then 
                currIsOpaqueOpt <- ValueSome (kvp.Value :?> bool)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.ImageSourceAttribKey.KeyValue then 
                    prevImageSourceOpt <- ValueSome (kvp.Value :?> obj)
                if kvp.Key = ViewAttributes.AspectAttribKey.KeyValue then 
                    prevAspectOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Aspect)
                if kvp.Key = ViewAttributes.IsOpaqueAttribKey.KeyValue then 
                    prevIsOpaqueOpt <- ValueSome (kvp.Value :?> bool)
        match prevImageSourceOpt, currImageSourceOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Source <- makeImageSource currValue
        | ValueSome _, ValueNone -> target.Source <- null
        | ValueNone, ValueNone -> ()
        match prevAspectOpt, currAspectOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Aspect <-  currValue
        | ValueSome _, ValueNone -> target.Aspect <- Xamarin.Forms.Aspect.AspectFit
        | ValueNone, ValueNone -> ()
        match prevIsOpaqueOpt, currIsOpaqueOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.IsOpaque <-  currValue
        | ValueSome _, ValueNone -> target.IsOpaque <- true
        | ValueNone, ValueNone -> ()

    static member inline ConstructImage(?source: obj,
                                        ?aspect: Xamarin.Forms.Aspect,
                                        ?isOpaque: bool,
                                        ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                        ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                        ?margin: obj,
                                        ?gestureRecognizers: ViewElement list,
                                        ?anchorX: double,
                                        ?anchorY: double,
                                        ?backgroundColor: Xamarin.Forms.Color,
                                        ?heightRequest: double,
                                        ?inputTransparent: bool,
                                        ?isEnabled: bool,
                                        ?isVisible: bool,
                                        ?minimumHeightRequest: double,
                                        ?minimumWidthRequest: double,
                                        ?opacity: double,
                                        ?rotation: double,
                                        ?rotationX: double,
                                        ?rotationY: double,
                                        ?scale: double,
                                        ?style: Xamarin.Forms.Style,
                                        ?styleClass: obj,
                                        ?translationX: double,
                                        ?translationY: double,
                                        ?widthRequest: double,
                                        ?resources: (string * obj) list,
                                        ?styles: Xamarin.Forms.Style list,
                                        ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                        ?isTabStop: bool,
                                        ?scaleX: double,
                                        ?scaleY: double,
                                        ?tabIndex: int,
                                        ?childrenReordered: System.EventArgs -> unit,
                                        ?measureInvalidated: System.EventArgs -> unit,
                                        ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                        ?sizeChanged: System.EventArgs -> unit,
                                        ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                        ?classId: string,
                                        ?styleId: string,
                                        ?automationId: string,
                                        ?created: (Xamarin.Forms.Image -> unit),
                                        ?ref: ViewRef<Xamarin.Forms.Image>) = 

        let attribBuilder = ViewBuilders.BuildImage(0,
                               ?source=source,
                               ?aspect=aspect,
                               ?isOpaque=isOpaque,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.Image> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.Image>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.Image>(ViewBuilders.CreateFuncImage, ViewBuilders.UpdateFuncImage, attribBuilder)

    /// Builds the attributes for a ImageButton in the view
    static member inline BuildImageButton(attribCount: int,
                                          ?command: unit -> unit,
                                          ?source: obj,
                                          ?aspect: Xamarin.Forms.Aspect,
                                          ?borderColor: Xamarin.Forms.Color,
                                          ?borderWidth: double,
                                          ?cornerRadius: int,
                                          ?isOpaque: bool,
                                          ?padding: Xamarin.Forms.Thickness,
                                          ?clicked: System.EventArgs -> unit,
                                          ?pressed: System.EventArgs -> unit,
                                          ?released: System.EventArgs -> unit,
                                          ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                          ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                          ?margin: obj,
                                          ?gestureRecognizers: ViewElement list,
                                          ?anchorX: double,
                                          ?anchorY: double,
                                          ?backgroundColor: Xamarin.Forms.Color,
                                          ?heightRequest: double,
                                          ?inputTransparent: bool,
                                          ?isEnabled: bool,
                                          ?isVisible: bool,
                                          ?minimumHeightRequest: double,
                                          ?minimumWidthRequest: double,
                                          ?opacity: double,
                                          ?rotation: double,
                                          ?rotationX: double,
                                          ?rotationY: double,
                                          ?scale: double,
                                          ?style: Xamarin.Forms.Style,
                                          ?styleClass: obj,
                                          ?translationX: double,
                                          ?translationY: double,
                                          ?widthRequest: double,
                                          ?resources: (string * obj) list,
                                          ?styles: Xamarin.Forms.Style list,
                                          ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                          ?isTabStop: bool,
                                          ?scaleX: double,
                                          ?scaleY: double,
                                          ?tabIndex: int,
                                          ?childrenReordered: System.EventArgs -> unit,
                                          ?measureInvalidated: System.EventArgs -> unit,
                                          ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                          ?sizeChanged: System.EventArgs -> unit,
                                          ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                          ?classId: string,
                                          ?styleId: string,
                                          ?automationId: string,
                                          ?created: obj -> unit,
                                          ?ref: ViewRef) = 

        let attribCount = match command with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match source with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match aspect with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match borderColor with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match borderWidth with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match cornerRadius with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match isOpaque with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match padding with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match clicked with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match pressed with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match released with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildView(attribCount, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match command with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ImageButtonCommandAttribKey, (v)) 
        match source with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ImageSourceAttribKey, (v)) 
        match aspect with None -> () | Some v -> attribBuilder.Add(ViewAttributes.AspectAttribKey, (v)) 
        match borderColor with None -> () | Some v -> attribBuilder.Add(ViewAttributes.BorderColorAttribKey, (v)) 
        match borderWidth with None -> () | Some v -> attribBuilder.Add(ViewAttributes.BorderWidthAttribKey, (v)) 
        match cornerRadius with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ImageButtonCornerRadiusAttribKey, (v)) 
        match isOpaque with None -> () | Some v -> attribBuilder.Add(ViewAttributes.IsOpaqueAttribKey, (v)) 
        match padding with None -> () | Some v -> attribBuilder.Add(ViewAttributes.PaddingAttribKey, (v)) 
        match clicked with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ClickedAttribKey, (fun f -> System.EventHandler(fun _sender args -> f args))(v)) 
        match pressed with None -> () | Some v -> attribBuilder.Add(ViewAttributes.PressedAttribKey, (fun f -> System.EventHandler(fun _sender args -> f args))(v)) 
        match released with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ReleasedAttribKey, (fun f -> System.EventHandler(fun _sender args -> f args))(v)) 
        attribBuilder

    static member val CreateFuncImageButton : (unit -> Xamarin.Forms.ImageButton) = (fun () -> ViewBuilders.CreateImageButton())

    static member CreateImageButton () : Xamarin.Forms.ImageButton =
        upcast (new Xamarin.Forms.ImageButton())

    static member val UpdateFuncImageButton =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.ImageButton) -> ViewBuilders.UpdateImageButton (prevOpt, curr, target)) 

    static member UpdateImageButton (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.ImageButton) = 
        // update the inherited View element
        let baseElement = (if ViewProto.ProtoView.IsNone then ViewProto.ProtoView <- Some (ViewBuilders.ConstructView())); ViewProto.ProtoView.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevImageButtonCommandOpt = ValueNone
        let mutable currImageButtonCommandOpt = ValueNone
        let mutable prevImageSourceOpt = ValueNone
        let mutable currImageSourceOpt = ValueNone
        let mutable prevAspectOpt = ValueNone
        let mutable currAspectOpt = ValueNone
        let mutable prevBorderColorOpt = ValueNone
        let mutable currBorderColorOpt = ValueNone
        let mutable prevBorderWidthOpt = ValueNone
        let mutable currBorderWidthOpt = ValueNone
        let mutable prevImageButtonCornerRadiusOpt = ValueNone
        let mutable currImageButtonCornerRadiusOpt = ValueNone
        let mutable prevIsOpaqueOpt = ValueNone
        let mutable currIsOpaqueOpt = ValueNone
        let mutable prevPaddingOpt = ValueNone
        let mutable currPaddingOpt = ValueNone
        let mutable prevClickedOpt = ValueNone
        let mutable currClickedOpt = ValueNone
        let mutable prevPressedOpt = ValueNone
        let mutable currPressedOpt = ValueNone
        let mutable prevReleasedOpt = ValueNone
        let mutable currReleasedOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.ImageButtonCommandAttribKey.KeyValue then 
                currImageButtonCommandOpt <- ValueSome (kvp.Value :?> unit -> unit)
            if kvp.Key = ViewAttributes.ImageSourceAttribKey.KeyValue then 
                currImageSourceOpt <- ValueSome (kvp.Value :?> obj)
            if kvp.Key = ViewAttributes.AspectAttribKey.KeyValue then 
                currAspectOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Aspect)
            if kvp.Key = ViewAttributes.BorderColorAttribKey.KeyValue then 
                currBorderColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
            if kvp.Key = ViewAttributes.BorderWidthAttribKey.KeyValue then 
                currBorderWidthOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.ImageButtonCornerRadiusAttribKey.KeyValue then 
                currImageButtonCornerRadiusOpt <- ValueSome (kvp.Value :?> int)
            if kvp.Key = ViewAttributes.IsOpaqueAttribKey.KeyValue then 
                currIsOpaqueOpt <- ValueSome (kvp.Value :?> bool)
            if kvp.Key = ViewAttributes.PaddingAttribKey.KeyValue then 
                currPaddingOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Thickness)
            if kvp.Key = ViewAttributes.ClickedAttribKey.KeyValue then 
                currClickedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
            if kvp.Key = ViewAttributes.PressedAttribKey.KeyValue then 
                currPressedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
            if kvp.Key = ViewAttributes.ReleasedAttribKey.KeyValue then 
                currReleasedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.ImageButtonCommandAttribKey.KeyValue then 
                    prevImageButtonCommandOpt <- ValueSome (kvp.Value :?> unit -> unit)
                if kvp.Key = ViewAttributes.ImageSourceAttribKey.KeyValue then 
                    prevImageSourceOpt <- ValueSome (kvp.Value :?> obj)
                if kvp.Key = ViewAttributes.AspectAttribKey.KeyValue then 
                    prevAspectOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Aspect)
                if kvp.Key = ViewAttributes.BorderColorAttribKey.KeyValue then 
                    prevBorderColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
                if kvp.Key = ViewAttributes.BorderWidthAttribKey.KeyValue then 
                    prevBorderWidthOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.ImageButtonCornerRadiusAttribKey.KeyValue then 
                    prevImageButtonCornerRadiusOpt <- ValueSome (kvp.Value :?> int)
                if kvp.Key = ViewAttributes.IsOpaqueAttribKey.KeyValue then 
                    prevIsOpaqueOpt <- ValueSome (kvp.Value :?> bool)
                if kvp.Key = ViewAttributes.PaddingAttribKey.KeyValue then 
                    prevPaddingOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Thickness)
                if kvp.Key = ViewAttributes.ClickedAttribKey.KeyValue then 
                    prevClickedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
                if kvp.Key = ViewAttributes.PressedAttribKey.KeyValue then 
                    prevPressedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
                if kvp.Key = ViewAttributes.ReleasedAttribKey.KeyValue then 
                    prevReleasedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
        (fun _ _ _ -> ()) prevImageButtonCommandOpt currImageButtonCommandOpt target
        match prevImageSourceOpt, currImageSourceOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Source <- makeImageSource currValue
        | ValueSome _, ValueNone -> target.Source <- null
        | ValueNone, ValueNone -> ()
        match prevAspectOpt, currAspectOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Aspect <-  currValue
        | ValueSome _, ValueNone -> target.Aspect <- Xamarin.Forms.Aspect.AspectFit
        | ValueNone, ValueNone -> ()
        match prevBorderColorOpt, currBorderColorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.BorderColor <-  currValue
        | ValueSome _, ValueNone -> target.BorderColor <- Xamarin.Forms.Color.Default
        | ValueNone, ValueNone -> ()
        match prevBorderWidthOpt, currBorderWidthOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.BorderWidth <-  currValue
        | ValueSome _, ValueNone -> target.BorderWidth <- -1.0
        | ValueNone, ValueNone -> ()
        match prevImageButtonCornerRadiusOpt, currImageButtonCornerRadiusOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.CornerRadius <-  currValue
        | ValueSome _, ValueNone -> target.CornerRadius <- -1
        | ValueNone, ValueNone -> ()
        match prevIsOpaqueOpt, currIsOpaqueOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.IsOpaque <-  currValue
        | ValueSome _, ValueNone -> target.IsOpaque <- true
        | ValueNone, ValueNone -> ()
        match prevPaddingOpt, currPaddingOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Padding <-  currValue
        | ValueSome _, ValueNone -> target.Padding <- Unchecked.defaultof<Xamarin.Forms.Thickness>
        | ValueNone, ValueNone -> ()
        match prevClickedOpt, currClickedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.Clicked.RemoveHandler(prevValue); target.Clicked.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.Clicked.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.Clicked.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevPressedOpt, currPressedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.Pressed.RemoveHandler(prevValue); target.Pressed.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.Pressed.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.Pressed.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevReleasedOpt, currReleasedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.Released.RemoveHandler(prevValue); target.Released.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.Released.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.Released.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()

    static member inline ConstructImageButton(?command: unit -> unit,
                                              ?source: obj,
                                              ?aspect: Xamarin.Forms.Aspect,
                                              ?borderColor: Xamarin.Forms.Color,
                                              ?borderWidth: double,
                                              ?cornerRadius: int,
                                              ?isOpaque: bool,
                                              ?padding: Xamarin.Forms.Thickness,
                                              ?clicked: System.EventArgs -> unit,
                                              ?pressed: System.EventArgs -> unit,
                                              ?released: System.EventArgs -> unit,
                                              ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                              ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                              ?margin: obj,
                                              ?gestureRecognizers: ViewElement list,
                                              ?anchorX: double,
                                              ?anchorY: double,
                                              ?backgroundColor: Xamarin.Forms.Color,
                                              ?heightRequest: double,
                                              ?inputTransparent: bool,
                                              ?isEnabled: bool,
                                              ?isVisible: bool,
                                              ?minimumHeightRequest: double,
                                              ?minimumWidthRequest: double,
                                              ?opacity: double,
                                              ?rotation: double,
                                              ?rotationX: double,
                                              ?rotationY: double,
                                              ?scale: double,
                                              ?style: Xamarin.Forms.Style,
                                              ?styleClass: obj,
                                              ?translationX: double,
                                              ?translationY: double,
                                              ?widthRequest: double,
                                              ?resources: (string * obj) list,
                                              ?styles: Xamarin.Forms.Style list,
                                              ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                              ?isTabStop: bool,
                                              ?scaleX: double,
                                              ?scaleY: double,
                                              ?tabIndex: int,
                                              ?childrenReordered: System.EventArgs -> unit,
                                              ?measureInvalidated: System.EventArgs -> unit,
                                              ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                              ?sizeChanged: System.EventArgs -> unit,
                                              ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                              ?classId: string,
                                              ?styleId: string,
                                              ?automationId: string,
                                              ?created: (Xamarin.Forms.ImageButton -> unit),
                                              ?ref: ViewRef<Xamarin.Forms.ImageButton>) = 

        let attribBuilder = ViewBuilders.BuildImageButton(0,
                               ?command=command,
                               ?source=source,
                               ?aspect=aspect,
                               ?borderColor=borderColor,
                               ?borderWidth=borderWidth,
                               ?cornerRadius=cornerRadius,
                               ?isOpaque=isOpaque,
                               ?padding=padding,
                               ?clicked=clicked,
                               ?pressed=pressed,
                               ?released=released,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.ImageButton> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.ImageButton>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.ImageButton>(ViewBuilders.CreateFuncImageButton, ViewBuilders.UpdateFuncImageButton, attribBuilder)

    /// Builds the attributes for a InputView in the view
    static member inline BuildInputView(attribCount: int,
                                        ?keyboard: Xamarin.Forms.Keyboard,
                                        ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                        ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                        ?margin: obj,
                                        ?gestureRecognizers: ViewElement list,
                                        ?anchorX: double,
                                        ?anchorY: double,
                                        ?backgroundColor: Xamarin.Forms.Color,
                                        ?heightRequest: double,
                                        ?inputTransparent: bool,
                                        ?isEnabled: bool,
                                        ?isVisible: bool,
                                        ?minimumHeightRequest: double,
                                        ?minimumWidthRequest: double,
                                        ?opacity: double,
                                        ?rotation: double,
                                        ?rotationX: double,
                                        ?rotationY: double,
                                        ?scale: double,
                                        ?style: Xamarin.Forms.Style,
                                        ?styleClass: obj,
                                        ?translationX: double,
                                        ?translationY: double,
                                        ?widthRequest: double,
                                        ?resources: (string * obj) list,
                                        ?styles: Xamarin.Forms.Style list,
                                        ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                        ?isTabStop: bool,
                                        ?scaleX: double,
                                        ?scaleY: double,
                                        ?tabIndex: int,
                                        ?childrenReordered: System.EventArgs -> unit,
                                        ?measureInvalidated: System.EventArgs -> unit,
                                        ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                        ?sizeChanged: System.EventArgs -> unit,
                                        ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                        ?classId: string,
                                        ?styleId: string,
                                        ?automationId: string,
                                        ?created: obj -> unit,
                                        ?ref: ViewRef) = 

        let attribCount = match keyboard with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildView(attribCount, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match keyboard with None -> () | Some v -> attribBuilder.Add(ViewAttributes.KeyboardAttribKey, (v)) 
        attribBuilder

    static member val CreateFuncInputView : (unit -> Xamarin.Forms.InputView) = (fun () -> ViewBuilders.CreateInputView())

    static member CreateInputView () : Xamarin.Forms.InputView =
        failwith "can't create Xamarin.Forms.InputView"

    static member val UpdateFuncInputView =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.InputView) -> ViewBuilders.UpdateInputView (prevOpt, curr, target)) 

    static member UpdateInputView (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.InputView) = 
        // update the inherited View element
        let baseElement = (if ViewProto.ProtoView.IsNone then ViewProto.ProtoView <- Some (ViewBuilders.ConstructView())); ViewProto.ProtoView.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevKeyboardOpt = ValueNone
        let mutable currKeyboardOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.KeyboardAttribKey.KeyValue then 
                currKeyboardOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Keyboard)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.KeyboardAttribKey.KeyValue then 
                    prevKeyboardOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Keyboard)
        match prevKeyboardOpt, currKeyboardOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Keyboard <-  currValue
        | ValueSome _, ValueNone -> target.Keyboard <- Xamarin.Forms.Keyboard.Default
        | ValueNone, ValueNone -> ()

    static member inline ConstructInputView(?keyboard: Xamarin.Forms.Keyboard,
                                            ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                            ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                            ?margin: obj,
                                            ?gestureRecognizers: ViewElement list,
                                            ?anchorX: double,
                                            ?anchorY: double,
                                            ?backgroundColor: Xamarin.Forms.Color,
                                            ?heightRequest: double,
                                            ?inputTransparent: bool,
                                            ?isEnabled: bool,
                                            ?isVisible: bool,
                                            ?minimumHeightRequest: double,
                                            ?minimumWidthRequest: double,
                                            ?opacity: double,
                                            ?rotation: double,
                                            ?rotationX: double,
                                            ?rotationY: double,
                                            ?scale: double,
                                            ?style: Xamarin.Forms.Style,
                                            ?styleClass: obj,
                                            ?translationX: double,
                                            ?translationY: double,
                                            ?widthRequest: double,
                                            ?resources: (string * obj) list,
                                            ?styles: Xamarin.Forms.Style list,
                                            ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                            ?isTabStop: bool,
                                            ?scaleX: double,
                                            ?scaleY: double,
                                            ?tabIndex: int,
                                            ?childrenReordered: System.EventArgs -> unit,
                                            ?measureInvalidated: System.EventArgs -> unit,
                                            ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                            ?sizeChanged: System.EventArgs -> unit,
                                            ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                            ?classId: string,
                                            ?styleId: string,
                                            ?automationId: string,
                                            ?created: (Xamarin.Forms.InputView -> unit),
                                            ?ref: ViewRef<Xamarin.Forms.InputView>) = 

        let attribBuilder = ViewBuilders.BuildInputView(0,
                               ?keyboard=keyboard,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.InputView> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.InputView>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.InputView>(ViewBuilders.CreateFuncInputView, ViewBuilders.UpdateFuncInputView, attribBuilder)

    /// Builds the attributes for a Editor in the view
    static member inline BuildEditor(attribCount: int,
                                     ?text: string,
                                     ?fontSize: obj,
                                     ?fontFamily: string,
                                     ?fontAttributes: Xamarin.Forms.FontAttributes,
                                     ?textColor: Xamarin.Forms.Color,
                                     ?completed: string -> unit,
                                     ?textChanged: Xamarin.Forms.TextChangedEventArgs -> unit,
                                     ?autoSize: Xamarin.Forms.EditorAutoSizeOption,
                                     ?placeholder: string,
                                     ?placeholderColor: Xamarin.Forms.Color,
                                     ?keyboard: Xamarin.Forms.Keyboard,
                                     ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                     ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                     ?margin: obj,
                                     ?gestureRecognizers: ViewElement list,
                                     ?anchorX: double,
                                     ?anchorY: double,
                                     ?backgroundColor: Xamarin.Forms.Color,
                                     ?heightRequest: double,
                                     ?inputTransparent: bool,
                                     ?isEnabled: bool,
                                     ?isVisible: bool,
                                     ?minimumHeightRequest: double,
                                     ?minimumWidthRequest: double,
                                     ?opacity: double,
                                     ?rotation: double,
                                     ?rotationX: double,
                                     ?rotationY: double,
                                     ?scale: double,
                                     ?style: Xamarin.Forms.Style,
                                     ?styleClass: obj,
                                     ?translationX: double,
                                     ?translationY: double,
                                     ?widthRequest: double,
                                     ?resources: (string * obj) list,
                                     ?styles: Xamarin.Forms.Style list,
                                     ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                     ?isTabStop: bool,
                                     ?scaleX: double,
                                     ?scaleY: double,
                                     ?tabIndex: int,
                                     ?childrenReordered: System.EventArgs -> unit,
                                     ?measureInvalidated: System.EventArgs -> unit,
                                     ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                     ?sizeChanged: System.EventArgs -> unit,
                                     ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                     ?classId: string,
                                     ?styleId: string,
                                     ?automationId: string,
                                     ?created: obj -> unit,
                                     ?ref: ViewRef) = 

        let attribCount = match text with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match fontSize with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match fontFamily with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match fontAttributes with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match textColor with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match completed with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match textChanged with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match autoSize with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match placeholder with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match placeholderColor with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildInputView(attribCount, ?keyboard=keyboard, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match text with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TextAttribKey, (v)) 
        match fontSize with None -> () | Some v -> attribBuilder.Add(ViewAttributes.FontSizeAttribKey, makeFontSize(v)) 
        match fontFamily with None -> () | Some v -> attribBuilder.Add(ViewAttributes.FontFamilyAttribKey, (v)) 
        match fontAttributes with None -> () | Some v -> attribBuilder.Add(ViewAttributes.FontAttributesAttribKey, (v)) 
        match textColor with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TextColorAttribKey, (v)) 
        match completed with None -> () | Some v -> attribBuilder.Add(ViewAttributes.EditorCompletedAttribKey, (fun f -> System.EventHandler(fun sender args -> f (sender :?> Xamarin.Forms.Editor).Text))(v)) 
        match textChanged with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TextChangedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.TextChangedEventArgs>(fun _sender args -> f args))(v)) 
        match autoSize with None -> () | Some v -> attribBuilder.Add(ViewAttributes.AutoSizeAttribKey, (v)) 
        match placeholder with None -> () | Some v -> attribBuilder.Add(ViewAttributes.PlaceholderAttribKey, (v)) 
        match placeholderColor with None -> () | Some v -> attribBuilder.Add(ViewAttributes.PlaceholderColorAttribKey, (v)) 
        attribBuilder

    static member val CreateFuncEditor : (unit -> Xamarin.Forms.Editor) = (fun () -> ViewBuilders.CreateEditor())

    static member CreateEditor () : Xamarin.Forms.Editor =
        upcast (new Xamarin.Forms.Editor())

    static member val UpdateFuncEditor =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.Editor) -> ViewBuilders.UpdateEditor (prevOpt, curr, target)) 

    static member UpdateEditor (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.Editor) = 
        // update the inherited InputView element
        let baseElement = (if ViewProto.ProtoInputView.IsNone then ViewProto.ProtoInputView <- Some (ViewBuilders.ConstructInputView())); ViewProto.ProtoInputView.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevTextOpt = ValueNone
        let mutable currTextOpt = ValueNone
        let mutable prevFontSizeOpt = ValueNone
        let mutable currFontSizeOpt = ValueNone
        let mutable prevFontFamilyOpt = ValueNone
        let mutable currFontFamilyOpt = ValueNone
        let mutable prevFontAttributesOpt = ValueNone
        let mutable currFontAttributesOpt = ValueNone
        let mutable prevTextColorOpt = ValueNone
        let mutable currTextColorOpt = ValueNone
        let mutable prevEditorCompletedOpt = ValueNone
        let mutable currEditorCompletedOpt = ValueNone
        let mutable prevTextChangedOpt = ValueNone
        let mutable currTextChangedOpt = ValueNone
        let mutable prevAutoSizeOpt = ValueNone
        let mutable currAutoSizeOpt = ValueNone
        let mutable prevPlaceholderOpt = ValueNone
        let mutable currPlaceholderOpt = ValueNone
        let mutable prevPlaceholderColorOpt = ValueNone
        let mutable currPlaceholderColorOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.TextAttribKey.KeyValue then 
                currTextOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.FontSizeAttribKey.KeyValue then 
                currFontSizeOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.FontFamilyAttribKey.KeyValue then 
                currFontFamilyOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.FontAttributesAttribKey.KeyValue then 
                currFontAttributesOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.FontAttributes)
            if kvp.Key = ViewAttributes.TextColorAttribKey.KeyValue then 
                currTextColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
            if kvp.Key = ViewAttributes.EditorCompletedAttribKey.KeyValue then 
                currEditorCompletedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
            if kvp.Key = ViewAttributes.TextChangedAttribKey.KeyValue then 
                currTextChangedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.TextChangedEventArgs>)
            if kvp.Key = ViewAttributes.AutoSizeAttribKey.KeyValue then 
                currAutoSizeOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.EditorAutoSizeOption)
            if kvp.Key = ViewAttributes.PlaceholderAttribKey.KeyValue then 
                currPlaceholderOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.PlaceholderColorAttribKey.KeyValue then 
                currPlaceholderColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.TextAttribKey.KeyValue then 
                    prevTextOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.FontSizeAttribKey.KeyValue then 
                    prevFontSizeOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.FontFamilyAttribKey.KeyValue then 
                    prevFontFamilyOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.FontAttributesAttribKey.KeyValue then 
                    prevFontAttributesOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.FontAttributes)
                if kvp.Key = ViewAttributes.TextColorAttribKey.KeyValue then 
                    prevTextColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
                if kvp.Key = ViewAttributes.EditorCompletedAttribKey.KeyValue then 
                    prevEditorCompletedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
                if kvp.Key = ViewAttributes.TextChangedAttribKey.KeyValue then 
                    prevTextChangedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.TextChangedEventArgs>)
                if kvp.Key = ViewAttributes.AutoSizeAttribKey.KeyValue then 
                    prevAutoSizeOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.EditorAutoSizeOption)
                if kvp.Key = ViewAttributes.PlaceholderAttribKey.KeyValue then 
                    prevPlaceholderOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.PlaceholderColorAttribKey.KeyValue then 
                    prevPlaceholderColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
        match prevTextOpt, currTextOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Text <-  currValue
        | ValueSome _, ValueNone -> target.Text <- null
        | ValueNone, ValueNone -> ()
        match prevFontSizeOpt, currFontSizeOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.FontSize <-  currValue
        | ValueSome _, ValueNone -> target.FontSize <- -1.0
        | ValueNone, ValueNone -> ()
        match prevFontFamilyOpt, currFontFamilyOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.FontFamily <-  currValue
        | ValueSome _, ValueNone -> target.FontFamily <- null
        | ValueNone, ValueNone -> ()
        match prevFontAttributesOpt, currFontAttributesOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.FontAttributes <-  currValue
        | ValueSome _, ValueNone -> target.FontAttributes <- Xamarin.Forms.FontAttributes.None
        | ValueNone, ValueNone -> ()
        match prevTextColorOpt, currTextColorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.TextColor <-  currValue
        | ValueSome _, ValueNone -> target.TextColor <- Xamarin.Forms.Color.Default
        | ValueNone, ValueNone -> ()
        match prevEditorCompletedOpt, currEditorCompletedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.Completed.RemoveHandler(prevValue); target.Completed.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.Completed.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.Completed.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevTextChangedOpt, currTextChangedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.TextChanged.RemoveHandler(prevValue); target.TextChanged.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.TextChanged.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.TextChanged.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevAutoSizeOpt, currAutoSizeOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.AutoSize <-  currValue
        | ValueSome _, ValueNone -> target.AutoSize <- Xamarin.Forms.EditorAutoSizeOption.Disabled
        | ValueNone, ValueNone -> ()
        match prevPlaceholderOpt, currPlaceholderOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Placeholder <-  currValue
        | ValueSome _, ValueNone -> target.Placeholder <- null
        | ValueNone, ValueNone -> ()
        match prevPlaceholderColorOpt, currPlaceholderColorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.PlaceholderColor <-  currValue
        | ValueSome _, ValueNone -> target.PlaceholderColor <- Xamarin.Forms.Color.Default
        | ValueNone, ValueNone -> ()

    static member inline ConstructEditor(?text: string,
                                         ?fontSize: obj,
                                         ?fontFamily: string,
                                         ?fontAttributes: Xamarin.Forms.FontAttributes,
                                         ?textColor: Xamarin.Forms.Color,
                                         ?completed: string -> unit,
                                         ?textChanged: Xamarin.Forms.TextChangedEventArgs -> unit,
                                         ?autoSize: Xamarin.Forms.EditorAutoSizeOption,
                                         ?placeholder: string,
                                         ?placeholderColor: Xamarin.Forms.Color,
                                         ?keyboard: Xamarin.Forms.Keyboard,
                                         ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                         ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                         ?margin: obj,
                                         ?gestureRecognizers: ViewElement list,
                                         ?anchorX: double,
                                         ?anchorY: double,
                                         ?backgroundColor: Xamarin.Forms.Color,
                                         ?heightRequest: double,
                                         ?inputTransparent: bool,
                                         ?isEnabled: bool,
                                         ?isVisible: bool,
                                         ?minimumHeightRequest: double,
                                         ?minimumWidthRequest: double,
                                         ?opacity: double,
                                         ?rotation: double,
                                         ?rotationX: double,
                                         ?rotationY: double,
                                         ?scale: double,
                                         ?style: Xamarin.Forms.Style,
                                         ?styleClass: obj,
                                         ?translationX: double,
                                         ?translationY: double,
                                         ?widthRequest: double,
                                         ?resources: (string * obj) list,
                                         ?styles: Xamarin.Forms.Style list,
                                         ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                         ?isTabStop: bool,
                                         ?scaleX: double,
                                         ?scaleY: double,
                                         ?tabIndex: int,
                                         ?childrenReordered: System.EventArgs -> unit,
                                         ?measureInvalidated: System.EventArgs -> unit,
                                         ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                         ?sizeChanged: System.EventArgs -> unit,
                                         ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                         ?classId: string,
                                         ?styleId: string,
                                         ?automationId: string,
                                         ?created: (Xamarin.Forms.Editor -> unit),
                                         ?ref: ViewRef<Xamarin.Forms.Editor>) = 

        let attribBuilder = ViewBuilders.BuildEditor(0,
                               ?text=text,
                               ?fontSize=fontSize,
                               ?fontFamily=fontFamily,
                               ?fontAttributes=fontAttributes,
                               ?textColor=textColor,
                               ?completed=completed,
                               ?textChanged=textChanged,
                               ?autoSize=autoSize,
                               ?placeholder=placeholder,
                               ?placeholderColor=placeholderColor,
                               ?keyboard=keyboard,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.Editor> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.Editor>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.Editor>(ViewBuilders.CreateFuncEditor, ViewBuilders.UpdateFuncEditor, attribBuilder)

    /// Builds the attributes for a Entry in the view
    static member inline BuildEntry(attribCount: int,
                                    ?text: string,
                                    ?placeholder: string,
                                    ?horizontalTextAlignment: Xamarin.Forms.TextAlignment,
                                    ?fontSize: obj,
                                    ?fontFamily: string,
                                    ?fontAttributes: Xamarin.Forms.FontAttributes,
                                    ?textColor: Xamarin.Forms.Color,
                                    ?placeholderColor: Xamarin.Forms.Color,
                                    ?isPassword: bool,
                                    ?completed: string -> unit,
                                    ?textChanged: Xamarin.Forms.TextChangedEventArgs -> unit,
                                    ?isTextPredictionEnabled: bool,
                                    ?returnType: Xamarin.Forms.ReturnType,
                                    ?returnCommand: unit -> unit,
                                    ?cursorPosition: int,
                                    ?selectionLength: int,
                                    ?keyboard: Xamarin.Forms.Keyboard,
                                    ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                    ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                    ?margin: obj,
                                    ?gestureRecognizers: ViewElement list,
                                    ?anchorX: double,
                                    ?anchorY: double,
                                    ?backgroundColor: Xamarin.Forms.Color,
                                    ?heightRequest: double,
                                    ?inputTransparent: bool,
                                    ?isEnabled: bool,
                                    ?isVisible: bool,
                                    ?minimumHeightRequest: double,
                                    ?minimumWidthRequest: double,
                                    ?opacity: double,
                                    ?rotation: double,
                                    ?rotationX: double,
                                    ?rotationY: double,
                                    ?scale: double,
                                    ?style: Xamarin.Forms.Style,
                                    ?styleClass: obj,
                                    ?translationX: double,
                                    ?translationY: double,
                                    ?widthRequest: double,
                                    ?resources: (string * obj) list,
                                    ?styles: Xamarin.Forms.Style list,
                                    ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                    ?isTabStop: bool,
                                    ?scaleX: double,
                                    ?scaleY: double,
                                    ?tabIndex: int,
                                    ?childrenReordered: System.EventArgs -> unit,
                                    ?measureInvalidated: System.EventArgs -> unit,
                                    ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                    ?sizeChanged: System.EventArgs -> unit,
                                    ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                    ?classId: string,
                                    ?styleId: string,
                                    ?automationId: string,
                                    ?created: obj -> unit,
                                    ?ref: ViewRef) = 

        let attribCount = match text with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match placeholder with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match horizontalTextAlignment with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match fontSize with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match fontFamily with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match fontAttributes with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match textColor with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match placeholderColor with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match isPassword with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match completed with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match textChanged with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match isTextPredictionEnabled with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match returnType with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match returnCommand with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match cursorPosition with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match selectionLength with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildInputView(attribCount, ?keyboard=keyboard, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match text with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TextAttribKey, (v)) 
        match placeholder with None -> () | Some v -> attribBuilder.Add(ViewAttributes.PlaceholderAttribKey, (v)) 
        match horizontalTextAlignment with None -> () | Some v -> attribBuilder.Add(ViewAttributes.HorizontalTextAlignmentAttribKey, (v)) 
        match fontSize with None -> () | Some v -> attribBuilder.Add(ViewAttributes.FontSizeAttribKey, makeFontSize(v)) 
        match fontFamily with None -> () | Some v -> attribBuilder.Add(ViewAttributes.FontFamilyAttribKey, (v)) 
        match fontAttributes with None -> () | Some v -> attribBuilder.Add(ViewAttributes.FontAttributesAttribKey, (v)) 
        match textColor with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TextColorAttribKey, (v)) 
        match placeholderColor with None -> () | Some v -> attribBuilder.Add(ViewAttributes.PlaceholderColorAttribKey, (v)) 
        match isPassword with None -> () | Some v -> attribBuilder.Add(ViewAttributes.IsPasswordAttribKey, (v)) 
        match completed with None -> () | Some v -> attribBuilder.Add(ViewAttributes.EntryCompletedAttribKey, (fun f -> System.EventHandler(fun sender args -> f (sender :?> Xamarin.Forms.Entry).Text))(v)) 
        match textChanged with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TextChangedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.TextChangedEventArgs>(fun _sender args -> f args))(v)) 
        match isTextPredictionEnabled with None -> () | Some v -> attribBuilder.Add(ViewAttributes.IsTextPredictionEnabledAttribKey, (v)) 
        match returnType with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ReturnTypeAttribKey, (v)) 
        match returnCommand with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ReturnCommandAttribKey, makeCommand(v)) 
        match cursorPosition with None -> () | Some v -> attribBuilder.Add(ViewAttributes.CursorPositionAttribKey, (v)) 
        match selectionLength with None -> () | Some v -> attribBuilder.Add(ViewAttributes.SelectionLengthAttribKey, (v)) 
        attribBuilder

    static member val CreateFuncEntry : (unit -> Xamarin.Forms.Entry) = (fun () -> ViewBuilders.CreateEntry())

    static member CreateEntry () : Xamarin.Forms.Entry =
        upcast (new Xamarin.Forms.Entry())

    static member val UpdateFuncEntry =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.Entry) -> ViewBuilders.UpdateEntry (prevOpt, curr, target)) 

    static member UpdateEntry (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.Entry) = 
        // update the inherited InputView element
        let baseElement = (if ViewProto.ProtoInputView.IsNone then ViewProto.ProtoInputView <- Some (ViewBuilders.ConstructInputView())); ViewProto.ProtoInputView.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevTextOpt = ValueNone
        let mutable currTextOpt = ValueNone
        let mutable prevPlaceholderOpt = ValueNone
        let mutable currPlaceholderOpt = ValueNone
        let mutable prevHorizontalTextAlignmentOpt = ValueNone
        let mutable currHorizontalTextAlignmentOpt = ValueNone
        let mutable prevFontSizeOpt = ValueNone
        let mutable currFontSizeOpt = ValueNone
        let mutable prevFontFamilyOpt = ValueNone
        let mutable currFontFamilyOpt = ValueNone
        let mutable prevFontAttributesOpt = ValueNone
        let mutable currFontAttributesOpt = ValueNone
        let mutable prevTextColorOpt = ValueNone
        let mutable currTextColorOpt = ValueNone
        let mutable prevPlaceholderColorOpt = ValueNone
        let mutable currPlaceholderColorOpt = ValueNone
        let mutable prevIsPasswordOpt = ValueNone
        let mutable currIsPasswordOpt = ValueNone
        let mutable prevEntryCompletedOpt = ValueNone
        let mutable currEntryCompletedOpt = ValueNone
        let mutable prevTextChangedOpt = ValueNone
        let mutable currTextChangedOpt = ValueNone
        let mutable prevIsTextPredictionEnabledOpt = ValueNone
        let mutable currIsTextPredictionEnabledOpt = ValueNone
        let mutable prevReturnTypeOpt = ValueNone
        let mutable currReturnTypeOpt = ValueNone
        let mutable prevReturnCommandOpt = ValueNone
        let mutable currReturnCommandOpt = ValueNone
        let mutable prevCursorPositionOpt = ValueNone
        let mutable currCursorPositionOpt = ValueNone
        let mutable prevSelectionLengthOpt = ValueNone
        let mutable currSelectionLengthOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.TextAttribKey.KeyValue then 
                currTextOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.PlaceholderAttribKey.KeyValue then 
                currPlaceholderOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.HorizontalTextAlignmentAttribKey.KeyValue then 
                currHorizontalTextAlignmentOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.TextAlignment)
            if kvp.Key = ViewAttributes.FontSizeAttribKey.KeyValue then 
                currFontSizeOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.FontFamilyAttribKey.KeyValue then 
                currFontFamilyOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.FontAttributesAttribKey.KeyValue then 
                currFontAttributesOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.FontAttributes)
            if kvp.Key = ViewAttributes.TextColorAttribKey.KeyValue then 
                currTextColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
            if kvp.Key = ViewAttributes.PlaceholderColorAttribKey.KeyValue then 
                currPlaceholderColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
            if kvp.Key = ViewAttributes.IsPasswordAttribKey.KeyValue then 
                currIsPasswordOpt <- ValueSome (kvp.Value :?> bool)
            if kvp.Key = ViewAttributes.EntryCompletedAttribKey.KeyValue then 
                currEntryCompletedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
            if kvp.Key = ViewAttributes.TextChangedAttribKey.KeyValue then 
                currTextChangedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.TextChangedEventArgs>)
            if kvp.Key = ViewAttributes.IsTextPredictionEnabledAttribKey.KeyValue then 
                currIsTextPredictionEnabledOpt <- ValueSome (kvp.Value :?> bool)
            if kvp.Key = ViewAttributes.ReturnTypeAttribKey.KeyValue then 
                currReturnTypeOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.ReturnType)
            if kvp.Key = ViewAttributes.ReturnCommandAttribKey.KeyValue then 
                currReturnCommandOpt <- ValueSome (kvp.Value :?> System.Windows.Input.ICommand)
            if kvp.Key = ViewAttributes.CursorPositionAttribKey.KeyValue then 
                currCursorPositionOpt <- ValueSome (kvp.Value :?> int)
            if kvp.Key = ViewAttributes.SelectionLengthAttribKey.KeyValue then 
                currSelectionLengthOpt <- ValueSome (kvp.Value :?> int)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.TextAttribKey.KeyValue then 
                    prevTextOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.PlaceholderAttribKey.KeyValue then 
                    prevPlaceholderOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.HorizontalTextAlignmentAttribKey.KeyValue then 
                    prevHorizontalTextAlignmentOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.TextAlignment)
                if kvp.Key = ViewAttributes.FontSizeAttribKey.KeyValue then 
                    prevFontSizeOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.FontFamilyAttribKey.KeyValue then 
                    prevFontFamilyOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.FontAttributesAttribKey.KeyValue then 
                    prevFontAttributesOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.FontAttributes)
                if kvp.Key = ViewAttributes.TextColorAttribKey.KeyValue then 
                    prevTextColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
                if kvp.Key = ViewAttributes.PlaceholderColorAttribKey.KeyValue then 
                    prevPlaceholderColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
                if kvp.Key = ViewAttributes.IsPasswordAttribKey.KeyValue then 
                    prevIsPasswordOpt <- ValueSome (kvp.Value :?> bool)
                if kvp.Key = ViewAttributes.EntryCompletedAttribKey.KeyValue then 
                    prevEntryCompletedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
                if kvp.Key = ViewAttributes.TextChangedAttribKey.KeyValue then 
                    prevTextChangedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.TextChangedEventArgs>)
                if kvp.Key = ViewAttributes.IsTextPredictionEnabledAttribKey.KeyValue then 
                    prevIsTextPredictionEnabledOpt <- ValueSome (kvp.Value :?> bool)
                if kvp.Key = ViewAttributes.ReturnTypeAttribKey.KeyValue then 
                    prevReturnTypeOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.ReturnType)
                if kvp.Key = ViewAttributes.ReturnCommandAttribKey.KeyValue then 
                    prevReturnCommandOpt <- ValueSome (kvp.Value :?> System.Windows.Input.ICommand)
                if kvp.Key = ViewAttributes.CursorPositionAttribKey.KeyValue then 
                    prevCursorPositionOpt <- ValueSome (kvp.Value :?> int)
                if kvp.Key = ViewAttributes.SelectionLengthAttribKey.KeyValue then 
                    prevSelectionLengthOpt <- ValueSome (kvp.Value :?> int)
        match prevTextOpt, currTextOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Text <-  currValue
        | ValueSome _, ValueNone -> target.Text <- null
        | ValueNone, ValueNone -> ()
        match prevPlaceholderOpt, currPlaceholderOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Placeholder <-  currValue
        | ValueSome _, ValueNone -> target.Placeholder <- null
        | ValueNone, ValueNone -> ()
        match prevHorizontalTextAlignmentOpt, currHorizontalTextAlignmentOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.HorizontalTextAlignment <-  currValue
        | ValueSome _, ValueNone -> target.HorizontalTextAlignment <- Xamarin.Forms.TextAlignment.Start
        | ValueNone, ValueNone -> ()
        match prevFontSizeOpt, currFontSizeOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.FontSize <-  currValue
        | ValueSome _, ValueNone -> target.FontSize <- -1.0
        | ValueNone, ValueNone -> ()
        match prevFontFamilyOpt, currFontFamilyOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.FontFamily <-  currValue
        | ValueSome _, ValueNone -> target.FontFamily <- null
        | ValueNone, ValueNone -> ()
        match prevFontAttributesOpt, currFontAttributesOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.FontAttributes <-  currValue
        | ValueSome _, ValueNone -> target.FontAttributes <- Xamarin.Forms.FontAttributes.None
        | ValueNone, ValueNone -> ()
        match prevTextColorOpt, currTextColorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.TextColor <-  currValue
        | ValueSome _, ValueNone -> target.TextColor <- Xamarin.Forms.Color.Default
        | ValueNone, ValueNone -> ()
        match prevPlaceholderColorOpt, currPlaceholderColorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.PlaceholderColor <-  currValue
        | ValueSome _, ValueNone -> target.PlaceholderColor <- Xamarin.Forms.Color.Default
        | ValueNone, ValueNone -> ()
        match prevIsPasswordOpt, currIsPasswordOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.IsPassword <-  currValue
        | ValueSome _, ValueNone -> target.IsPassword <- false
        | ValueNone, ValueNone -> ()
        match prevEntryCompletedOpt, currEntryCompletedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.Completed.RemoveHandler(prevValue); target.Completed.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.Completed.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.Completed.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevTextChangedOpt, currTextChangedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.TextChanged.RemoveHandler(prevValue); target.TextChanged.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.TextChanged.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.TextChanged.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevIsTextPredictionEnabledOpt, currIsTextPredictionEnabledOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.IsTextPredictionEnabled <-  currValue
        | ValueSome _, ValueNone -> target.IsTextPredictionEnabled <- true
        | ValueNone, ValueNone -> ()
        match prevReturnTypeOpt, currReturnTypeOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.ReturnType <-  currValue
        | ValueSome _, ValueNone -> target.ReturnType <- Xamarin.Forms.ReturnType.Default
        | ValueNone, ValueNone -> ()
        match prevReturnCommandOpt, currReturnCommandOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.ReturnCommand <-  currValue
        | ValueSome _, ValueNone -> target.ReturnCommand <- null
        | ValueNone, ValueNone -> ()
        (fun _ curr (target: Xamarin.Forms.Entry) -> match curr with ValueSome value -> target.CursorPosition <- value | ValueNone -> ()) prevCursorPositionOpt currCursorPositionOpt target
        (fun _ curr (target: Xamarin.Forms.Entry) -> match curr with ValueSome value -> target.SelectionLength <- value | ValueNone -> ()) prevSelectionLengthOpt currSelectionLengthOpt target

    static member inline ConstructEntry(?text: string,
                                        ?placeholder: string,
                                        ?horizontalTextAlignment: Xamarin.Forms.TextAlignment,
                                        ?fontSize: obj,
                                        ?fontFamily: string,
                                        ?fontAttributes: Xamarin.Forms.FontAttributes,
                                        ?textColor: Xamarin.Forms.Color,
                                        ?placeholderColor: Xamarin.Forms.Color,
                                        ?isPassword: bool,
                                        ?completed: string -> unit,
                                        ?textChanged: Xamarin.Forms.TextChangedEventArgs -> unit,
                                        ?isTextPredictionEnabled: bool,
                                        ?returnType: Xamarin.Forms.ReturnType,
                                        ?returnCommand: unit -> unit,
                                        ?cursorPosition: int,
                                        ?selectionLength: int,
                                        ?keyboard: Xamarin.Forms.Keyboard,
                                        ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                        ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                        ?margin: obj,
                                        ?gestureRecognizers: ViewElement list,
                                        ?anchorX: double,
                                        ?anchorY: double,
                                        ?backgroundColor: Xamarin.Forms.Color,
                                        ?heightRequest: double,
                                        ?inputTransparent: bool,
                                        ?isEnabled: bool,
                                        ?isVisible: bool,
                                        ?minimumHeightRequest: double,
                                        ?minimumWidthRequest: double,
                                        ?opacity: double,
                                        ?rotation: double,
                                        ?rotationX: double,
                                        ?rotationY: double,
                                        ?scale: double,
                                        ?style: Xamarin.Forms.Style,
                                        ?styleClass: obj,
                                        ?translationX: double,
                                        ?translationY: double,
                                        ?widthRequest: double,
                                        ?resources: (string * obj) list,
                                        ?styles: Xamarin.Forms.Style list,
                                        ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                        ?isTabStop: bool,
                                        ?scaleX: double,
                                        ?scaleY: double,
                                        ?tabIndex: int,
                                        ?childrenReordered: System.EventArgs -> unit,
                                        ?measureInvalidated: System.EventArgs -> unit,
                                        ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                        ?sizeChanged: System.EventArgs -> unit,
                                        ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                        ?classId: string,
                                        ?styleId: string,
                                        ?automationId: string,
                                        ?created: (Xamarin.Forms.Entry -> unit),
                                        ?ref: ViewRef<Xamarin.Forms.Entry>) = 

        let attribBuilder = ViewBuilders.BuildEntry(0,
                               ?text=text,
                               ?placeholder=placeholder,
                               ?horizontalTextAlignment=horizontalTextAlignment,
                               ?fontSize=fontSize,
                               ?fontFamily=fontFamily,
                               ?fontAttributes=fontAttributes,
                               ?textColor=textColor,
                               ?placeholderColor=placeholderColor,
                               ?isPassword=isPassword,
                               ?completed=completed,
                               ?textChanged=textChanged,
                               ?isTextPredictionEnabled=isTextPredictionEnabled,
                               ?returnType=returnType,
                               ?returnCommand=returnCommand,
                               ?cursorPosition=cursorPosition,
                               ?selectionLength=selectionLength,
                               ?keyboard=keyboard,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.Entry> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.Entry>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.Entry>(ViewBuilders.CreateFuncEntry, ViewBuilders.UpdateFuncEntry, attribBuilder)

    /// Builds the attributes for a EntryCell in the view
    static member inline BuildEntryCell(attribCount: int,
                                        ?label: string,
                                        ?text: string,
                                        ?keyboard: Xamarin.Forms.Keyboard,
                                        ?placeholder: string,
                                        ?horizontalTextAlignment: Xamarin.Forms.TextAlignment,
                                        ?completed: string -> unit,
                                        ?textChanged: Xamarin.Forms.TextChangedEventArgs -> unit,
                                        ?height: double,
                                        ?isEnabled: bool,
                                        ?classId: string,
                                        ?styleId: string,
                                        ?automationId: string,
                                        ?created: obj -> unit,
                                        ?ref: ViewRef) = 

        let attribCount = match label with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match text with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match keyboard with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match placeholder with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match horizontalTextAlignment with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match completed with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match textChanged with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildCell(attribCount, ?height=height, ?isEnabled=isEnabled, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match label with None -> () | Some v -> attribBuilder.Add(ViewAttributes.LabelAttribKey, (v)) 
        match text with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TextAttribKey, (v)) 
        match keyboard with None -> () | Some v -> attribBuilder.Add(ViewAttributes.KeyboardAttribKey, (v)) 
        match placeholder with None -> () | Some v -> attribBuilder.Add(ViewAttributes.PlaceholderAttribKey, (v)) 
        match horizontalTextAlignment with None -> () | Some v -> attribBuilder.Add(ViewAttributes.HorizontalTextAlignmentAttribKey, (v)) 
        match completed with None -> () | Some v -> attribBuilder.Add(ViewAttributes.EntryCompletedAttribKey, (fun f -> System.EventHandler(fun sender args -> f (sender :?> Xamarin.Forms.EntryCell).Text))(v)) 
        match textChanged with None -> () | Some v -> attribBuilder.Add(ViewAttributes.EntryCellTextChangedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.TextChangedEventArgs>(fun _sender args -> f args))(v)) 
        attribBuilder

    static member val CreateFuncEntryCell : (unit -> Fabulous.CustomControls.CustomEntryCell) = (fun () -> ViewBuilders.CreateEntryCell())

    static member CreateEntryCell () : Fabulous.CustomControls.CustomEntryCell =
        upcast (new Fabulous.CustomControls.CustomEntryCell())

    static member val UpdateFuncEntryCell =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Fabulous.CustomControls.CustomEntryCell) -> ViewBuilders.UpdateEntryCell (prevOpt, curr, target)) 

    static member UpdateEntryCell (prevOpt: ViewElement voption, curr: ViewElement, target: Fabulous.CustomControls.CustomEntryCell) = 
        // update the inherited Cell element
        let baseElement = (if ViewProto.ProtoCell.IsNone then ViewProto.ProtoCell <- Some (ViewBuilders.ConstructCell())); ViewProto.ProtoCell.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevLabelOpt = ValueNone
        let mutable currLabelOpt = ValueNone
        let mutable prevTextOpt = ValueNone
        let mutable currTextOpt = ValueNone
        let mutable prevKeyboardOpt = ValueNone
        let mutable currKeyboardOpt = ValueNone
        let mutable prevPlaceholderOpt = ValueNone
        let mutable currPlaceholderOpt = ValueNone
        let mutable prevHorizontalTextAlignmentOpt = ValueNone
        let mutable currHorizontalTextAlignmentOpt = ValueNone
        let mutable prevEntryCompletedOpt = ValueNone
        let mutable currEntryCompletedOpt = ValueNone
        let mutable prevEntryCellTextChangedOpt = ValueNone
        let mutable currEntryCellTextChangedOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.LabelAttribKey.KeyValue then 
                currLabelOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.TextAttribKey.KeyValue then 
                currTextOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.KeyboardAttribKey.KeyValue then 
                currKeyboardOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Keyboard)
            if kvp.Key = ViewAttributes.PlaceholderAttribKey.KeyValue then 
                currPlaceholderOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.HorizontalTextAlignmentAttribKey.KeyValue then 
                currHorizontalTextAlignmentOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.TextAlignment)
            if kvp.Key = ViewAttributes.EntryCompletedAttribKey.KeyValue then 
                currEntryCompletedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
            if kvp.Key = ViewAttributes.EntryCellTextChangedAttribKey.KeyValue then 
                currEntryCellTextChangedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.TextChangedEventArgs>)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.LabelAttribKey.KeyValue then 
                    prevLabelOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.TextAttribKey.KeyValue then 
                    prevTextOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.KeyboardAttribKey.KeyValue then 
                    prevKeyboardOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Keyboard)
                if kvp.Key = ViewAttributes.PlaceholderAttribKey.KeyValue then 
                    prevPlaceholderOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.HorizontalTextAlignmentAttribKey.KeyValue then 
                    prevHorizontalTextAlignmentOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.TextAlignment)
                if kvp.Key = ViewAttributes.EntryCompletedAttribKey.KeyValue then 
                    prevEntryCompletedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
                if kvp.Key = ViewAttributes.EntryCellTextChangedAttribKey.KeyValue then 
                    prevEntryCellTextChangedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.TextChangedEventArgs>)
        match prevLabelOpt, currLabelOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Label <-  currValue
        | ValueSome _, ValueNone -> target.Label <- null
        | ValueNone, ValueNone -> ()
        match prevTextOpt, currTextOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Text <-  currValue
        | ValueSome _, ValueNone -> target.Text <- null
        | ValueNone, ValueNone -> ()
        match prevKeyboardOpt, currKeyboardOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Keyboard <-  currValue
        | ValueSome _, ValueNone -> target.Keyboard <- Xamarin.Forms.Keyboard.Default
        | ValueNone, ValueNone -> ()
        match prevPlaceholderOpt, currPlaceholderOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Placeholder <-  currValue
        | ValueSome _, ValueNone -> target.Placeholder <- null
        | ValueNone, ValueNone -> ()
        match prevHorizontalTextAlignmentOpt, currHorizontalTextAlignmentOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.HorizontalTextAlignment <-  currValue
        | ValueSome _, ValueNone -> target.HorizontalTextAlignment <- Xamarin.Forms.TextAlignment.Start
        | ValueNone, ValueNone -> ()
        match prevEntryCompletedOpt, currEntryCompletedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.Completed.RemoveHandler(prevValue); target.Completed.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.Completed.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.Completed.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevEntryCellTextChangedOpt, currEntryCellTextChangedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.TextChanged.RemoveHandler(prevValue); target.TextChanged.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.TextChanged.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.TextChanged.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()

    static member inline ConstructEntryCell(?label: string,
                                            ?text: string,
                                            ?keyboard: Xamarin.Forms.Keyboard,
                                            ?placeholder: string,
                                            ?horizontalTextAlignment: Xamarin.Forms.TextAlignment,
                                            ?completed: string -> unit,
                                            ?textChanged: Xamarin.Forms.TextChangedEventArgs -> unit,
                                            ?height: double,
                                            ?isEnabled: bool,
                                            ?classId: string,
                                            ?styleId: string,
                                            ?automationId: string,
                                            ?created: (Fabulous.CustomControls.CustomEntryCell -> unit),
                                            ?ref: ViewRef<Fabulous.CustomControls.CustomEntryCell>) = 

        let attribBuilder = ViewBuilders.BuildEntryCell(0,
                               ?label=label,
                               ?text=text,
                               ?keyboard=keyboard,
                               ?placeholder=placeholder,
                               ?horizontalTextAlignment=horizontalTextAlignment,
                               ?completed=completed,
                               ?textChanged=textChanged,
                               ?height=height,
                               ?isEnabled=isEnabled,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Fabulous.CustomControls.CustomEntryCell> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Fabulous.CustomControls.CustomEntryCell>) -> Some ref.Unbox))

        ViewElement.Create<Fabulous.CustomControls.CustomEntryCell>(ViewBuilders.CreateFuncEntryCell, ViewBuilders.UpdateFuncEntryCell, attribBuilder)

    /// Builds the attributes for a Label in the view
    static member inline BuildLabel(attribCount: int,
                                    ?text: string,
                                    ?horizontalTextAlignment: Xamarin.Forms.TextAlignment,
                                    ?verticalTextAlignment: Xamarin.Forms.TextAlignment,
                                    ?fontSize: obj,
                                    ?fontFamily: string,
                                    ?fontAttributes: Xamarin.Forms.FontAttributes,
                                    ?textColor: Xamarin.Forms.Color,
                                    ?formattedText: ViewElement,
                                    ?lineBreakMode: Xamarin.Forms.LineBreakMode,
                                    ?lineHeight: double,
                                    ?maxLines: int,
                                    ?textDecorations: Xamarin.Forms.TextDecorations,
                                    ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                    ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                    ?margin: obj,
                                    ?gestureRecognizers: ViewElement list,
                                    ?anchorX: double,
                                    ?anchorY: double,
                                    ?backgroundColor: Xamarin.Forms.Color,
                                    ?heightRequest: double,
                                    ?inputTransparent: bool,
                                    ?isEnabled: bool,
                                    ?isVisible: bool,
                                    ?minimumHeightRequest: double,
                                    ?minimumWidthRequest: double,
                                    ?opacity: double,
                                    ?rotation: double,
                                    ?rotationX: double,
                                    ?rotationY: double,
                                    ?scale: double,
                                    ?style: Xamarin.Forms.Style,
                                    ?styleClass: obj,
                                    ?translationX: double,
                                    ?translationY: double,
                                    ?widthRequest: double,
                                    ?resources: (string * obj) list,
                                    ?styles: Xamarin.Forms.Style list,
                                    ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                    ?isTabStop: bool,
                                    ?scaleX: double,
                                    ?scaleY: double,
                                    ?tabIndex: int,
                                    ?childrenReordered: System.EventArgs -> unit,
                                    ?measureInvalidated: System.EventArgs -> unit,
                                    ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                    ?sizeChanged: System.EventArgs -> unit,
                                    ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                    ?classId: string,
                                    ?styleId: string,
                                    ?automationId: string,
                                    ?created: obj -> unit,
                                    ?ref: ViewRef) = 

        let attribCount = match text with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match horizontalTextAlignment with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match verticalTextAlignment with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match fontSize with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match fontFamily with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match fontAttributes with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match textColor with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match formattedText with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match lineBreakMode with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match lineHeight with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match maxLines with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match textDecorations with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildView(attribCount, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match text with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TextAttribKey, (v)) 
        match horizontalTextAlignment with None -> () | Some v -> attribBuilder.Add(ViewAttributes.HorizontalTextAlignmentAttribKey, (v)) 
        match verticalTextAlignment with None -> () | Some v -> attribBuilder.Add(ViewAttributes.VerticalTextAlignmentAttribKey, (v)) 
        match fontSize with None -> () | Some v -> attribBuilder.Add(ViewAttributes.FontSizeAttribKey, makeFontSize(v)) 
        match fontFamily with None -> () | Some v -> attribBuilder.Add(ViewAttributes.FontFamilyAttribKey, (v)) 
        match fontAttributes with None -> () | Some v -> attribBuilder.Add(ViewAttributes.FontAttributesAttribKey, (v)) 
        match textColor with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TextColorAttribKey, (v)) 
        match formattedText with None -> () | Some v -> attribBuilder.Add(ViewAttributes.FormattedTextAttribKey, (v)) 
        match lineBreakMode with None -> () | Some v -> attribBuilder.Add(ViewAttributes.LineBreakModeAttribKey, (v)) 
        match lineHeight with None -> () | Some v -> attribBuilder.Add(ViewAttributes.LineHeightAttribKey, (v)) 
        match maxLines with None -> () | Some v -> attribBuilder.Add(ViewAttributes.MaxLinesAttribKey, (v)) 
        match textDecorations with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TextDecorationsAttribKey, (v)) 
        attribBuilder

    static member val CreateFuncLabel : (unit -> Xamarin.Forms.Label) = (fun () -> ViewBuilders.CreateLabel())

    static member CreateLabel () : Xamarin.Forms.Label =
        upcast (new Xamarin.Forms.Label())

    static member val UpdateFuncLabel =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.Label) -> ViewBuilders.UpdateLabel (prevOpt, curr, target)) 

    static member UpdateLabel (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.Label) = 
        // update the inherited View element
        let baseElement = (if ViewProto.ProtoView.IsNone then ViewProto.ProtoView <- Some (ViewBuilders.ConstructView())); ViewProto.ProtoView.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevTextOpt = ValueNone
        let mutable currTextOpt = ValueNone
        let mutable prevHorizontalTextAlignmentOpt = ValueNone
        let mutable currHorizontalTextAlignmentOpt = ValueNone
        let mutable prevVerticalTextAlignmentOpt = ValueNone
        let mutable currVerticalTextAlignmentOpt = ValueNone
        let mutable prevFontSizeOpt = ValueNone
        let mutable currFontSizeOpt = ValueNone
        let mutable prevFontFamilyOpt = ValueNone
        let mutable currFontFamilyOpt = ValueNone
        let mutable prevFontAttributesOpt = ValueNone
        let mutable currFontAttributesOpt = ValueNone
        let mutable prevTextColorOpt = ValueNone
        let mutable currTextColorOpt = ValueNone
        let mutable prevFormattedTextOpt = ValueNone
        let mutable currFormattedTextOpt = ValueNone
        let mutable prevLineBreakModeOpt = ValueNone
        let mutable currLineBreakModeOpt = ValueNone
        let mutable prevLineHeightOpt = ValueNone
        let mutable currLineHeightOpt = ValueNone
        let mutable prevMaxLinesOpt = ValueNone
        let mutable currMaxLinesOpt = ValueNone
        let mutable prevTextDecorationsOpt = ValueNone
        let mutable currTextDecorationsOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.TextAttribKey.KeyValue then 
                currTextOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.HorizontalTextAlignmentAttribKey.KeyValue then 
                currHorizontalTextAlignmentOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.TextAlignment)
            if kvp.Key = ViewAttributes.VerticalTextAlignmentAttribKey.KeyValue then 
                currVerticalTextAlignmentOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.TextAlignment)
            if kvp.Key = ViewAttributes.FontSizeAttribKey.KeyValue then 
                currFontSizeOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.FontFamilyAttribKey.KeyValue then 
                currFontFamilyOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.FontAttributesAttribKey.KeyValue then 
                currFontAttributesOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.FontAttributes)
            if kvp.Key = ViewAttributes.TextColorAttribKey.KeyValue then 
                currTextColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
            if kvp.Key = ViewAttributes.FormattedTextAttribKey.KeyValue then 
                currFormattedTextOpt <- ValueSome (kvp.Value :?> ViewElement)
            if kvp.Key = ViewAttributes.LineBreakModeAttribKey.KeyValue then 
                currLineBreakModeOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.LineBreakMode)
            if kvp.Key = ViewAttributes.LineHeightAttribKey.KeyValue then 
                currLineHeightOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.MaxLinesAttribKey.KeyValue then 
                currMaxLinesOpt <- ValueSome (kvp.Value :?> int)
            if kvp.Key = ViewAttributes.TextDecorationsAttribKey.KeyValue then 
                currTextDecorationsOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.TextDecorations)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.TextAttribKey.KeyValue then 
                    prevTextOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.HorizontalTextAlignmentAttribKey.KeyValue then 
                    prevHorizontalTextAlignmentOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.TextAlignment)
                if kvp.Key = ViewAttributes.VerticalTextAlignmentAttribKey.KeyValue then 
                    prevVerticalTextAlignmentOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.TextAlignment)
                if kvp.Key = ViewAttributes.FontSizeAttribKey.KeyValue then 
                    prevFontSizeOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.FontFamilyAttribKey.KeyValue then 
                    prevFontFamilyOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.FontAttributesAttribKey.KeyValue then 
                    prevFontAttributesOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.FontAttributes)
                if kvp.Key = ViewAttributes.TextColorAttribKey.KeyValue then 
                    prevTextColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
                if kvp.Key = ViewAttributes.FormattedTextAttribKey.KeyValue then 
                    prevFormattedTextOpt <- ValueSome (kvp.Value :?> ViewElement)
                if kvp.Key = ViewAttributes.LineBreakModeAttribKey.KeyValue then 
                    prevLineBreakModeOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.LineBreakMode)
                if kvp.Key = ViewAttributes.LineHeightAttribKey.KeyValue then 
                    prevLineHeightOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.MaxLinesAttribKey.KeyValue then 
                    prevMaxLinesOpt <- ValueSome (kvp.Value :?> int)
                if kvp.Key = ViewAttributes.TextDecorationsAttribKey.KeyValue then 
                    prevTextDecorationsOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.TextDecorations)
        match prevTextOpt, currTextOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Text <-  currValue
        | ValueSome _, ValueNone -> target.Text <- null
        | ValueNone, ValueNone -> ()
        match prevHorizontalTextAlignmentOpt, currHorizontalTextAlignmentOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.HorizontalTextAlignment <-  currValue
        | ValueSome _, ValueNone -> target.HorizontalTextAlignment <- Xamarin.Forms.TextAlignment.Start
        | ValueNone, ValueNone -> ()
        match prevVerticalTextAlignmentOpt, currVerticalTextAlignmentOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.VerticalTextAlignment <-  currValue
        | ValueSome _, ValueNone -> target.VerticalTextAlignment <- Xamarin.Forms.TextAlignment.Start
        | ValueNone, ValueNone -> ()
        match prevFontSizeOpt, currFontSizeOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.FontSize <-  currValue
        | ValueSome _, ValueNone -> target.FontSize <- -1.0
        | ValueNone, ValueNone -> ()
        match prevFontFamilyOpt, currFontFamilyOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.FontFamily <-  currValue
        | ValueSome _, ValueNone -> target.FontFamily <- null
        | ValueNone, ValueNone -> ()
        match prevFontAttributesOpt, currFontAttributesOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.FontAttributes <-  currValue
        | ValueSome _, ValueNone -> target.FontAttributes <- Xamarin.Forms.FontAttributes.None
        | ValueNone, ValueNone -> ()
        match prevTextColorOpt, currTextColorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.TextColor <-  currValue
        | ValueSome _, ValueNone -> target.TextColor <- Xamarin.Forms.Color.Default
        | ValueNone, ValueNone -> ()
        match prevFormattedTextOpt, currFormattedTextOpt with
        // For structured objects, dependsOn on reference equality
        | ValueSome prevValue, ValueSome newValue when identical prevValue newValue -> ()
        | ValueSome prevValue, ValueSome newValue when canReuseChild prevValue newValue ->
            newValue.UpdateIncremental(prevValue, target.FormattedText)
        | _, ValueSome newValue ->
            target.FormattedText <- (newValue.Create() :?> Xamarin.Forms.FormattedString)
        | ValueSome _, ValueNone ->
            target.FormattedText <- null
        | ValueNone, ValueNone -> ()
        match prevLineBreakModeOpt, currLineBreakModeOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.LineBreakMode <-  currValue
        | ValueSome _, ValueNone -> target.LineBreakMode <- Xamarin.Forms.LineBreakMode.WordWrap
        | ValueNone, ValueNone -> ()
        match prevLineHeightOpt, currLineHeightOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.LineHeight <-  currValue
        | ValueSome _, ValueNone -> target.LineHeight <- -1.0
        | ValueNone, ValueNone -> ()
        match prevMaxLinesOpt, currMaxLinesOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.MaxLines <-  currValue
        | ValueSome _, ValueNone -> target.MaxLines <- -1
        | ValueNone, ValueNone -> ()
        match prevTextDecorationsOpt, currTextDecorationsOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.TextDecorations <-  currValue
        | ValueSome _, ValueNone -> target.TextDecorations <- Xamarin.Forms.TextDecorations.None
        | ValueNone, ValueNone -> ()

    static member inline ConstructLabel(?text: string,
                                        ?horizontalTextAlignment: Xamarin.Forms.TextAlignment,
                                        ?verticalTextAlignment: Xamarin.Forms.TextAlignment,
                                        ?fontSize: obj,
                                        ?fontFamily: string,
                                        ?fontAttributes: Xamarin.Forms.FontAttributes,
                                        ?textColor: Xamarin.Forms.Color,
                                        ?formattedText: ViewElement,
                                        ?lineBreakMode: Xamarin.Forms.LineBreakMode,
                                        ?lineHeight: double,
                                        ?maxLines: int,
                                        ?textDecorations: Xamarin.Forms.TextDecorations,
                                        ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                        ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                        ?margin: obj,
                                        ?gestureRecognizers: ViewElement list,
                                        ?anchorX: double,
                                        ?anchorY: double,
                                        ?backgroundColor: Xamarin.Forms.Color,
                                        ?heightRequest: double,
                                        ?inputTransparent: bool,
                                        ?isEnabled: bool,
                                        ?isVisible: bool,
                                        ?minimumHeightRequest: double,
                                        ?minimumWidthRequest: double,
                                        ?opacity: double,
                                        ?rotation: double,
                                        ?rotationX: double,
                                        ?rotationY: double,
                                        ?scale: double,
                                        ?style: Xamarin.Forms.Style,
                                        ?styleClass: obj,
                                        ?translationX: double,
                                        ?translationY: double,
                                        ?widthRequest: double,
                                        ?resources: (string * obj) list,
                                        ?styles: Xamarin.Forms.Style list,
                                        ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                        ?isTabStop: bool,
                                        ?scaleX: double,
                                        ?scaleY: double,
                                        ?tabIndex: int,
                                        ?childrenReordered: System.EventArgs -> unit,
                                        ?measureInvalidated: System.EventArgs -> unit,
                                        ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                        ?sizeChanged: System.EventArgs -> unit,
                                        ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                        ?classId: string,
                                        ?styleId: string,
                                        ?automationId: string,
                                        ?created: (Xamarin.Forms.Label -> unit),
                                        ?ref: ViewRef<Xamarin.Forms.Label>) = 

        let attribBuilder = ViewBuilders.BuildLabel(0,
                               ?text=text,
                               ?horizontalTextAlignment=horizontalTextAlignment,
                               ?verticalTextAlignment=verticalTextAlignment,
                               ?fontSize=fontSize,
                               ?fontFamily=fontFamily,
                               ?fontAttributes=fontAttributes,
                               ?textColor=textColor,
                               ?formattedText=formattedText,
                               ?lineBreakMode=lineBreakMode,
                               ?lineHeight=lineHeight,
                               ?maxLines=maxLines,
                               ?textDecorations=textDecorations,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.Label> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.Label>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.Label>(ViewBuilders.CreateFuncLabel, ViewBuilders.UpdateFuncLabel, attribBuilder)

    /// Builds the attributes for a StackLayout in the view
    static member inline BuildStackLayout(attribCount: int,
                                          ?children: ViewElement list,
                                          ?orientation: Xamarin.Forms.StackOrientation,
                                          ?spacing: double,
                                          ?isClippedToBounds: bool,
                                          ?padding: obj,
                                          ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                          ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                          ?margin: obj,
                                          ?gestureRecognizers: ViewElement list,
                                          ?anchorX: double,
                                          ?anchorY: double,
                                          ?backgroundColor: Xamarin.Forms.Color,
                                          ?heightRequest: double,
                                          ?inputTransparent: bool,
                                          ?isEnabled: bool,
                                          ?isVisible: bool,
                                          ?minimumHeightRequest: double,
                                          ?minimumWidthRequest: double,
                                          ?opacity: double,
                                          ?rotation: double,
                                          ?rotationX: double,
                                          ?rotationY: double,
                                          ?scale: double,
                                          ?style: Xamarin.Forms.Style,
                                          ?styleClass: obj,
                                          ?translationX: double,
                                          ?translationY: double,
                                          ?widthRequest: double,
                                          ?resources: (string * obj) list,
                                          ?styles: Xamarin.Forms.Style list,
                                          ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                          ?isTabStop: bool,
                                          ?scaleX: double,
                                          ?scaleY: double,
                                          ?tabIndex: int,
                                          ?childrenReordered: System.EventArgs -> unit,
                                          ?measureInvalidated: System.EventArgs -> unit,
                                          ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                          ?sizeChanged: System.EventArgs -> unit,
                                          ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                          ?classId: string,
                                          ?styleId: string,
                                          ?automationId: string,
                                          ?created: obj -> unit,
                                          ?ref: ViewRef) = 

        let attribCount = match children with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match orientation with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match spacing with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildLayout(attribCount, ?isClippedToBounds=isClippedToBounds, ?padding=padding, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match children with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ChildrenAttribKey, Array.ofList(v)) 
        match orientation with None -> () | Some v -> attribBuilder.Add(ViewAttributes.StackOrientationAttribKey, (v)) 
        match spacing with None -> () | Some v -> attribBuilder.Add(ViewAttributes.SpacingAttribKey, (v)) 
        attribBuilder

    static member val CreateFuncStackLayout : (unit -> Xamarin.Forms.StackLayout) = (fun () -> ViewBuilders.CreateStackLayout())

    static member CreateStackLayout () : Xamarin.Forms.StackLayout =
        upcast (new Xamarin.Forms.StackLayout())

    static member val UpdateFuncStackLayout =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.StackLayout) -> ViewBuilders.UpdateStackLayout (prevOpt, curr, target)) 

    static member UpdateStackLayout (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.StackLayout) = 
        // update the inherited Layout element
        let baseElement = (if ViewProto.ProtoLayout.IsNone then ViewProto.ProtoLayout <- Some (ViewBuilders.ConstructLayout())); ViewProto.ProtoLayout.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevChildrenOpt = ValueNone
        let mutable currChildrenOpt = ValueNone
        let mutable prevStackOrientationOpt = ValueNone
        let mutable currStackOrientationOpt = ValueNone
        let mutable prevSpacingOpt = ValueNone
        let mutable currSpacingOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.ChildrenAttribKey.KeyValue then 
                currChildrenOpt <- ValueSome (kvp.Value :?> ViewElement[])
            if kvp.Key = ViewAttributes.StackOrientationAttribKey.KeyValue then 
                currStackOrientationOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.StackOrientation)
            if kvp.Key = ViewAttributes.SpacingAttribKey.KeyValue then 
                currSpacingOpt <- ValueSome (kvp.Value :?> double)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.ChildrenAttribKey.KeyValue then 
                    prevChildrenOpt <- ValueSome (kvp.Value :?> ViewElement[])
                if kvp.Key = ViewAttributes.StackOrientationAttribKey.KeyValue then 
                    prevStackOrientationOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.StackOrientation)
                if kvp.Key = ViewAttributes.SpacingAttribKey.KeyValue then 
                    prevSpacingOpt <- ValueSome (kvp.Value :?> double)
        updateCollectionGeneric prevChildrenOpt currChildrenOpt target.Children
            (fun (x:ViewElement) -> x.Create() :?> Xamarin.Forms.View)
            (fun _ _ _ -> ())
            canReuseChild
            updateChild
        match prevStackOrientationOpt, currStackOrientationOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Orientation <-  currValue
        | ValueSome _, ValueNone -> target.Orientation <- Xamarin.Forms.StackOrientation.Vertical
        | ValueNone, ValueNone -> ()
        match prevSpacingOpt, currSpacingOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Spacing <-  currValue
        | ValueSome _, ValueNone -> target.Spacing <- 6.0
        | ValueNone, ValueNone -> ()

    static member inline ConstructStackLayout(?children: ViewElement list,
                                              ?orientation: Xamarin.Forms.StackOrientation,
                                              ?spacing: double,
                                              ?isClippedToBounds: bool,
                                              ?padding: obj,
                                              ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                              ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                              ?margin: obj,
                                              ?gestureRecognizers: ViewElement list,
                                              ?anchorX: double,
                                              ?anchorY: double,
                                              ?backgroundColor: Xamarin.Forms.Color,
                                              ?heightRequest: double,
                                              ?inputTransparent: bool,
                                              ?isEnabled: bool,
                                              ?isVisible: bool,
                                              ?minimumHeightRequest: double,
                                              ?minimumWidthRequest: double,
                                              ?opacity: double,
                                              ?rotation: double,
                                              ?rotationX: double,
                                              ?rotationY: double,
                                              ?scale: double,
                                              ?style: Xamarin.Forms.Style,
                                              ?styleClass: obj,
                                              ?translationX: double,
                                              ?translationY: double,
                                              ?widthRequest: double,
                                              ?resources: (string * obj) list,
                                              ?styles: Xamarin.Forms.Style list,
                                              ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                              ?isTabStop: bool,
                                              ?scaleX: double,
                                              ?scaleY: double,
                                              ?tabIndex: int,
                                              ?childrenReordered: System.EventArgs -> unit,
                                              ?measureInvalidated: System.EventArgs -> unit,
                                              ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                              ?sizeChanged: System.EventArgs -> unit,
                                              ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                              ?classId: string,
                                              ?styleId: string,
                                              ?automationId: string,
                                              ?created: (Xamarin.Forms.StackLayout -> unit),
                                              ?ref: ViewRef<Xamarin.Forms.StackLayout>) = 

        let attribBuilder = ViewBuilders.BuildStackLayout(0,
                               ?children=children,
                               ?orientation=orientation,
                               ?spacing=spacing,
                               ?isClippedToBounds=isClippedToBounds,
                               ?padding=padding,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.StackLayout> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.StackLayout>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.StackLayout>(ViewBuilders.CreateFuncStackLayout, ViewBuilders.UpdateFuncStackLayout, attribBuilder)

    /// Builds the attributes for a Span in the view
    static member inline BuildSpan(attribCount: int,
                                   ?fontFamily: string,
                                   ?fontAttributes: Xamarin.Forms.FontAttributes,
                                   ?fontSize: obj,
                                   ?backgroundColor: Xamarin.Forms.Color,
                                   ?foregroundColor: Xamarin.Forms.Color,
                                   ?text: string,
                                   ?propertyChanged: System.ComponentModel.PropertyChangedEventArgs -> unit,
                                   ?lineHeight: double,
                                   ?textDecorations: Xamarin.Forms.TextDecorations,
                                   ?classId: string,
                                   ?styleId: string,
                                   ?automationId: string,
                                   ?created: obj -> unit,
                                   ?ref: ViewRef) = 

        let attribCount = match fontFamily with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match fontAttributes with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match fontSize with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match backgroundColor with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match foregroundColor with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match text with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match propertyChanged with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match lineHeight with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match textDecorations with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildElement(attribCount, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match fontFamily with None -> () | Some v -> attribBuilder.Add(ViewAttributes.FontFamilyAttribKey, (v)) 
        match fontAttributes with None -> () | Some v -> attribBuilder.Add(ViewAttributes.FontAttributesAttribKey, (v)) 
        match fontSize with None -> () | Some v -> attribBuilder.Add(ViewAttributes.FontSizeAttribKey, makeFontSize(v)) 
        match backgroundColor with None -> () | Some v -> attribBuilder.Add(ViewAttributes.BackgroundColorAttribKey, (v)) 
        match foregroundColor with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ForegroundColorAttribKey, (v)) 
        match text with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TextAttribKey, (v)) 
        match propertyChanged with None -> () | Some v -> attribBuilder.Add(ViewAttributes.PropertyChangedAttribKey, (fun f -> System.EventHandler<System.ComponentModel.PropertyChangedEventArgs>(fun _sender args -> f args))(v)) 
        match lineHeight with None -> () | Some v -> attribBuilder.Add(ViewAttributes.LineHeightAttribKey, (v)) 
        match textDecorations with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TextDecorationsAttribKey, (v)) 
        attribBuilder

    static member val CreateFuncSpan : (unit -> Xamarin.Forms.Span) = (fun () -> ViewBuilders.CreateSpan())

    static member CreateSpan () : Xamarin.Forms.Span =
        upcast (new Xamarin.Forms.Span())

    static member val UpdateFuncSpan =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.Span) -> ViewBuilders.UpdateSpan (prevOpt, curr, target)) 

    static member UpdateSpan (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.Span) = 
        // update the inherited Element element
        let baseElement = (if ViewProto.ProtoElement.IsNone then ViewProto.ProtoElement <- Some (ViewBuilders.ConstructElement())); ViewProto.ProtoElement.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevFontFamilyOpt = ValueNone
        let mutable currFontFamilyOpt = ValueNone
        let mutable prevFontAttributesOpt = ValueNone
        let mutable currFontAttributesOpt = ValueNone
        let mutable prevFontSizeOpt = ValueNone
        let mutable currFontSizeOpt = ValueNone
        let mutable prevBackgroundColorOpt = ValueNone
        let mutable currBackgroundColorOpt = ValueNone
        let mutable prevForegroundColorOpt = ValueNone
        let mutable currForegroundColorOpt = ValueNone
        let mutable prevTextOpt = ValueNone
        let mutable currTextOpt = ValueNone
        let mutable prevPropertyChangedOpt = ValueNone
        let mutable currPropertyChangedOpt = ValueNone
        let mutable prevLineHeightOpt = ValueNone
        let mutable currLineHeightOpt = ValueNone
        let mutable prevTextDecorationsOpt = ValueNone
        let mutable currTextDecorationsOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.FontFamilyAttribKey.KeyValue then 
                currFontFamilyOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.FontAttributesAttribKey.KeyValue then 
                currFontAttributesOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.FontAttributes)
            if kvp.Key = ViewAttributes.FontSizeAttribKey.KeyValue then 
                currFontSizeOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.BackgroundColorAttribKey.KeyValue then 
                currBackgroundColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
            if kvp.Key = ViewAttributes.ForegroundColorAttribKey.KeyValue then 
                currForegroundColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
            if kvp.Key = ViewAttributes.TextAttribKey.KeyValue then 
                currTextOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.PropertyChangedAttribKey.KeyValue then 
                currPropertyChangedOpt <- ValueSome (kvp.Value :?> System.ComponentModel.PropertyChangedEventHandler)
            if kvp.Key = ViewAttributes.LineHeightAttribKey.KeyValue then 
                currLineHeightOpt <- ValueSome (kvp.Value :?> double)
            if kvp.Key = ViewAttributes.TextDecorationsAttribKey.KeyValue then 
                currTextDecorationsOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.TextDecorations)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.FontFamilyAttribKey.KeyValue then 
                    prevFontFamilyOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.FontAttributesAttribKey.KeyValue then 
                    prevFontAttributesOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.FontAttributes)
                if kvp.Key = ViewAttributes.FontSizeAttribKey.KeyValue then 
                    prevFontSizeOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.BackgroundColorAttribKey.KeyValue then 
                    prevBackgroundColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
                if kvp.Key = ViewAttributes.ForegroundColorAttribKey.KeyValue then 
                    prevForegroundColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
                if kvp.Key = ViewAttributes.TextAttribKey.KeyValue then 
                    prevTextOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.PropertyChangedAttribKey.KeyValue then 
                    prevPropertyChangedOpt <- ValueSome (kvp.Value :?> System.ComponentModel.PropertyChangedEventHandler)
                if kvp.Key = ViewAttributes.LineHeightAttribKey.KeyValue then 
                    prevLineHeightOpt <- ValueSome (kvp.Value :?> double)
                if kvp.Key = ViewAttributes.TextDecorationsAttribKey.KeyValue then 
                    prevTextDecorationsOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.TextDecorations)
        match prevFontFamilyOpt, currFontFamilyOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.FontFamily <-  currValue
        | ValueSome _, ValueNone -> target.FontFamily <- null
        | ValueNone, ValueNone -> ()
        match prevFontAttributesOpt, currFontAttributesOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.FontAttributes <-  currValue
        | ValueSome _, ValueNone -> target.FontAttributes <- Xamarin.Forms.FontAttributes.None
        | ValueNone, ValueNone -> ()
        match prevFontSizeOpt, currFontSizeOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.FontSize <-  currValue
        | ValueSome _, ValueNone -> target.FontSize <- -1.0
        | ValueNone, ValueNone -> ()
        match prevBackgroundColorOpt, currBackgroundColorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.BackgroundColor <-  currValue
        | ValueSome _, ValueNone -> target.BackgroundColor <- Xamarin.Forms.Color.Default
        | ValueNone, ValueNone -> ()
        match prevForegroundColorOpt, currForegroundColorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.ForegroundColor <-  currValue
        | ValueSome _, ValueNone -> target.ForegroundColor <- Xamarin.Forms.Color.Default
        | ValueNone, ValueNone -> ()
        match prevTextOpt, currTextOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Text <-  currValue
        | ValueSome _, ValueNone -> target.Text <- null
        | ValueNone, ValueNone -> ()
        match prevPropertyChangedOpt, currPropertyChangedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.PropertyChanged.RemoveHandler(prevValue); target.PropertyChanged.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.PropertyChanged.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.PropertyChanged.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevLineHeightOpt, currLineHeightOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.LineHeight <-  currValue
        | ValueSome _, ValueNone -> target.LineHeight <- -1.0
        | ValueNone, ValueNone -> ()
        match prevTextDecorationsOpt, currTextDecorationsOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.TextDecorations <-  currValue
        | ValueSome _, ValueNone -> target.TextDecorations <- Xamarin.Forms.TextDecorations.None
        | ValueNone, ValueNone -> ()

    static member inline ConstructSpan(?fontFamily: string,
                                       ?fontAttributes: Xamarin.Forms.FontAttributes,
                                       ?fontSize: obj,
                                       ?backgroundColor: Xamarin.Forms.Color,
                                       ?foregroundColor: Xamarin.Forms.Color,
                                       ?text: string,
                                       ?propertyChanged: System.ComponentModel.PropertyChangedEventArgs -> unit,
                                       ?lineHeight: double,
                                       ?textDecorations: Xamarin.Forms.TextDecorations,
                                       ?classId: string,
                                       ?styleId: string,
                                       ?automationId: string,
                                       ?created: (Xamarin.Forms.Span -> unit),
                                       ?ref: ViewRef<Xamarin.Forms.Span>) = 

        let attribBuilder = ViewBuilders.BuildSpan(0,
                               ?fontFamily=fontFamily,
                               ?fontAttributes=fontAttributes,
                               ?fontSize=fontSize,
                               ?backgroundColor=backgroundColor,
                               ?foregroundColor=foregroundColor,
                               ?text=text,
                               ?propertyChanged=propertyChanged,
                               ?lineHeight=lineHeight,
                               ?textDecorations=textDecorations,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.Span> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.Span>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.Span>(ViewBuilders.CreateFuncSpan, ViewBuilders.UpdateFuncSpan, attribBuilder)

    /// Builds the attributes for a FormattedString in the view
    static member inline BuildFormattedString(attribCount: int,
                                              ?spans: ViewElement[],
                                              ?classId: string,
                                              ?styleId: string,
                                              ?automationId: string,
                                              ?created: obj -> unit,
                                              ?ref: ViewRef) = 

        let attribCount = match spans with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildElement(attribCount, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match spans with None -> () | Some v -> attribBuilder.Add(ViewAttributes.SpansAttribKey, (v)) 
        attribBuilder

    static member val CreateFuncFormattedString : (unit -> Xamarin.Forms.FormattedString) = (fun () -> ViewBuilders.CreateFormattedString())

    static member CreateFormattedString () : Xamarin.Forms.FormattedString =
        upcast (new Xamarin.Forms.FormattedString())

    static member val UpdateFuncFormattedString =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.FormattedString) -> ViewBuilders.UpdateFormattedString (prevOpt, curr, target)) 

    static member UpdateFormattedString (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.FormattedString) = 
        // update the inherited Element element
        let baseElement = (if ViewProto.ProtoElement.IsNone then ViewProto.ProtoElement <- Some (ViewBuilders.ConstructElement())); ViewProto.ProtoElement.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevSpansOpt = ValueNone
        let mutable currSpansOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.SpansAttribKey.KeyValue then 
                currSpansOpt <- ValueSome (kvp.Value :?> ViewElement[])
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.SpansAttribKey.KeyValue then 
                    prevSpansOpt <- ValueSome (kvp.Value :?> ViewElement[])
        updateCollectionGeneric prevSpansOpt currSpansOpt target.Spans
            (fun (x:ViewElement) -> x.Create() :?> Xamarin.Forms.Span)
            (fun _ _ _ -> ())
            canReuseChild
            updateChild

    static member inline ConstructFormattedString(?spans: ViewElement[],
                                                  ?classId: string,
                                                  ?styleId: string,
                                                  ?automationId: string,
                                                  ?created: (Xamarin.Forms.FormattedString -> unit),
                                                  ?ref: ViewRef<Xamarin.Forms.FormattedString>) = 

        let attribBuilder = ViewBuilders.BuildFormattedString(0,
                               ?spans=spans,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.FormattedString> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.FormattedString>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.FormattedString>(ViewBuilders.CreateFuncFormattedString, ViewBuilders.UpdateFuncFormattedString, attribBuilder)

    /// Builds the attributes for a TimePicker in the view
    static member inline BuildTimePicker(attribCount: int,
                                         ?time: System.TimeSpan,
                                         ?format: string,
                                         ?textColor: Xamarin.Forms.Color,
                                         ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                         ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                         ?margin: obj,
                                         ?gestureRecognizers: ViewElement list,
                                         ?anchorX: double,
                                         ?anchorY: double,
                                         ?backgroundColor: Xamarin.Forms.Color,
                                         ?heightRequest: double,
                                         ?inputTransparent: bool,
                                         ?isEnabled: bool,
                                         ?isVisible: bool,
                                         ?minimumHeightRequest: double,
                                         ?minimumWidthRequest: double,
                                         ?opacity: double,
                                         ?rotation: double,
                                         ?rotationX: double,
                                         ?rotationY: double,
                                         ?scale: double,
                                         ?style: Xamarin.Forms.Style,
                                         ?styleClass: obj,
                                         ?translationX: double,
                                         ?translationY: double,
                                         ?widthRequest: double,
                                         ?resources: (string * obj) list,
                                         ?styles: Xamarin.Forms.Style list,
                                         ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                         ?isTabStop: bool,
                                         ?scaleX: double,
                                         ?scaleY: double,
                                         ?tabIndex: int,
                                         ?childrenReordered: System.EventArgs -> unit,
                                         ?measureInvalidated: System.EventArgs -> unit,
                                         ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                         ?sizeChanged: System.EventArgs -> unit,
                                         ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                         ?classId: string,
                                         ?styleId: string,
                                         ?automationId: string,
                                         ?created: obj -> unit,
                                         ?ref: ViewRef) = 

        let attribCount = match time with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match format with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match textColor with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildView(attribCount, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match time with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TimeAttribKey, (v)) 
        match format with None -> () | Some v -> attribBuilder.Add(ViewAttributes.FormatAttribKey, (v)) 
        match textColor with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TextColorAttribKey, (v)) 
        attribBuilder

    static member val CreateFuncTimePicker : (unit -> Xamarin.Forms.TimePicker) = (fun () -> ViewBuilders.CreateTimePicker())

    static member CreateTimePicker () : Xamarin.Forms.TimePicker =
        upcast (new Xamarin.Forms.TimePicker())

    static member val UpdateFuncTimePicker =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.TimePicker) -> ViewBuilders.UpdateTimePicker (prevOpt, curr, target)) 

    static member UpdateTimePicker (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.TimePicker) = 
        // update the inherited View element
        let baseElement = (if ViewProto.ProtoView.IsNone then ViewProto.ProtoView <- Some (ViewBuilders.ConstructView())); ViewProto.ProtoView.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevTimeOpt = ValueNone
        let mutable currTimeOpt = ValueNone
        let mutable prevFormatOpt = ValueNone
        let mutable currFormatOpt = ValueNone
        let mutable prevTextColorOpt = ValueNone
        let mutable currTextColorOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.TimeAttribKey.KeyValue then 
                currTimeOpt <- ValueSome (kvp.Value :?> System.TimeSpan)
            if kvp.Key = ViewAttributes.FormatAttribKey.KeyValue then 
                currFormatOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.TextColorAttribKey.KeyValue then 
                currTextColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.TimeAttribKey.KeyValue then 
                    prevTimeOpt <- ValueSome (kvp.Value :?> System.TimeSpan)
                if kvp.Key = ViewAttributes.FormatAttribKey.KeyValue then 
                    prevFormatOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.TextColorAttribKey.KeyValue then 
                    prevTextColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
        match prevTimeOpt, currTimeOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Time <-  currValue
        | ValueSome _, ValueNone -> target.Time <- new System.TimeSpan()
        | ValueNone, ValueNone -> ()
        match prevFormatOpt, currFormatOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Format <-  currValue
        | ValueSome _, ValueNone -> target.Format <- "t"
        | ValueNone, ValueNone -> ()
        match prevTextColorOpt, currTextColorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.TextColor <-  currValue
        | ValueSome _, ValueNone -> target.TextColor <- Xamarin.Forms.Color.Default
        | ValueNone, ValueNone -> ()

    static member inline ConstructTimePicker(?time: System.TimeSpan,
                                             ?format: string,
                                             ?textColor: Xamarin.Forms.Color,
                                             ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                             ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                             ?margin: obj,
                                             ?gestureRecognizers: ViewElement list,
                                             ?anchorX: double,
                                             ?anchorY: double,
                                             ?backgroundColor: Xamarin.Forms.Color,
                                             ?heightRequest: double,
                                             ?inputTransparent: bool,
                                             ?isEnabled: bool,
                                             ?isVisible: bool,
                                             ?minimumHeightRequest: double,
                                             ?minimumWidthRequest: double,
                                             ?opacity: double,
                                             ?rotation: double,
                                             ?rotationX: double,
                                             ?rotationY: double,
                                             ?scale: double,
                                             ?style: Xamarin.Forms.Style,
                                             ?styleClass: obj,
                                             ?translationX: double,
                                             ?translationY: double,
                                             ?widthRequest: double,
                                             ?resources: (string * obj) list,
                                             ?styles: Xamarin.Forms.Style list,
                                             ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                             ?isTabStop: bool,
                                             ?scaleX: double,
                                             ?scaleY: double,
                                             ?tabIndex: int,
                                             ?childrenReordered: System.EventArgs -> unit,
                                             ?measureInvalidated: System.EventArgs -> unit,
                                             ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                             ?sizeChanged: System.EventArgs -> unit,
                                             ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                             ?classId: string,
                                             ?styleId: string,
                                             ?automationId: string,
                                             ?created: (Xamarin.Forms.TimePicker -> unit),
                                             ?ref: ViewRef<Xamarin.Forms.TimePicker>) = 

        let attribBuilder = ViewBuilders.BuildTimePicker(0,
                               ?time=time,
                               ?format=format,
                               ?textColor=textColor,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.TimePicker> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.TimePicker>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.TimePicker>(ViewBuilders.CreateFuncTimePicker, ViewBuilders.UpdateFuncTimePicker, attribBuilder)

    /// Builds the attributes for a WebView in the view
    static member inline BuildWebView(attribCount: int,
                                      ?source: Xamarin.Forms.WebViewSource,
                                      ?reload: bool,
                                      ?navigated: Xamarin.Forms.WebNavigatedEventArgs -> unit,
                                      ?navigating: Xamarin.Forms.WebNavigatingEventArgs -> unit,
                                      ?reloadRequested: System.EventArgs -> unit,
                                      ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                      ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                      ?margin: obj,
                                      ?gestureRecognizers: ViewElement list,
                                      ?anchorX: double,
                                      ?anchorY: double,
                                      ?backgroundColor: Xamarin.Forms.Color,
                                      ?heightRequest: double,
                                      ?inputTransparent: bool,
                                      ?isEnabled: bool,
                                      ?isVisible: bool,
                                      ?minimumHeightRequest: double,
                                      ?minimumWidthRequest: double,
                                      ?opacity: double,
                                      ?rotation: double,
                                      ?rotationX: double,
                                      ?rotationY: double,
                                      ?scale: double,
                                      ?style: Xamarin.Forms.Style,
                                      ?styleClass: obj,
                                      ?translationX: double,
                                      ?translationY: double,
                                      ?widthRequest: double,
                                      ?resources: (string * obj) list,
                                      ?styles: Xamarin.Forms.Style list,
                                      ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                      ?isTabStop: bool,
                                      ?scaleX: double,
                                      ?scaleY: double,
                                      ?tabIndex: int,
                                      ?childrenReordered: System.EventArgs -> unit,
                                      ?measureInvalidated: System.EventArgs -> unit,
                                      ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                      ?sizeChanged: System.EventArgs -> unit,
                                      ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                      ?classId: string,
                                      ?styleId: string,
                                      ?automationId: string,
                                      ?created: obj -> unit,
                                      ?ref: ViewRef) = 

        let attribCount = match source with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match reload with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match navigated with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match navigating with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match reloadRequested with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildView(attribCount, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match source with None -> () | Some v -> attribBuilder.Add(ViewAttributes.WebSourceAttribKey, (v)) 
        match reload with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ReloadAttribKey, (v)) 
        match navigated with None -> () | Some v -> attribBuilder.Add(ViewAttributes.NavigatedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.WebNavigatedEventArgs>(fun _sender args -> f args))(v)) 
        match navigating with None -> () | Some v -> attribBuilder.Add(ViewAttributes.NavigatingAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.WebNavigatingEventArgs>(fun _sender args -> f args))(v)) 
        match reloadRequested with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ReloadRequestedAttribKey, (fun f -> System.EventHandler(fun _sender args -> f args))(v)) 
        attribBuilder

    static member val CreateFuncWebView : (unit -> Xamarin.Forms.WebView) = (fun () -> ViewBuilders.CreateWebView())

    static member CreateWebView () : Xamarin.Forms.WebView =
        upcast (new Xamarin.Forms.WebView())

    static member val UpdateFuncWebView =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.WebView) -> ViewBuilders.UpdateWebView (prevOpt, curr, target)) 

    static member UpdateWebView (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.WebView) = 
        // update the inherited View element
        let baseElement = (if ViewProto.ProtoView.IsNone then ViewProto.ProtoView <- Some (ViewBuilders.ConstructView())); ViewProto.ProtoView.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevWebSourceOpt = ValueNone
        let mutable currWebSourceOpt = ValueNone
        let mutable prevReloadOpt = ValueNone
        let mutable currReloadOpt = ValueNone
        let mutable prevNavigatedOpt = ValueNone
        let mutable currNavigatedOpt = ValueNone
        let mutable prevNavigatingOpt = ValueNone
        let mutable currNavigatingOpt = ValueNone
        let mutable prevReloadRequestedOpt = ValueNone
        let mutable currReloadRequestedOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.WebSourceAttribKey.KeyValue then 
                currWebSourceOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.WebViewSource)
            if kvp.Key = ViewAttributes.ReloadAttribKey.KeyValue then 
                currReloadOpt <- ValueSome (kvp.Value :?> bool)
            if kvp.Key = ViewAttributes.NavigatedAttribKey.KeyValue then 
                currNavigatedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.WebNavigatedEventArgs>)
            if kvp.Key = ViewAttributes.NavigatingAttribKey.KeyValue then 
                currNavigatingOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.WebNavigatingEventArgs>)
            if kvp.Key = ViewAttributes.ReloadRequestedAttribKey.KeyValue then 
                currReloadRequestedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.WebSourceAttribKey.KeyValue then 
                    prevWebSourceOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.WebViewSource)
                if kvp.Key = ViewAttributes.ReloadAttribKey.KeyValue then 
                    prevReloadOpt <- ValueSome (kvp.Value :?> bool)
                if kvp.Key = ViewAttributes.NavigatedAttribKey.KeyValue then 
                    prevNavigatedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.WebNavigatedEventArgs>)
                if kvp.Key = ViewAttributes.NavigatingAttribKey.KeyValue then 
                    prevNavigatingOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.WebNavigatingEventArgs>)
                if kvp.Key = ViewAttributes.ReloadRequestedAttribKey.KeyValue then 
                    prevReloadRequestedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
        match prevWebSourceOpt, currWebSourceOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Source <-  currValue
        | ValueSome _, ValueNone -> target.Source <- null
        | ValueNone, ValueNone -> ()
        (fun _ curr (target: Xamarin.Forms.WebView) -> if curr = ValueSome true then target.Reload()) prevReloadOpt currReloadOpt target
        match prevNavigatedOpt, currNavigatedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.Navigated.RemoveHandler(prevValue); target.Navigated.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.Navigated.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.Navigated.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevNavigatingOpt, currNavigatingOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.Navigating.RemoveHandler(prevValue); target.Navigating.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.Navigating.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.Navigating.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevReloadRequestedOpt, currReloadRequestedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.ReloadRequested.RemoveHandler(prevValue); target.ReloadRequested.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.ReloadRequested.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.ReloadRequested.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()

    static member inline ConstructWebView(?source: Xamarin.Forms.WebViewSource,
                                          ?reload: bool,
                                          ?navigated: Xamarin.Forms.WebNavigatedEventArgs -> unit,
                                          ?navigating: Xamarin.Forms.WebNavigatingEventArgs -> unit,
                                          ?reloadRequested: System.EventArgs -> unit,
                                          ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                          ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                          ?margin: obj,
                                          ?gestureRecognizers: ViewElement list,
                                          ?anchorX: double,
                                          ?anchorY: double,
                                          ?backgroundColor: Xamarin.Forms.Color,
                                          ?heightRequest: double,
                                          ?inputTransparent: bool,
                                          ?isEnabled: bool,
                                          ?isVisible: bool,
                                          ?minimumHeightRequest: double,
                                          ?minimumWidthRequest: double,
                                          ?opacity: double,
                                          ?rotation: double,
                                          ?rotationX: double,
                                          ?rotationY: double,
                                          ?scale: double,
                                          ?style: Xamarin.Forms.Style,
                                          ?styleClass: obj,
                                          ?translationX: double,
                                          ?translationY: double,
                                          ?widthRequest: double,
                                          ?resources: (string * obj) list,
                                          ?styles: Xamarin.Forms.Style list,
                                          ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                          ?isTabStop: bool,
                                          ?scaleX: double,
                                          ?scaleY: double,
                                          ?tabIndex: int,
                                          ?childrenReordered: System.EventArgs -> unit,
                                          ?measureInvalidated: System.EventArgs -> unit,
                                          ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                          ?sizeChanged: System.EventArgs -> unit,
                                          ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                          ?classId: string,
                                          ?styleId: string,
                                          ?automationId: string,
                                          ?created: (Xamarin.Forms.WebView -> unit),
                                          ?ref: ViewRef<Xamarin.Forms.WebView>) = 

        let attribBuilder = ViewBuilders.BuildWebView(0,
                               ?source=source,
                               ?reload=reload,
                               ?navigated=navigated,
                               ?navigating=navigating,
                               ?reloadRequested=reloadRequested,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.WebView> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.WebView>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.WebView>(ViewBuilders.CreateFuncWebView, ViewBuilders.UpdateFuncWebView, attribBuilder)

    /// Builds the attributes for a Page in the view
    static member inline BuildPage(attribCount: int,
                                   ?title: string,
                                   ?backgroundImage: string,
                                   ?icon: string,
                                   ?isBusy: bool,
                                   ?padding: obj,
                                   ?toolbarItems: ViewElement list,
                                   ?useSafeArea: bool,
                                   ?appearing: unit -> unit,
                                   ?disappearing: unit -> unit,
                                   ?layoutChanged: unit -> unit,
                                   ?anchorX: double,
                                   ?anchorY: double,
                                   ?backgroundColor: Xamarin.Forms.Color,
                                   ?heightRequest: double,
                                   ?inputTransparent: bool,
                                   ?isEnabled: bool,
                                   ?isVisible: bool,
                                   ?minimumHeightRequest: double,
                                   ?minimumWidthRequest: double,
                                   ?opacity: double,
                                   ?rotation: double,
                                   ?rotationX: double,
                                   ?rotationY: double,
                                   ?scale: double,
                                   ?style: Xamarin.Forms.Style,
                                   ?styleClass: obj,
                                   ?translationX: double,
                                   ?translationY: double,
                                   ?widthRequest: double,
                                   ?resources: (string * obj) list,
                                   ?styles: Xamarin.Forms.Style list,
                                   ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                   ?isTabStop: bool,
                                   ?scaleX: double,
                                   ?scaleY: double,
                                   ?tabIndex: int,
                                   ?childrenReordered: System.EventArgs -> unit,
                                   ?measureInvalidated: System.EventArgs -> unit,
                                   ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                   ?sizeChanged: System.EventArgs -> unit,
                                   ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                   ?classId: string,
                                   ?styleId: string,
                                   ?automationId: string,
                                   ?created: obj -> unit,
                                   ?ref: ViewRef) = 

        let attribCount = match title with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match backgroundImage with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match icon with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match isBusy with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match padding with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match toolbarItems with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match useSafeArea with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match appearing with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match disappearing with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match layoutChanged with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildVisualElement(attribCount, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match title with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TitleAttribKey, (v)) 
        match backgroundImage with None -> () | Some v -> attribBuilder.Add(ViewAttributes.BackgroundImageAttribKey, (v)) 
        match icon with None -> () | Some v -> attribBuilder.Add(ViewAttributes.IconAttribKey, (v)) 
        match isBusy with None -> () | Some v -> attribBuilder.Add(ViewAttributes.IsBusyAttribKey, (v)) 
        match padding with None -> () | Some v -> attribBuilder.Add(ViewAttributes.PaddingAttribKey, makeThickness(v)) 
        match toolbarItems with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ToolbarItemsAttribKey, Array.ofList(v)) 
        match useSafeArea with None -> () | Some v -> attribBuilder.Add(ViewAttributes.UseSafeAreaAttribKey, (v)) 
        match appearing with None -> () | Some v -> attribBuilder.Add(ViewAttributes.Page_AppearingAttribKey, (fun f -> System.EventHandler(fun _sender _args -> f ()))(v)) 
        match disappearing with None -> () | Some v -> attribBuilder.Add(ViewAttributes.Page_DisappearingAttribKey, (fun f -> System.EventHandler(fun _sender _args -> f ()))(v)) 
        match layoutChanged with None -> () | Some v -> attribBuilder.Add(ViewAttributes.Page_LayoutChangedAttribKey, (fun f -> System.EventHandler(fun _sender _args -> f ()))(v)) 
        attribBuilder

    static member val CreateFuncPage : (unit -> Xamarin.Forms.Page) = (fun () -> ViewBuilders.CreatePage())

    static member CreatePage () : Xamarin.Forms.Page =
        upcast (new Xamarin.Forms.Page())

    static member val UpdateFuncPage =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.Page) -> ViewBuilders.UpdatePage (prevOpt, curr, target)) 

    static member UpdatePage (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.Page) = 
        // update the inherited VisualElement element
        let baseElement = (if ViewProto.ProtoVisualElement.IsNone then ViewProto.ProtoVisualElement <- Some (ViewBuilders.ConstructVisualElement())); ViewProto.ProtoVisualElement.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevTitleOpt = ValueNone
        let mutable currTitleOpt = ValueNone
        let mutable prevBackgroundImageOpt = ValueNone
        let mutable currBackgroundImageOpt = ValueNone
        let mutable prevIconOpt = ValueNone
        let mutable currIconOpt = ValueNone
        let mutable prevIsBusyOpt = ValueNone
        let mutable currIsBusyOpt = ValueNone
        let mutable prevPaddingOpt = ValueNone
        let mutable currPaddingOpt = ValueNone
        let mutable prevToolbarItemsOpt = ValueNone
        let mutable currToolbarItemsOpt = ValueNone
        let mutable prevUseSafeAreaOpt = ValueNone
        let mutable currUseSafeAreaOpt = ValueNone
        let mutable prevPage_AppearingOpt = ValueNone
        let mutable currPage_AppearingOpt = ValueNone
        let mutable prevPage_DisappearingOpt = ValueNone
        let mutable currPage_DisappearingOpt = ValueNone
        let mutable prevPage_LayoutChangedOpt = ValueNone
        let mutable currPage_LayoutChangedOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.TitleAttribKey.KeyValue then 
                currTitleOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.BackgroundImageAttribKey.KeyValue then 
                currBackgroundImageOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.IconAttribKey.KeyValue then 
                currIconOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.IsBusyAttribKey.KeyValue then 
                currIsBusyOpt <- ValueSome (kvp.Value :?> bool)
            if kvp.Key = ViewAttributes.PaddingAttribKey.KeyValue then 
                currPaddingOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Thickness)
            if kvp.Key = ViewAttributes.ToolbarItemsAttribKey.KeyValue then 
                currToolbarItemsOpt <- ValueSome (kvp.Value :?> ViewElement[])
            if kvp.Key = ViewAttributes.UseSafeAreaAttribKey.KeyValue then 
                currUseSafeAreaOpt <- ValueSome (kvp.Value :?> bool)
            if kvp.Key = ViewAttributes.Page_AppearingAttribKey.KeyValue then 
                currPage_AppearingOpt <- ValueSome (kvp.Value :?> System.EventHandler)
            if kvp.Key = ViewAttributes.Page_DisappearingAttribKey.KeyValue then 
                currPage_DisappearingOpt <- ValueSome (kvp.Value :?> System.EventHandler)
            if kvp.Key = ViewAttributes.Page_LayoutChangedAttribKey.KeyValue then 
                currPage_LayoutChangedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.TitleAttribKey.KeyValue then 
                    prevTitleOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.BackgroundImageAttribKey.KeyValue then 
                    prevBackgroundImageOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.IconAttribKey.KeyValue then 
                    prevIconOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.IsBusyAttribKey.KeyValue then 
                    prevIsBusyOpt <- ValueSome (kvp.Value :?> bool)
                if kvp.Key = ViewAttributes.PaddingAttribKey.KeyValue then 
                    prevPaddingOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Thickness)
                if kvp.Key = ViewAttributes.ToolbarItemsAttribKey.KeyValue then 
                    prevToolbarItemsOpt <- ValueSome (kvp.Value :?> ViewElement[])
                if kvp.Key = ViewAttributes.UseSafeAreaAttribKey.KeyValue then 
                    prevUseSafeAreaOpt <- ValueSome (kvp.Value :?> bool)
                if kvp.Key = ViewAttributes.Page_AppearingAttribKey.KeyValue then 
                    prevPage_AppearingOpt <- ValueSome (kvp.Value :?> System.EventHandler)
                if kvp.Key = ViewAttributes.Page_DisappearingAttribKey.KeyValue then 
                    prevPage_DisappearingOpt <- ValueSome (kvp.Value :?> System.EventHandler)
                if kvp.Key = ViewAttributes.Page_LayoutChangedAttribKey.KeyValue then 
                    prevPage_LayoutChangedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
        match prevTitleOpt, currTitleOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Title <-  currValue
        | ValueSome _, ValueNone -> target.Title <- ""
        | ValueNone, ValueNone -> ()
        match prevBackgroundImageOpt, currBackgroundImageOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.BackgroundImage <-  currValue
        | ValueSome _, ValueNone -> target.BackgroundImage <- null
        | ValueNone, ValueNone -> ()
        match prevIconOpt, currIconOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Icon <- makeFileImageSource currValue
        | ValueSome _, ValueNone -> target.Icon <- null
        | ValueNone, ValueNone -> ()
        match prevIsBusyOpt, currIsBusyOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.IsBusy <-  currValue
        | ValueSome _, ValueNone -> target.IsBusy <- false
        | ValueNone, ValueNone -> ()
        match prevPaddingOpt, currPaddingOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Padding <-  currValue
        | ValueSome _, ValueNone -> target.Padding <- Unchecked.defaultof<Xamarin.Forms.Thickness>
        | ValueNone, ValueNone -> ()
        updateCollectionGeneric prevToolbarItemsOpt currToolbarItemsOpt target.ToolbarItems
            (fun (x:ViewElement) -> x.Create() :?> Xamarin.Forms.ToolbarItem)
            (fun _ _ _ -> ())
            canReuseChild
            updateChild
        (fun _ _ target -> Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.SetUseSafeArea((target : Xamarin.Forms.Page).On<Xamarin.Forms.PlatformConfiguration.iOS>(), true) |> ignore) prevUseSafeAreaOpt currUseSafeAreaOpt target
        match prevPage_AppearingOpt, currPage_AppearingOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.Appearing.RemoveHandler(prevValue); target.Appearing.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.Appearing.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.Appearing.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevPage_DisappearingOpt, currPage_DisappearingOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.Disappearing.RemoveHandler(prevValue); target.Disappearing.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.Disappearing.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.Disappearing.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevPage_LayoutChangedOpt, currPage_LayoutChangedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.LayoutChanged.RemoveHandler(prevValue); target.LayoutChanged.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.LayoutChanged.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.LayoutChanged.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()

    static member inline ConstructPage(?title: string,
                                       ?backgroundImage: string,
                                       ?icon: string,
                                       ?isBusy: bool,
                                       ?padding: obj,
                                       ?toolbarItems: ViewElement list,
                                       ?useSafeArea: bool,
                                       ?appearing: unit -> unit,
                                       ?disappearing: unit -> unit,
                                       ?layoutChanged: unit -> unit,
                                       ?anchorX: double,
                                       ?anchorY: double,
                                       ?backgroundColor: Xamarin.Forms.Color,
                                       ?heightRequest: double,
                                       ?inputTransparent: bool,
                                       ?isEnabled: bool,
                                       ?isVisible: bool,
                                       ?minimumHeightRequest: double,
                                       ?minimumWidthRequest: double,
                                       ?opacity: double,
                                       ?rotation: double,
                                       ?rotationX: double,
                                       ?rotationY: double,
                                       ?scale: double,
                                       ?style: Xamarin.Forms.Style,
                                       ?styleClass: obj,
                                       ?translationX: double,
                                       ?translationY: double,
                                       ?widthRequest: double,
                                       ?resources: (string * obj) list,
                                       ?styles: Xamarin.Forms.Style list,
                                       ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                       ?isTabStop: bool,
                                       ?scaleX: double,
                                       ?scaleY: double,
                                       ?tabIndex: int,
                                       ?childrenReordered: System.EventArgs -> unit,
                                       ?measureInvalidated: System.EventArgs -> unit,
                                       ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                       ?sizeChanged: System.EventArgs -> unit,
                                       ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                       ?classId: string,
                                       ?styleId: string,
                                       ?automationId: string,
                                       ?created: (Xamarin.Forms.Page -> unit),
                                       ?ref: ViewRef<Xamarin.Forms.Page>) = 

        let attribBuilder = ViewBuilders.BuildPage(0,
                               ?title=title,
                               ?backgroundImage=backgroundImage,
                               ?icon=icon,
                               ?isBusy=isBusy,
                               ?padding=padding,
                               ?toolbarItems=toolbarItems,
                               ?useSafeArea=useSafeArea,
                               ?appearing=appearing,
                               ?disappearing=disappearing,
                               ?layoutChanged=layoutChanged,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.Page> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.Page>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.Page>(ViewBuilders.CreateFuncPage, ViewBuilders.UpdateFuncPage, attribBuilder)

    /// Builds the attributes for a CarouselPage in the view
    static member inline BuildCarouselPage(attribCount: int,
                                           ?children: ViewElement list,
                                           ?currentPage: int,
                                           ?currentPageChanged: int option -> unit,
                                           ?title: string,
                                           ?backgroundImage: string,
                                           ?icon: string,
                                           ?isBusy: bool,
                                           ?padding: obj,
                                           ?toolbarItems: ViewElement list,
                                           ?useSafeArea: bool,
                                           ?appearing: unit -> unit,
                                           ?disappearing: unit -> unit,
                                           ?layoutChanged: unit -> unit,
                                           ?anchorX: double,
                                           ?anchorY: double,
                                           ?backgroundColor: Xamarin.Forms.Color,
                                           ?heightRequest: double,
                                           ?inputTransparent: bool,
                                           ?isEnabled: bool,
                                           ?isVisible: bool,
                                           ?minimumHeightRequest: double,
                                           ?minimumWidthRequest: double,
                                           ?opacity: double,
                                           ?rotation: double,
                                           ?rotationX: double,
                                           ?rotationY: double,
                                           ?scale: double,
                                           ?style: Xamarin.Forms.Style,
                                           ?styleClass: obj,
                                           ?translationX: double,
                                           ?translationY: double,
                                           ?widthRequest: double,
                                           ?resources: (string * obj) list,
                                           ?styles: Xamarin.Forms.Style list,
                                           ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                           ?isTabStop: bool,
                                           ?scaleX: double,
                                           ?scaleY: double,
                                           ?tabIndex: int,
                                           ?childrenReordered: System.EventArgs -> unit,
                                           ?measureInvalidated: System.EventArgs -> unit,
                                           ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                           ?sizeChanged: System.EventArgs -> unit,
                                           ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                           ?classId: string,
                                           ?styleId: string,
                                           ?automationId: string,
                                           ?created: obj -> unit,
                                           ?ref: ViewRef) = 

        let attribCount = match children with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match currentPage with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match currentPageChanged with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildPage(attribCount, ?title=title, ?backgroundImage=backgroundImage, ?icon=icon, ?isBusy=isBusy, ?padding=padding, ?toolbarItems=toolbarItems, ?useSafeArea=useSafeArea, ?appearing=appearing, ?disappearing=disappearing, ?layoutChanged=layoutChanged, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match children with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ChildrenAttribKey, Array.ofList(v)) 
        match currentPage with None -> () | Some v -> attribBuilder.Add(ViewAttributes.CarouselPage_CurrentPageAttribKey, (v)) 
        match currentPageChanged with None -> () | Some v -> attribBuilder.Add(ViewAttributes.CarouselPage_CurrentPageChangedAttribKey, makeCurrentPageChanged<Xamarin.Forms.ContentPage>(v)) 
        attribBuilder

    static member val CreateFuncCarouselPage : (unit -> Xamarin.Forms.CarouselPage) = (fun () -> ViewBuilders.CreateCarouselPage())

    static member CreateCarouselPage () : Xamarin.Forms.CarouselPage =
        upcast (new Xamarin.Forms.CarouselPage())

    static member val UpdateFuncCarouselPage =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.CarouselPage) -> ViewBuilders.UpdateCarouselPage (prevOpt, curr, target)) 

    static member UpdateCarouselPage (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.CarouselPage) = 
        // update the inherited Page element
        let baseElement = (if ViewProto.ProtoPage.IsNone then ViewProto.ProtoPage <- Some (ViewBuilders.ConstructPage())); ViewProto.ProtoPage.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevChildrenOpt = ValueNone
        let mutable currChildrenOpt = ValueNone
        let mutable prevCarouselPage_CurrentPageOpt = ValueNone
        let mutable currCarouselPage_CurrentPageOpt = ValueNone
        let mutable prevCarouselPage_CurrentPageChangedOpt = ValueNone
        let mutable currCarouselPage_CurrentPageChangedOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.ChildrenAttribKey.KeyValue then 
                currChildrenOpt <- ValueSome (kvp.Value :?> ViewElement[])
            if kvp.Key = ViewAttributes.CarouselPage_CurrentPageAttribKey.KeyValue then 
                currCarouselPage_CurrentPageOpt <- ValueSome (kvp.Value :?> int)
            if kvp.Key = ViewAttributes.CarouselPage_CurrentPageChangedAttribKey.KeyValue then 
                currCarouselPage_CurrentPageChangedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.ChildrenAttribKey.KeyValue then 
                    prevChildrenOpt <- ValueSome (kvp.Value :?> ViewElement[])
                if kvp.Key = ViewAttributes.CarouselPage_CurrentPageAttribKey.KeyValue then 
                    prevCarouselPage_CurrentPageOpt <- ValueSome (kvp.Value :?> int)
                if kvp.Key = ViewAttributes.CarouselPage_CurrentPageChangedAttribKey.KeyValue then 
                    prevCarouselPage_CurrentPageChangedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
        updateCollectionGeneric prevChildrenOpt currChildrenOpt target.Children
            (fun (x:ViewElement) -> x.Create() :?> Xamarin.Forms.ContentPage)
            (fun _ _ _ -> ())
            canReuseChild
            updateChild
        updateCurrentPage<Xamarin.Forms.ContentPage> prevCarouselPage_CurrentPageOpt currCarouselPage_CurrentPageOpt target
        match prevCarouselPage_CurrentPageChangedOpt, currCarouselPage_CurrentPageChangedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.CurrentPageChanged.RemoveHandler(prevValue); target.CurrentPageChanged.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.CurrentPageChanged.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.CurrentPageChanged.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()

    static member inline ConstructCarouselPage(?children: ViewElement list,
                                               ?currentPage: int,
                                               ?currentPageChanged: int option -> unit,
                                               ?title: string,
                                               ?backgroundImage: string,
                                               ?icon: string,
                                               ?isBusy: bool,
                                               ?padding: obj,
                                               ?toolbarItems: ViewElement list,
                                               ?useSafeArea: bool,
                                               ?appearing: unit -> unit,
                                               ?disappearing: unit -> unit,
                                               ?layoutChanged: unit -> unit,
                                               ?anchorX: double,
                                               ?anchorY: double,
                                               ?backgroundColor: Xamarin.Forms.Color,
                                               ?heightRequest: double,
                                               ?inputTransparent: bool,
                                               ?isEnabled: bool,
                                               ?isVisible: bool,
                                               ?minimumHeightRequest: double,
                                               ?minimumWidthRequest: double,
                                               ?opacity: double,
                                               ?rotation: double,
                                               ?rotationX: double,
                                               ?rotationY: double,
                                               ?scale: double,
                                               ?style: Xamarin.Forms.Style,
                                               ?styleClass: obj,
                                               ?translationX: double,
                                               ?translationY: double,
                                               ?widthRequest: double,
                                               ?resources: (string * obj) list,
                                               ?styles: Xamarin.Forms.Style list,
                                               ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                               ?isTabStop: bool,
                                               ?scaleX: double,
                                               ?scaleY: double,
                                               ?tabIndex: int,
                                               ?childrenReordered: System.EventArgs -> unit,
                                               ?measureInvalidated: System.EventArgs -> unit,
                                               ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                               ?sizeChanged: System.EventArgs -> unit,
                                               ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                               ?classId: string,
                                               ?styleId: string,
                                               ?automationId: string,
                                               ?created: (Xamarin.Forms.CarouselPage -> unit),
                                               ?ref: ViewRef<Xamarin.Forms.CarouselPage>) = 

        let attribBuilder = ViewBuilders.BuildCarouselPage(0,
                               ?children=children,
                               ?currentPage=currentPage,
                               ?currentPageChanged=currentPageChanged,
                               ?title=title,
                               ?backgroundImage=backgroundImage,
                               ?icon=icon,
                               ?isBusy=isBusy,
                               ?padding=padding,
                               ?toolbarItems=toolbarItems,
                               ?useSafeArea=useSafeArea,
                               ?appearing=appearing,
                               ?disappearing=disappearing,
                               ?layoutChanged=layoutChanged,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.CarouselPage> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.CarouselPage>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.CarouselPage>(ViewBuilders.CreateFuncCarouselPage, ViewBuilders.UpdateFuncCarouselPage, attribBuilder)

    /// Builds the attributes for a NavigationPage in the view
    static member inline BuildNavigationPage(attribCount: int,
                                             ?pages: ViewElement list,
                                             ?barBackgroundColor: Xamarin.Forms.Color,
                                             ?barTextColor: Xamarin.Forms.Color,
                                             ?popped: Xamarin.Forms.NavigationEventArgs -> unit,
                                             ?poppedToRoot: Xamarin.Forms.NavigationEventArgs -> unit,
                                             ?pushed: Xamarin.Forms.NavigationEventArgs -> unit,
                                             ?title: string,
                                             ?backgroundImage: string,
                                             ?icon: string,
                                             ?isBusy: bool,
                                             ?padding: obj,
                                             ?toolbarItems: ViewElement list,
                                             ?useSafeArea: bool,
                                             ?appearing: unit -> unit,
                                             ?disappearing: unit -> unit,
                                             ?layoutChanged: unit -> unit,
                                             ?anchorX: double,
                                             ?anchorY: double,
                                             ?backgroundColor: Xamarin.Forms.Color,
                                             ?heightRequest: double,
                                             ?inputTransparent: bool,
                                             ?isEnabled: bool,
                                             ?isVisible: bool,
                                             ?minimumHeightRequest: double,
                                             ?minimumWidthRequest: double,
                                             ?opacity: double,
                                             ?rotation: double,
                                             ?rotationX: double,
                                             ?rotationY: double,
                                             ?scale: double,
                                             ?style: Xamarin.Forms.Style,
                                             ?styleClass: obj,
                                             ?translationX: double,
                                             ?translationY: double,
                                             ?widthRequest: double,
                                             ?resources: (string * obj) list,
                                             ?styles: Xamarin.Forms.Style list,
                                             ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                             ?isTabStop: bool,
                                             ?scaleX: double,
                                             ?scaleY: double,
                                             ?tabIndex: int,
                                             ?childrenReordered: System.EventArgs -> unit,
                                             ?measureInvalidated: System.EventArgs -> unit,
                                             ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                             ?sizeChanged: System.EventArgs -> unit,
                                             ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                             ?classId: string,
                                             ?styleId: string,
                                             ?automationId: string,
                                             ?created: obj -> unit,
                                             ?ref: ViewRef) = 

        let attribCount = match pages with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match barBackgroundColor with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match barTextColor with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match popped with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match poppedToRoot with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match pushed with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildPage(attribCount, ?title=title, ?backgroundImage=backgroundImage, ?icon=icon, ?isBusy=isBusy, ?padding=padding, ?toolbarItems=toolbarItems, ?useSafeArea=useSafeArea, ?appearing=appearing, ?disappearing=disappearing, ?layoutChanged=layoutChanged, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match pages with None -> () | Some v -> attribBuilder.Add(ViewAttributes.PagesAttribKey, Array.ofList(v)) 
        match barBackgroundColor with None -> () | Some v -> attribBuilder.Add(ViewAttributes.BarBackgroundColorAttribKey, (v)) 
        match barTextColor with None -> () | Some v -> attribBuilder.Add(ViewAttributes.BarTextColorAttribKey, (v)) 
        match popped with None -> () | Some v -> attribBuilder.Add(ViewAttributes.PoppedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.NavigationEventArgs>(fun sender args -> f args))(v)) 
        match poppedToRoot with None -> () | Some v -> attribBuilder.Add(ViewAttributes.PoppedToRootAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.NavigationEventArgs>(fun sender args -> f args))(v)) 
        match pushed with None -> () | Some v -> attribBuilder.Add(ViewAttributes.PushedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.NavigationEventArgs>(fun sender args -> f args))(v)) 
        attribBuilder

    static member val CreateFuncNavigationPage : (unit -> Xamarin.Forms.NavigationPage) = (fun () -> ViewBuilders.CreateNavigationPage())

    static member CreateNavigationPage () : Xamarin.Forms.NavigationPage =
        upcast (new Xamarin.Forms.NavigationPage())

    static member val UpdateFuncNavigationPage =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.NavigationPage) -> ViewBuilders.UpdateNavigationPage (prevOpt, curr, target)) 

    static member UpdateNavigationPage (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.NavigationPage) = 
        // update the inherited Page element
        let baseElement = (if ViewProto.ProtoPage.IsNone then ViewProto.ProtoPage <- Some (ViewBuilders.ConstructPage())); ViewProto.ProtoPage.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevPagesOpt = ValueNone
        let mutable currPagesOpt = ValueNone
        let mutable prevBarBackgroundColorOpt = ValueNone
        let mutable currBarBackgroundColorOpt = ValueNone
        let mutable prevBarTextColorOpt = ValueNone
        let mutable currBarTextColorOpt = ValueNone
        let mutable prevPoppedOpt = ValueNone
        let mutable currPoppedOpt = ValueNone
        let mutable prevPoppedToRootOpt = ValueNone
        let mutable currPoppedToRootOpt = ValueNone
        let mutable prevPushedOpt = ValueNone
        let mutable currPushedOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.PagesAttribKey.KeyValue then 
                currPagesOpt <- ValueSome (kvp.Value :?> ViewElement[])
            if kvp.Key = ViewAttributes.BarBackgroundColorAttribKey.KeyValue then 
                currBarBackgroundColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
            if kvp.Key = ViewAttributes.BarTextColorAttribKey.KeyValue then 
                currBarTextColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
            if kvp.Key = ViewAttributes.PoppedAttribKey.KeyValue then 
                currPoppedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.NavigationEventArgs>)
            if kvp.Key = ViewAttributes.PoppedToRootAttribKey.KeyValue then 
                currPoppedToRootOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.NavigationEventArgs>)
            if kvp.Key = ViewAttributes.PushedAttribKey.KeyValue then 
                currPushedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.NavigationEventArgs>)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.PagesAttribKey.KeyValue then 
                    prevPagesOpt <- ValueSome (kvp.Value :?> ViewElement[])
                if kvp.Key = ViewAttributes.BarBackgroundColorAttribKey.KeyValue then 
                    prevBarBackgroundColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
                if kvp.Key = ViewAttributes.BarTextColorAttribKey.KeyValue then 
                    prevBarTextColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
                if kvp.Key = ViewAttributes.PoppedAttribKey.KeyValue then 
                    prevPoppedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.NavigationEventArgs>)
                if kvp.Key = ViewAttributes.PoppedToRootAttribKey.KeyValue then 
                    prevPoppedToRootOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.NavigationEventArgs>)
                if kvp.Key = ViewAttributes.PushedAttribKey.KeyValue then 
                    prevPushedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.NavigationEventArgs>)
        updateNavigationPages prevPagesOpt currPagesOpt target
            (fun prevChildOpt newChild targetChild -> 
                // Adjust the attached properties
                let prevChildValueOpt = match prevChildOpt with ValueNone -> ValueNone | ValueSome prevChild -> prevChild.TryGetAttributeKeyed<string>(ViewAttributes.BackButtonTitleAttribKey)
                let childValueOpt = newChild.TryGetAttributeKeyed<string>(ViewAttributes.BackButtonTitleAttribKey)
                match prevChildValueOpt, childValueOpt with
                | ValueSome prevChildValue, ValueSome currValue when prevChildValue = currValue -> ()
                | _, ValueSome currValue -> Xamarin.Forms.NavigationPage.SetBackButtonTitle(targetChild, currValue)
                | ValueSome _, ValueNone -> Xamarin.Forms.NavigationPage.SetBackButtonTitle(targetChild, null) // TODO: not always perfect, should set back to original default?
                | _ -> ()
                // Adjust the attached properties
                let prevChildValueOpt = match prevChildOpt with ValueNone -> ValueNone | ValueSome prevChild -> prevChild.TryGetAttributeKeyed<bool>(ViewAttributes.HasBackButtonAttribKey)
                let childValueOpt = newChild.TryGetAttributeKeyed<bool>(ViewAttributes.HasBackButtonAttribKey)
                match prevChildValueOpt, childValueOpt with
                | ValueSome prevChildValue, ValueSome currValue when prevChildValue = currValue -> ()
                | _, ValueSome currValue -> Xamarin.Forms.NavigationPage.SetHasBackButton(targetChild, currValue)
                | ValueSome _, ValueNone -> Xamarin.Forms.NavigationPage.SetHasBackButton(targetChild, true) // TODO: not always perfect, should set back to original default?
                | _ -> ()
                // Adjust the attached properties
                let prevChildValueOpt = match prevChildOpt with ValueNone -> ValueNone | ValueSome prevChild -> prevChild.TryGetAttributeKeyed<bool>(ViewAttributes.HasNavigationBarAttribKey)
                let childValueOpt = newChild.TryGetAttributeKeyed<bool>(ViewAttributes.HasNavigationBarAttribKey)
                match prevChildValueOpt, childValueOpt with
                | ValueSome prevChildValue, ValueSome currValue when prevChildValue = currValue -> ()
                | _, ValueSome currValue -> Xamarin.Forms.NavigationPage.SetHasNavigationBar(targetChild, currValue)
                | ValueSome _, ValueNone -> Xamarin.Forms.NavigationPage.SetHasNavigationBar(targetChild, true) // TODO: not always perfect, should set back to original default?
                | _ -> ()
                // Adjust the attached properties
                let prevChildValueOpt = match prevChildOpt with ValueNone -> ValueNone | ValueSome prevChild -> prevChild.TryGetAttributeKeyed<string>(ViewAttributes.TitleIconAttribKey)
                let childValueOpt = newChild.TryGetAttributeKeyed<string>(ViewAttributes.TitleIconAttribKey)
                match prevChildValueOpt, childValueOpt with
                | ValueSome prevChildValue, ValueSome currValue when prevChildValue = currValue -> ()
                | _, ValueSome currValue -> Xamarin.Forms.NavigationPage.SetTitleIcon(targetChild, makeFileImageSource currValue)
                | ValueSome _, ValueNone -> Xamarin.Forms.NavigationPage.SetTitleIcon(targetChild, null) // TODO: not always perfect, should set back to original default?
                | _ -> ()
                // Adjust the attached properties
                let prevChildValueOpt = match prevChildOpt with ValueNone -> ValueNone | ValueSome prevChild -> prevChild.TryGetAttributeKeyed<ViewElement>(ViewAttributes.TitleViewAttribKey)
                let childValueOpt = newChild.TryGetAttributeKeyed<ViewElement>(ViewAttributes.TitleViewAttribKey)
                updatePageTitleView prevChildValueOpt childValueOpt targetChild
                ())
        match prevBarBackgroundColorOpt, currBarBackgroundColorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.BarBackgroundColor <-  currValue
        | ValueSome _, ValueNone -> target.BarBackgroundColor <- Xamarin.Forms.Color.Default
        | ValueNone, ValueNone -> ()
        match prevBarTextColorOpt, currBarTextColorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.BarTextColor <-  currValue
        | ValueSome _, ValueNone -> target.BarTextColor <- Xamarin.Forms.Color.Default
        | ValueNone, ValueNone -> ()
        match prevPoppedOpt, currPoppedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.Popped.RemoveHandler(prevValue); target.Popped.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.Popped.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.Popped.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevPoppedToRootOpt, currPoppedToRootOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.PoppedToRoot.RemoveHandler(prevValue); target.PoppedToRoot.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.PoppedToRoot.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.PoppedToRoot.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevPushedOpt, currPushedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.Pushed.RemoveHandler(prevValue); target.Pushed.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.Pushed.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.Pushed.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()

    static member inline ConstructNavigationPage(?pages: ViewElement list,
                                                 ?barBackgroundColor: Xamarin.Forms.Color,
                                                 ?barTextColor: Xamarin.Forms.Color,
                                                 ?popped: Xamarin.Forms.NavigationEventArgs -> unit,
                                                 ?poppedToRoot: Xamarin.Forms.NavigationEventArgs -> unit,
                                                 ?pushed: Xamarin.Forms.NavigationEventArgs -> unit,
                                                 ?title: string,
                                                 ?backgroundImage: string,
                                                 ?icon: string,
                                                 ?isBusy: bool,
                                                 ?padding: obj,
                                                 ?toolbarItems: ViewElement list,
                                                 ?useSafeArea: bool,
                                                 ?appearing: unit -> unit,
                                                 ?disappearing: unit -> unit,
                                                 ?layoutChanged: unit -> unit,
                                                 ?anchorX: double,
                                                 ?anchorY: double,
                                                 ?backgroundColor: Xamarin.Forms.Color,
                                                 ?heightRequest: double,
                                                 ?inputTransparent: bool,
                                                 ?isEnabled: bool,
                                                 ?isVisible: bool,
                                                 ?minimumHeightRequest: double,
                                                 ?minimumWidthRequest: double,
                                                 ?opacity: double,
                                                 ?rotation: double,
                                                 ?rotationX: double,
                                                 ?rotationY: double,
                                                 ?scale: double,
                                                 ?style: Xamarin.Forms.Style,
                                                 ?styleClass: obj,
                                                 ?translationX: double,
                                                 ?translationY: double,
                                                 ?widthRequest: double,
                                                 ?resources: (string * obj) list,
                                                 ?styles: Xamarin.Forms.Style list,
                                                 ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                                 ?isTabStop: bool,
                                                 ?scaleX: double,
                                                 ?scaleY: double,
                                                 ?tabIndex: int,
                                                 ?childrenReordered: System.EventArgs -> unit,
                                                 ?measureInvalidated: System.EventArgs -> unit,
                                                 ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                                 ?sizeChanged: System.EventArgs -> unit,
                                                 ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                                 ?classId: string,
                                                 ?styleId: string,
                                                 ?automationId: string,
                                                 ?created: (Xamarin.Forms.NavigationPage -> unit),
                                                 ?ref: ViewRef<Xamarin.Forms.NavigationPage>) = 

        let attribBuilder = ViewBuilders.BuildNavigationPage(0,
                               ?pages=pages,
                               ?barBackgroundColor=barBackgroundColor,
                               ?barTextColor=barTextColor,
                               ?popped=popped,
                               ?poppedToRoot=poppedToRoot,
                               ?pushed=pushed,
                               ?title=title,
                               ?backgroundImage=backgroundImage,
                               ?icon=icon,
                               ?isBusy=isBusy,
                               ?padding=padding,
                               ?toolbarItems=toolbarItems,
                               ?useSafeArea=useSafeArea,
                               ?appearing=appearing,
                               ?disappearing=disappearing,
                               ?layoutChanged=layoutChanged,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.NavigationPage> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.NavigationPage>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.NavigationPage>(ViewBuilders.CreateFuncNavigationPage, ViewBuilders.UpdateFuncNavigationPage, attribBuilder)

    /// Builds the attributes for a TabbedPage in the view
    static member inline BuildTabbedPage(attribCount: int,
                                         ?children: ViewElement list,
                                         ?barBackgroundColor: Xamarin.Forms.Color,
                                         ?barTextColor: Xamarin.Forms.Color,
                                         ?currentPage: int,
                                         ?currentPageChanged: int option -> unit,
                                         ?title: string,
                                         ?backgroundImage: string,
                                         ?icon: string,
                                         ?isBusy: bool,
                                         ?padding: obj,
                                         ?toolbarItems: ViewElement list,
                                         ?useSafeArea: bool,
                                         ?appearing: unit -> unit,
                                         ?disappearing: unit -> unit,
                                         ?layoutChanged: unit -> unit,
                                         ?anchorX: double,
                                         ?anchorY: double,
                                         ?backgroundColor: Xamarin.Forms.Color,
                                         ?heightRequest: double,
                                         ?inputTransparent: bool,
                                         ?isEnabled: bool,
                                         ?isVisible: bool,
                                         ?minimumHeightRequest: double,
                                         ?minimumWidthRequest: double,
                                         ?opacity: double,
                                         ?rotation: double,
                                         ?rotationX: double,
                                         ?rotationY: double,
                                         ?scale: double,
                                         ?style: Xamarin.Forms.Style,
                                         ?styleClass: obj,
                                         ?translationX: double,
                                         ?translationY: double,
                                         ?widthRequest: double,
                                         ?resources: (string * obj) list,
                                         ?styles: Xamarin.Forms.Style list,
                                         ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                         ?isTabStop: bool,
                                         ?scaleX: double,
                                         ?scaleY: double,
                                         ?tabIndex: int,
                                         ?childrenReordered: System.EventArgs -> unit,
                                         ?measureInvalidated: System.EventArgs -> unit,
                                         ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                         ?sizeChanged: System.EventArgs -> unit,
                                         ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                         ?classId: string,
                                         ?styleId: string,
                                         ?automationId: string,
                                         ?created: obj -> unit,
                                         ?ref: ViewRef) = 

        let attribCount = match children with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match barBackgroundColor with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match barTextColor with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match currentPage with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match currentPageChanged with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildPage(attribCount, ?title=title, ?backgroundImage=backgroundImage, ?icon=icon, ?isBusy=isBusy, ?padding=padding, ?toolbarItems=toolbarItems, ?useSafeArea=useSafeArea, ?appearing=appearing, ?disappearing=disappearing, ?layoutChanged=layoutChanged, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match children with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ChildrenAttribKey, Array.ofList(v)) 
        match barBackgroundColor with None -> () | Some v -> attribBuilder.Add(ViewAttributes.BarBackgroundColorAttribKey, (v)) 
        match barTextColor with None -> () | Some v -> attribBuilder.Add(ViewAttributes.BarTextColorAttribKey, (v)) 
        match currentPage with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TabbedPage_CurrentPageAttribKey, (v)) 
        match currentPageChanged with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TabbedPage_CurrentPageChangedAttribKey, makeCurrentPageChanged<Xamarin.Forms.Page>(v)) 
        attribBuilder

    static member val CreateFuncTabbedPage : (unit -> Xamarin.Forms.TabbedPage) = (fun () -> ViewBuilders.CreateTabbedPage())

    static member CreateTabbedPage () : Xamarin.Forms.TabbedPage =
        upcast (new Xamarin.Forms.TabbedPage())

    static member val UpdateFuncTabbedPage =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.TabbedPage) -> ViewBuilders.UpdateTabbedPage (prevOpt, curr, target)) 

    static member UpdateTabbedPage (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.TabbedPage) = 
        // update the inherited Page element
        let baseElement = (if ViewProto.ProtoPage.IsNone then ViewProto.ProtoPage <- Some (ViewBuilders.ConstructPage())); ViewProto.ProtoPage.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevChildrenOpt = ValueNone
        let mutable currChildrenOpt = ValueNone
        let mutable prevBarBackgroundColorOpt = ValueNone
        let mutable currBarBackgroundColorOpt = ValueNone
        let mutable prevBarTextColorOpt = ValueNone
        let mutable currBarTextColorOpt = ValueNone
        let mutable prevTabbedPage_CurrentPageOpt = ValueNone
        let mutable currTabbedPage_CurrentPageOpt = ValueNone
        let mutable prevTabbedPage_CurrentPageChangedOpt = ValueNone
        let mutable currTabbedPage_CurrentPageChangedOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.ChildrenAttribKey.KeyValue then 
                currChildrenOpt <- ValueSome (kvp.Value :?> ViewElement[])
            if kvp.Key = ViewAttributes.BarBackgroundColorAttribKey.KeyValue then 
                currBarBackgroundColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
            if kvp.Key = ViewAttributes.BarTextColorAttribKey.KeyValue then 
                currBarTextColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
            if kvp.Key = ViewAttributes.TabbedPage_CurrentPageAttribKey.KeyValue then 
                currTabbedPage_CurrentPageOpt <- ValueSome (kvp.Value :?> int)
            if kvp.Key = ViewAttributes.TabbedPage_CurrentPageChangedAttribKey.KeyValue then 
                currTabbedPage_CurrentPageChangedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.ChildrenAttribKey.KeyValue then 
                    prevChildrenOpt <- ValueSome (kvp.Value :?> ViewElement[])
                if kvp.Key = ViewAttributes.BarBackgroundColorAttribKey.KeyValue then 
                    prevBarBackgroundColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
                if kvp.Key = ViewAttributes.BarTextColorAttribKey.KeyValue then 
                    prevBarTextColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
                if kvp.Key = ViewAttributes.TabbedPage_CurrentPageAttribKey.KeyValue then 
                    prevTabbedPage_CurrentPageOpt <- ValueSome (kvp.Value :?> int)
                if kvp.Key = ViewAttributes.TabbedPage_CurrentPageChangedAttribKey.KeyValue then 
                    prevTabbedPage_CurrentPageChangedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
        updateCollectionGeneric prevChildrenOpt currChildrenOpt target.Children
            (fun (x:ViewElement) -> x.Create() :?> Xamarin.Forms.Page)
            (fun _ _ _ -> ())
            canReuseChild
            updateChild
        match prevBarBackgroundColorOpt, currBarBackgroundColorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.BarBackgroundColor <-  currValue
        | ValueSome _, ValueNone -> target.BarBackgroundColor <- Xamarin.Forms.Color.Default
        | ValueNone, ValueNone -> ()
        match prevBarTextColorOpt, currBarTextColorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.BarTextColor <-  currValue
        | ValueSome _, ValueNone -> target.BarTextColor <- Xamarin.Forms.Color.Default
        | ValueNone, ValueNone -> ()
        updateCurrentPage<Xamarin.Forms.Page> prevTabbedPage_CurrentPageOpt currTabbedPage_CurrentPageOpt target
        match prevTabbedPage_CurrentPageChangedOpt, currTabbedPage_CurrentPageChangedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.CurrentPageChanged.RemoveHandler(prevValue); target.CurrentPageChanged.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.CurrentPageChanged.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.CurrentPageChanged.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()

    static member inline ConstructTabbedPage(?children: ViewElement list,
                                             ?barBackgroundColor: Xamarin.Forms.Color,
                                             ?barTextColor: Xamarin.Forms.Color,
                                             ?currentPage: int,
                                             ?currentPageChanged: int option -> unit,
                                             ?title: string,
                                             ?backgroundImage: string,
                                             ?icon: string,
                                             ?isBusy: bool,
                                             ?padding: obj,
                                             ?toolbarItems: ViewElement list,
                                             ?useSafeArea: bool,
                                             ?appearing: unit -> unit,
                                             ?disappearing: unit -> unit,
                                             ?layoutChanged: unit -> unit,
                                             ?anchorX: double,
                                             ?anchorY: double,
                                             ?backgroundColor: Xamarin.Forms.Color,
                                             ?heightRequest: double,
                                             ?inputTransparent: bool,
                                             ?isEnabled: bool,
                                             ?isVisible: bool,
                                             ?minimumHeightRequest: double,
                                             ?minimumWidthRequest: double,
                                             ?opacity: double,
                                             ?rotation: double,
                                             ?rotationX: double,
                                             ?rotationY: double,
                                             ?scale: double,
                                             ?style: Xamarin.Forms.Style,
                                             ?styleClass: obj,
                                             ?translationX: double,
                                             ?translationY: double,
                                             ?widthRequest: double,
                                             ?resources: (string * obj) list,
                                             ?styles: Xamarin.Forms.Style list,
                                             ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                             ?isTabStop: bool,
                                             ?scaleX: double,
                                             ?scaleY: double,
                                             ?tabIndex: int,
                                             ?childrenReordered: System.EventArgs -> unit,
                                             ?measureInvalidated: System.EventArgs -> unit,
                                             ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                             ?sizeChanged: System.EventArgs -> unit,
                                             ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                             ?classId: string,
                                             ?styleId: string,
                                             ?automationId: string,
                                             ?created: (Xamarin.Forms.TabbedPage -> unit),
                                             ?ref: ViewRef<Xamarin.Forms.TabbedPage>) = 

        let attribBuilder = ViewBuilders.BuildTabbedPage(0,
                               ?children=children,
                               ?barBackgroundColor=barBackgroundColor,
                               ?barTextColor=barTextColor,
                               ?currentPage=currentPage,
                               ?currentPageChanged=currentPageChanged,
                               ?title=title,
                               ?backgroundImage=backgroundImage,
                               ?icon=icon,
                               ?isBusy=isBusy,
                               ?padding=padding,
                               ?toolbarItems=toolbarItems,
                               ?useSafeArea=useSafeArea,
                               ?appearing=appearing,
                               ?disappearing=disappearing,
                               ?layoutChanged=layoutChanged,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.TabbedPage> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.TabbedPage>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.TabbedPage>(ViewBuilders.CreateFuncTabbedPage, ViewBuilders.UpdateFuncTabbedPage, attribBuilder)

    /// Builds the attributes for a ContentPage in the view
    static member inline BuildContentPage(attribCount: int,
                                          ?content: ViewElement,
                                          ?onSizeAllocated: (double * double) -> unit,
                                          ?title: string,
                                          ?backgroundImage: string,
                                          ?icon: string,
                                          ?isBusy: bool,
                                          ?padding: obj,
                                          ?toolbarItems: ViewElement list,
                                          ?useSafeArea: bool,
                                          ?appearing: unit -> unit,
                                          ?disappearing: unit -> unit,
                                          ?layoutChanged: unit -> unit,
                                          ?anchorX: double,
                                          ?anchorY: double,
                                          ?backgroundColor: Xamarin.Forms.Color,
                                          ?heightRequest: double,
                                          ?inputTransparent: bool,
                                          ?isEnabled: bool,
                                          ?isVisible: bool,
                                          ?minimumHeightRequest: double,
                                          ?minimumWidthRequest: double,
                                          ?opacity: double,
                                          ?rotation: double,
                                          ?rotationX: double,
                                          ?rotationY: double,
                                          ?scale: double,
                                          ?style: Xamarin.Forms.Style,
                                          ?styleClass: obj,
                                          ?translationX: double,
                                          ?translationY: double,
                                          ?widthRequest: double,
                                          ?resources: (string * obj) list,
                                          ?styles: Xamarin.Forms.Style list,
                                          ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                          ?isTabStop: bool,
                                          ?scaleX: double,
                                          ?scaleY: double,
                                          ?tabIndex: int,
                                          ?childrenReordered: System.EventArgs -> unit,
                                          ?measureInvalidated: System.EventArgs -> unit,
                                          ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                          ?sizeChanged: System.EventArgs -> unit,
                                          ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                          ?classId: string,
                                          ?styleId: string,
                                          ?automationId: string,
                                          ?created: obj -> unit,
                                          ?ref: ViewRef) = 

        let attribCount = match content with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match onSizeAllocated with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildPage(attribCount, ?title=title, ?backgroundImage=backgroundImage, ?icon=icon, ?isBusy=isBusy, ?padding=padding, ?toolbarItems=toolbarItems, ?useSafeArea=useSafeArea, ?appearing=appearing, ?disappearing=disappearing, ?layoutChanged=layoutChanged, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match content with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ContentAttribKey, (v)) 
        match onSizeAllocated with None -> () | Some v -> attribBuilder.Add(ViewAttributes.OnSizeAllocatedCallbackAttribKey, (fun f -> FSharp.Control.Handler<_>(fun _sender args -> f args))(v)) 
        attribBuilder

    static member val CreateFuncContentPage : (unit -> Xamarin.Forms.ContentPage) = (fun () -> ViewBuilders.CreateContentPage())

    static member CreateContentPage () : Xamarin.Forms.ContentPage =
        upcast (new Fabulous.DynamicViews.CustomContentPage())

    static member val UpdateFuncContentPage =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.ContentPage) -> ViewBuilders.UpdateContentPage (prevOpt, curr, target)) 

    static member UpdateContentPage (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.ContentPage) = 
        // update the inherited Page element
        let baseElement = (if ViewProto.ProtoPage.IsNone then ViewProto.ProtoPage <- Some (ViewBuilders.ConstructPage())); ViewProto.ProtoPage.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevContentOpt = ValueNone
        let mutable currContentOpt = ValueNone
        let mutable prevOnSizeAllocatedCallbackOpt = ValueNone
        let mutable currOnSizeAllocatedCallbackOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.ContentAttribKey.KeyValue then 
                currContentOpt <- ValueSome (kvp.Value :?> ViewElement)
            if kvp.Key = ViewAttributes.OnSizeAllocatedCallbackAttribKey.KeyValue then 
                currOnSizeAllocatedCallbackOpt <- ValueSome (kvp.Value :?> FSharp.Control.Handler<(double * double)>)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.ContentAttribKey.KeyValue then 
                    prevContentOpt <- ValueSome (kvp.Value :?> ViewElement)
                if kvp.Key = ViewAttributes.OnSizeAllocatedCallbackAttribKey.KeyValue then 
                    prevOnSizeAllocatedCallbackOpt <- ValueSome (kvp.Value :?> FSharp.Control.Handler<(double * double)>)
        match prevContentOpt, currContentOpt with
        // For structured objects, dependsOn on reference equality
        | ValueSome prevValue, ValueSome newValue when identical prevValue newValue -> ()
        | ValueSome prevValue, ValueSome newValue when canReuseChild prevValue newValue ->
            newValue.UpdateIncremental(prevValue, target.Content)
        | _, ValueSome newValue ->
            target.Content <- (newValue.Create() :?> Xamarin.Forms.View)
        | ValueSome _, ValueNone ->
            target.Content <- null
        | ValueNone, ValueNone -> ()
        updateOnSizeAllocated prevOnSizeAllocatedCallbackOpt currOnSizeAllocatedCallbackOpt target

    static member inline ConstructContentPage(?content: ViewElement,
                                              ?onSizeAllocated: (double * double) -> unit,
                                              ?title: string,
                                              ?backgroundImage: string,
                                              ?icon: string,
                                              ?isBusy: bool,
                                              ?padding: obj,
                                              ?toolbarItems: ViewElement list,
                                              ?useSafeArea: bool,
                                              ?appearing: unit -> unit,
                                              ?disappearing: unit -> unit,
                                              ?layoutChanged: unit -> unit,
                                              ?anchorX: double,
                                              ?anchorY: double,
                                              ?backgroundColor: Xamarin.Forms.Color,
                                              ?heightRequest: double,
                                              ?inputTransparent: bool,
                                              ?isEnabled: bool,
                                              ?isVisible: bool,
                                              ?minimumHeightRequest: double,
                                              ?minimumWidthRequest: double,
                                              ?opacity: double,
                                              ?rotation: double,
                                              ?rotationX: double,
                                              ?rotationY: double,
                                              ?scale: double,
                                              ?style: Xamarin.Forms.Style,
                                              ?styleClass: obj,
                                              ?translationX: double,
                                              ?translationY: double,
                                              ?widthRequest: double,
                                              ?resources: (string * obj) list,
                                              ?styles: Xamarin.Forms.Style list,
                                              ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                              ?isTabStop: bool,
                                              ?scaleX: double,
                                              ?scaleY: double,
                                              ?tabIndex: int,
                                              ?childrenReordered: System.EventArgs -> unit,
                                              ?measureInvalidated: System.EventArgs -> unit,
                                              ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                              ?sizeChanged: System.EventArgs -> unit,
                                              ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                              ?classId: string,
                                              ?styleId: string,
                                              ?automationId: string,
                                              ?created: (Xamarin.Forms.ContentPage -> unit),
                                              ?ref: ViewRef<Xamarin.Forms.ContentPage>) = 

        let attribBuilder = ViewBuilders.BuildContentPage(0,
                               ?content=content,
                               ?onSizeAllocated=onSizeAllocated,
                               ?title=title,
                               ?backgroundImage=backgroundImage,
                               ?icon=icon,
                               ?isBusy=isBusy,
                               ?padding=padding,
                               ?toolbarItems=toolbarItems,
                               ?useSafeArea=useSafeArea,
                               ?appearing=appearing,
                               ?disappearing=disappearing,
                               ?layoutChanged=layoutChanged,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.ContentPage> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.ContentPage>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.ContentPage>(ViewBuilders.CreateFuncContentPage, ViewBuilders.UpdateFuncContentPage, attribBuilder)

    /// Builds the attributes for a MasterDetailPage in the view
    static member inline BuildMasterDetailPage(attribCount: int,
                                               ?master: ViewElement,
                                               ?detail: ViewElement,
                                               ?isGestureEnabled: bool,
                                               ?isPresented: bool,
                                               ?masterBehavior: Xamarin.Forms.MasterBehavior,
                                               ?isPresentedChanged: bool -> unit,
                                               ?title: string,
                                               ?backgroundImage: string,
                                               ?icon: string,
                                               ?isBusy: bool,
                                               ?padding: obj,
                                               ?toolbarItems: ViewElement list,
                                               ?useSafeArea: bool,
                                               ?appearing: unit -> unit,
                                               ?disappearing: unit -> unit,
                                               ?layoutChanged: unit -> unit,
                                               ?anchorX: double,
                                               ?anchorY: double,
                                               ?backgroundColor: Xamarin.Forms.Color,
                                               ?heightRequest: double,
                                               ?inputTransparent: bool,
                                               ?isEnabled: bool,
                                               ?isVisible: bool,
                                               ?minimumHeightRequest: double,
                                               ?minimumWidthRequest: double,
                                               ?opacity: double,
                                               ?rotation: double,
                                               ?rotationX: double,
                                               ?rotationY: double,
                                               ?scale: double,
                                               ?style: Xamarin.Forms.Style,
                                               ?styleClass: obj,
                                               ?translationX: double,
                                               ?translationY: double,
                                               ?widthRequest: double,
                                               ?resources: (string * obj) list,
                                               ?styles: Xamarin.Forms.Style list,
                                               ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                               ?isTabStop: bool,
                                               ?scaleX: double,
                                               ?scaleY: double,
                                               ?tabIndex: int,
                                               ?childrenReordered: System.EventArgs -> unit,
                                               ?measureInvalidated: System.EventArgs -> unit,
                                               ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                               ?sizeChanged: System.EventArgs -> unit,
                                               ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                               ?classId: string,
                                               ?styleId: string,
                                               ?automationId: string,
                                               ?created: obj -> unit,
                                               ?ref: ViewRef) = 

        let attribCount = match master with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match detail with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match isGestureEnabled with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match isPresented with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match masterBehavior with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match isPresentedChanged with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildPage(attribCount, ?title=title, ?backgroundImage=backgroundImage, ?icon=icon, ?isBusy=isBusy, ?padding=padding, ?toolbarItems=toolbarItems, ?useSafeArea=useSafeArea, ?appearing=appearing, ?disappearing=disappearing, ?layoutChanged=layoutChanged, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match master with None -> () | Some v -> attribBuilder.Add(ViewAttributes.MasterAttribKey, (v)) 
        match detail with None -> () | Some v -> attribBuilder.Add(ViewAttributes.DetailAttribKey, (v)) 
        match isGestureEnabled with None -> () | Some v -> attribBuilder.Add(ViewAttributes.IsGestureEnabledAttribKey, (v)) 
        match isPresented with None -> () | Some v -> attribBuilder.Add(ViewAttributes.IsPresentedAttribKey, (v)) 
        match masterBehavior with None -> () | Some v -> attribBuilder.Add(ViewAttributes.MasterBehaviorAttribKey, (v)) 
        match isPresentedChanged with None -> () | Some v -> attribBuilder.Add(ViewAttributes.IsPresentedChangedAttribKey, (fun f -> System.EventHandler(fun sender args -> f (sender :?> Xamarin.Forms.MasterDetailPage).IsPresented))(v)) 
        attribBuilder

    static member val CreateFuncMasterDetailPage : (unit -> Xamarin.Forms.MasterDetailPage) = (fun () -> ViewBuilders.CreateMasterDetailPage())

    static member CreateMasterDetailPage () : Xamarin.Forms.MasterDetailPage =
        upcast (new Xamarin.Forms.MasterDetailPage())

    static member val UpdateFuncMasterDetailPage =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.MasterDetailPage) -> ViewBuilders.UpdateMasterDetailPage (prevOpt, curr, target)) 

    static member UpdateMasterDetailPage (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.MasterDetailPage) = 
        // update the inherited Page element
        let baseElement = (if ViewProto.ProtoPage.IsNone then ViewProto.ProtoPage <- Some (ViewBuilders.ConstructPage())); ViewProto.ProtoPage.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevMasterOpt = ValueNone
        let mutable currMasterOpt = ValueNone
        let mutable prevDetailOpt = ValueNone
        let mutable currDetailOpt = ValueNone
        let mutable prevIsGestureEnabledOpt = ValueNone
        let mutable currIsGestureEnabledOpt = ValueNone
        let mutable prevIsPresentedOpt = ValueNone
        let mutable currIsPresentedOpt = ValueNone
        let mutable prevMasterBehaviorOpt = ValueNone
        let mutable currMasterBehaviorOpt = ValueNone
        let mutable prevIsPresentedChangedOpt = ValueNone
        let mutable currIsPresentedChangedOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.MasterAttribKey.KeyValue then 
                currMasterOpt <- ValueSome (kvp.Value :?> ViewElement)
            if kvp.Key = ViewAttributes.DetailAttribKey.KeyValue then 
                currDetailOpt <- ValueSome (kvp.Value :?> ViewElement)
            if kvp.Key = ViewAttributes.IsGestureEnabledAttribKey.KeyValue then 
                currIsGestureEnabledOpt <- ValueSome (kvp.Value :?> bool)
            if kvp.Key = ViewAttributes.IsPresentedAttribKey.KeyValue then 
                currIsPresentedOpt <- ValueSome (kvp.Value :?> bool)
            if kvp.Key = ViewAttributes.MasterBehaviorAttribKey.KeyValue then 
                currMasterBehaviorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.MasterBehavior)
            if kvp.Key = ViewAttributes.IsPresentedChangedAttribKey.KeyValue then 
                currIsPresentedChangedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.MasterAttribKey.KeyValue then 
                    prevMasterOpt <- ValueSome (kvp.Value :?> ViewElement)
                if kvp.Key = ViewAttributes.DetailAttribKey.KeyValue then 
                    prevDetailOpt <- ValueSome (kvp.Value :?> ViewElement)
                if kvp.Key = ViewAttributes.IsGestureEnabledAttribKey.KeyValue then 
                    prevIsGestureEnabledOpt <- ValueSome (kvp.Value :?> bool)
                if kvp.Key = ViewAttributes.IsPresentedAttribKey.KeyValue then 
                    prevIsPresentedOpt <- ValueSome (kvp.Value :?> bool)
                if kvp.Key = ViewAttributes.MasterBehaviorAttribKey.KeyValue then 
                    prevMasterBehaviorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.MasterBehavior)
                if kvp.Key = ViewAttributes.IsPresentedChangedAttribKey.KeyValue then 
                    prevIsPresentedChangedOpt <- ValueSome (kvp.Value :?> System.EventHandler)
        match prevMasterOpt, currMasterOpt with
        // For structured objects, dependsOn on reference equality
        | ValueSome prevValue, ValueSome newValue when identical prevValue newValue -> ()
        | ValueSome prevValue, ValueSome newValue when canReuseChild prevValue newValue ->
            newValue.UpdateIncremental(prevValue, target.Master)
        | _, ValueSome newValue ->
            target.Master <- (newValue.Create() :?> Xamarin.Forms.Page)
        | ValueSome _, ValueNone ->
            target.Master <- null
        | ValueNone, ValueNone -> ()
        match prevDetailOpt, currDetailOpt with
        // For structured objects, dependsOn on reference equality
        | ValueSome prevValue, ValueSome newValue when identical prevValue newValue -> ()
        | ValueSome prevValue, ValueSome newValue when canReuseChild prevValue newValue ->
            newValue.UpdateIncremental(prevValue, target.Detail)
        | _, ValueSome newValue ->
            target.Detail <- (newValue.Create() :?> Xamarin.Forms.Page)
        | ValueSome _, ValueNone ->
            target.Detail <- null
        | ValueNone, ValueNone -> ()
        match prevIsGestureEnabledOpt, currIsGestureEnabledOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.IsGestureEnabled <-  currValue
        | ValueSome _, ValueNone -> target.IsGestureEnabled <- true
        | ValueNone, ValueNone -> ()
        match prevIsPresentedOpt, currIsPresentedOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.IsPresented <-  currValue
        | ValueSome _, ValueNone -> target.IsPresented <- true
        | ValueNone, ValueNone -> ()
        match prevMasterBehaviorOpt, currMasterBehaviorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.MasterBehavior <-  currValue
        | ValueSome _, ValueNone -> target.MasterBehavior <- Xamarin.Forms.MasterBehavior.Default
        | ValueNone, ValueNone -> ()
        match prevIsPresentedChangedOpt, currIsPresentedChangedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.IsPresentedChanged.RemoveHandler(prevValue); target.IsPresentedChanged.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.IsPresentedChanged.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.IsPresentedChanged.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()

    static member inline ConstructMasterDetailPage(?master: ViewElement,
                                                   ?detail: ViewElement,
                                                   ?isGestureEnabled: bool,
                                                   ?isPresented: bool,
                                                   ?masterBehavior: Xamarin.Forms.MasterBehavior,
                                                   ?isPresentedChanged: bool -> unit,
                                                   ?title: string,
                                                   ?backgroundImage: string,
                                                   ?icon: string,
                                                   ?isBusy: bool,
                                                   ?padding: obj,
                                                   ?toolbarItems: ViewElement list,
                                                   ?useSafeArea: bool,
                                                   ?appearing: unit -> unit,
                                                   ?disappearing: unit -> unit,
                                                   ?layoutChanged: unit -> unit,
                                                   ?anchorX: double,
                                                   ?anchorY: double,
                                                   ?backgroundColor: Xamarin.Forms.Color,
                                                   ?heightRequest: double,
                                                   ?inputTransparent: bool,
                                                   ?isEnabled: bool,
                                                   ?isVisible: bool,
                                                   ?minimumHeightRequest: double,
                                                   ?minimumWidthRequest: double,
                                                   ?opacity: double,
                                                   ?rotation: double,
                                                   ?rotationX: double,
                                                   ?rotationY: double,
                                                   ?scale: double,
                                                   ?style: Xamarin.Forms.Style,
                                                   ?styleClass: obj,
                                                   ?translationX: double,
                                                   ?translationY: double,
                                                   ?widthRequest: double,
                                                   ?resources: (string * obj) list,
                                                   ?styles: Xamarin.Forms.Style list,
                                                   ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                                   ?isTabStop: bool,
                                                   ?scaleX: double,
                                                   ?scaleY: double,
                                                   ?tabIndex: int,
                                                   ?childrenReordered: System.EventArgs -> unit,
                                                   ?measureInvalidated: System.EventArgs -> unit,
                                                   ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                                   ?sizeChanged: System.EventArgs -> unit,
                                                   ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                                   ?classId: string,
                                                   ?styleId: string,
                                                   ?automationId: string,
                                                   ?created: (Xamarin.Forms.MasterDetailPage -> unit),
                                                   ?ref: ViewRef<Xamarin.Forms.MasterDetailPage>) = 

        let attribBuilder = ViewBuilders.BuildMasterDetailPage(0,
                               ?master=master,
                               ?detail=detail,
                               ?isGestureEnabled=isGestureEnabled,
                               ?isPresented=isPresented,
                               ?masterBehavior=masterBehavior,
                               ?isPresentedChanged=isPresentedChanged,
                               ?title=title,
                               ?backgroundImage=backgroundImage,
                               ?icon=icon,
                               ?isBusy=isBusy,
                               ?padding=padding,
                               ?toolbarItems=toolbarItems,
                               ?useSafeArea=useSafeArea,
                               ?appearing=appearing,
                               ?disappearing=disappearing,
                               ?layoutChanged=layoutChanged,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.MasterDetailPage> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.MasterDetailPage>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.MasterDetailPage>(ViewBuilders.CreateFuncMasterDetailPage, ViewBuilders.UpdateFuncMasterDetailPage, attribBuilder)

    /// Builds the attributes for a MenuItem in the view
    static member inline BuildMenuItem(attribCount: int,
                                       ?text: string,
                                       ?command: unit -> unit,
                                       ?commandParameter: System.Object,
                                       ?icon: string,
                                       ?accelerator: string,
                                       ?classId: string,
                                       ?styleId: string,
                                       ?automationId: string,
                                       ?created: obj -> unit,
                                       ?ref: ViewRef) = 

        let attribCount = match text with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match command with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match commandParameter with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match icon with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match accelerator with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildElement(attribCount, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match text with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TextAttribKey, (v)) 
        match command with None -> () | Some v -> attribBuilder.Add(ViewAttributes.CommandAttribKey, makeCommand(v)) 
        match commandParameter with None -> () | Some v -> attribBuilder.Add(ViewAttributes.CommandParameterAttribKey, (v)) 
        match icon with None -> () | Some v -> attribBuilder.Add(ViewAttributes.IconAttribKey, (v)) 
        match accelerator with None -> () | Some v -> attribBuilder.Add(ViewAttributes.AcceleratorAttribKey, (v)) 
        attribBuilder

    static member val CreateFuncMenuItem : (unit -> Xamarin.Forms.MenuItem) = (fun () -> ViewBuilders.CreateMenuItem())

    static member CreateMenuItem () : Xamarin.Forms.MenuItem =
        upcast (new Xamarin.Forms.MenuItem())

    static member val UpdateFuncMenuItem =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.MenuItem) -> ViewBuilders.UpdateMenuItem (prevOpt, curr, target)) 

    static member UpdateMenuItem (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.MenuItem) = 
        // update the inherited Element element
        let baseElement = (if ViewProto.ProtoElement.IsNone then ViewProto.ProtoElement <- Some (ViewBuilders.ConstructElement())); ViewProto.ProtoElement.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevTextOpt = ValueNone
        let mutable currTextOpt = ValueNone
        let mutable prevCommandOpt = ValueNone
        let mutable currCommandOpt = ValueNone
        let mutable prevCommandParameterOpt = ValueNone
        let mutable currCommandParameterOpt = ValueNone
        let mutable prevIconOpt = ValueNone
        let mutable currIconOpt = ValueNone
        let mutable prevAcceleratorOpt = ValueNone
        let mutable currAcceleratorOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.TextAttribKey.KeyValue then 
                currTextOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.CommandAttribKey.KeyValue then 
                currCommandOpt <- ValueSome (kvp.Value :?> System.Windows.Input.ICommand)
            if kvp.Key = ViewAttributes.CommandParameterAttribKey.KeyValue then 
                currCommandParameterOpt <- ValueSome (kvp.Value :?> System.Object)
            if kvp.Key = ViewAttributes.IconAttribKey.KeyValue then 
                currIconOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.AcceleratorAttribKey.KeyValue then 
                currAcceleratorOpt <- ValueSome (kvp.Value :?> string)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.TextAttribKey.KeyValue then 
                    prevTextOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.CommandAttribKey.KeyValue then 
                    prevCommandOpt <- ValueSome (kvp.Value :?> System.Windows.Input.ICommand)
                if kvp.Key = ViewAttributes.CommandParameterAttribKey.KeyValue then 
                    prevCommandParameterOpt <- ValueSome (kvp.Value :?> System.Object)
                if kvp.Key = ViewAttributes.IconAttribKey.KeyValue then 
                    prevIconOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.AcceleratorAttribKey.KeyValue then 
                    prevAcceleratorOpt <- ValueSome (kvp.Value :?> string)
        match prevTextOpt, currTextOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Text <-  currValue
        | ValueSome _, ValueNone -> target.Text <- null
        | ValueNone, ValueNone -> ()
        match prevCommandOpt, currCommandOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Command <-  currValue
        | ValueSome _, ValueNone -> target.Command <- null
        | ValueNone, ValueNone -> ()
        match prevCommandParameterOpt, currCommandParameterOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.CommandParameter <-  currValue
        | ValueSome _, ValueNone -> target.CommandParameter <- null
        | ValueNone, ValueNone -> ()
        match prevIconOpt, currIconOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Icon <- makeFileImageSource currValue
        | ValueSome _, ValueNone -> target.Icon <- null
        | ValueNone, ValueNone -> ()
        updateAccelerator prevAcceleratorOpt currAcceleratorOpt target

    static member inline ConstructMenuItem(?text: string,
                                           ?command: unit -> unit,
                                           ?commandParameter: System.Object,
                                           ?icon: string,
                                           ?accelerator: string,
                                           ?classId: string,
                                           ?styleId: string,
                                           ?automationId: string,
                                           ?created: (Xamarin.Forms.MenuItem -> unit),
                                           ?ref: ViewRef<Xamarin.Forms.MenuItem>) = 

        let attribBuilder = ViewBuilders.BuildMenuItem(0,
                               ?text=text,
                               ?command=command,
                               ?commandParameter=commandParameter,
                               ?icon=icon,
                               ?accelerator=accelerator,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.MenuItem> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.MenuItem>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.MenuItem>(ViewBuilders.CreateFuncMenuItem, ViewBuilders.UpdateFuncMenuItem, attribBuilder)

    /// Builds the attributes for a Menu in the view
    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member inline BuildMenu(attribCount: int,
                                   ?text: string,
                                   ?items: ViewElement list,
                                   ?classId: string,
                                   ?styleId: string,
                                   ?automationId: string,
                                   ?created: obj -> unit,
                                   ?ref: ViewRef) = 

        let attribCount = match text with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match items with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = View.BuildElement(attribCount, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match text with None -> () | Some v -> attribBuilder.Add(View._TextAttribKey, (v)) 
        match items with None -> () | Some v -> attribBuilder.Add(View._ItemsAttribKey, Array.ofList(v)) 
        attribBuilder

    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val CreateFuncMenu : (unit -> Xamarin.Forms.Menu) = (fun () -> View.CreateMenu())

    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member CreateMenu () : Xamarin.Forms.Menu = 
        upcast (new Xamarin.Forms.Menu())

    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val UpdateFuncMenu = (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.Menu) -> View.UpdateMenu (prevOpt, curr, target)) 

    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member UpdateMenu (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.Menu) = 
        // update the inherited Element element
        let baseElement = (if View.ProtoElement.IsNone then View.ProtoElement <- Some (View.Element())); View.ProtoElement.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevTextOpt = ValueNone
        let mutable currTextOpt = ValueNone
        let mutable prevItemsOpt = ValueNone
        let mutable currItemsOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = View._TextAttribKey.KeyValue then 
                currTextOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = View._ItemsAttribKey.KeyValue then 
                currItemsOpt <- ValueSome (kvp.Value :?> ViewElement [])
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = View._TextAttribKey.KeyValue then 
                    prevTextOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = View._ItemsAttribKey.KeyValue then 
                    prevItemsOpt <- ValueSome (kvp.Value :?> ViewElement [])
        match prevTextOpt, currTextOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Text <-  currValue
        | ValueSome _, ValueNone -> target.Text <- null
        | ValueNone, ValueNone -> ()
        match prevItemsOpt, currItemsOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Items <-  currValue
        | ValueSome _, ValueNone -> target.Items <- null
        | ValueNone, ValueNone -> ()

    /// Describes a Menu in the view
    static member inline Menu(?text: string,
                              ?items: ViewElement list,
                              ?classId: string,
                              ?styleId: string,
                              ?automationId: string,
                              ?created: (Xamarin.Forms.Menu -> unit),
                              ?ref: ViewRef<Xamarin.Forms.Menu>) = 

        let attribBuilder = View.BuildMenu(0,
                               ?text=text,
                               ?items=items,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.Menu> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.Menu>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.Menu>(View.CreateFuncMenu, View.UpdateFuncMenu, attribBuilder)

    [<System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>]
    static member val ProtoMenu : ViewElement option = None with get, set

    /// Builds the attributes for a TextCell in the view
    static member inline BuildTextCell(attribCount: int,
                                       ?text: string,
                                       ?detail: string,
                                       ?textColor: Xamarin.Forms.Color,
                                       ?detailColor: Xamarin.Forms.Color,
                                       ?command: unit -> unit,
                                       ?canExecute: bool,
                                       ?commandParameter: System.Object,
                                       ?height: double,
                                       ?isEnabled: bool,
                                       ?classId: string,
                                       ?styleId: string,
                                       ?automationId: string,
                                       ?created: obj -> unit,
                                       ?ref: ViewRef) = 

        let attribCount = match text with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match detail with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match textColor with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match detailColor with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match command with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match canExecute with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match commandParameter with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildCell(attribCount, ?height=height, ?isEnabled=isEnabled, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match text with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TextAttribKey, (v)) 
        match detail with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TextDetailAttribKey, (v)) 
        match textColor with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TextColorAttribKey, (v)) 
        match detailColor with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TextDetailColorAttribKey, (v)) 
        match command with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TextCellCommandAttribKey, (v)) 
        match canExecute with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TextCellCanExecuteAttribKey, (v)) 
        match commandParameter with None -> () | Some v -> attribBuilder.Add(ViewAttributes.CommandParameterAttribKey, (v)) 
        attribBuilder

    static member val CreateFuncTextCell : (unit -> Xamarin.Forms.TextCell) = (fun () -> ViewBuilders.CreateTextCell())

    static member CreateTextCell () : Xamarin.Forms.TextCell =
        upcast (new Xamarin.Forms.TextCell())

    static member val UpdateFuncTextCell =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.TextCell) -> ViewBuilders.UpdateTextCell (prevOpt, curr, target)) 

    static member UpdateTextCell (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.TextCell) = 
        // update the inherited Cell element
        let baseElement = (if ViewProto.ProtoCell.IsNone then ViewProto.ProtoCell <- Some (ViewBuilders.ConstructCell())); ViewProto.ProtoCell.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevTextOpt = ValueNone
        let mutable currTextOpt = ValueNone
        let mutable prevTextDetailOpt = ValueNone
        let mutable currTextDetailOpt = ValueNone
        let mutable prevTextColorOpt = ValueNone
        let mutable currTextColorOpt = ValueNone
        let mutable prevTextDetailColorOpt = ValueNone
        let mutable currTextDetailColorOpt = ValueNone
        let mutable prevTextCellCommandOpt = ValueNone
        let mutable currTextCellCommandOpt = ValueNone
        let mutable prevTextCellCanExecuteOpt = ValueNone
        let mutable currTextCellCanExecuteOpt = ValueNone
        let mutable prevCommandParameterOpt = ValueNone
        let mutable currCommandParameterOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.TextAttribKey.KeyValue then 
                currTextOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.TextDetailAttribKey.KeyValue then 
                currTextDetailOpt <- ValueSome (kvp.Value :?> string)
            if kvp.Key = ViewAttributes.TextColorAttribKey.KeyValue then 
                currTextColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
            if kvp.Key = ViewAttributes.TextDetailColorAttribKey.KeyValue then 
                currTextDetailColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
            if kvp.Key = ViewAttributes.TextCellCommandAttribKey.KeyValue then 
                currTextCellCommandOpt <- ValueSome (kvp.Value :?> unit -> unit)
            if kvp.Key = ViewAttributes.TextCellCanExecuteAttribKey.KeyValue then 
                currTextCellCanExecuteOpt <- ValueSome (kvp.Value :?> bool)
            if kvp.Key = ViewAttributes.CommandParameterAttribKey.KeyValue then 
                currCommandParameterOpt <- ValueSome (kvp.Value :?> System.Object)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.TextAttribKey.KeyValue then 
                    prevTextOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.TextDetailAttribKey.KeyValue then 
                    prevTextDetailOpt <- ValueSome (kvp.Value :?> string)
                if kvp.Key = ViewAttributes.TextColorAttribKey.KeyValue then 
                    prevTextColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
                if kvp.Key = ViewAttributes.TextDetailColorAttribKey.KeyValue then 
                    prevTextDetailColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
                if kvp.Key = ViewAttributes.TextCellCommandAttribKey.KeyValue then 
                    prevTextCellCommandOpt <- ValueSome (kvp.Value :?> unit -> unit)
                if kvp.Key = ViewAttributes.TextCellCanExecuteAttribKey.KeyValue then 
                    prevTextCellCanExecuteOpt <- ValueSome (kvp.Value :?> bool)
                if kvp.Key = ViewAttributes.CommandParameterAttribKey.KeyValue then 
                    prevCommandParameterOpt <- ValueSome (kvp.Value :?> System.Object)
        match prevTextOpt, currTextOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Text <-  currValue
        | ValueSome _, ValueNone -> target.Text <- null
        | ValueNone, ValueNone -> ()
        match prevTextDetailOpt, currTextDetailOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Detail <-  currValue
        | ValueSome _, ValueNone -> target.Detail <- null
        | ValueNone, ValueNone -> ()
        match prevTextColorOpt, currTextColorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.TextColor <-  currValue
        | ValueSome _, ValueNone -> target.TextColor <- Xamarin.Forms.Color.Default
        | ValueNone, ValueNone -> ()
        match prevTextDetailColorOpt, currTextDetailColorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.DetailColor <-  currValue
        | ValueSome _, ValueNone -> target.DetailColor <- Xamarin.Forms.Color.Default
        | ValueNone, ValueNone -> ()
        (fun _ _ _ -> ()) prevTextCellCommandOpt currTextCellCommandOpt target
        updateCommand prevTextCellCommandOpt currTextCellCommandOpt (fun _target -> ()) (fun (target: Xamarin.Forms.TextCell) cmd -> target.Command <- cmd) prevTextCellCanExecuteOpt currTextCellCanExecuteOpt target
        match prevCommandParameterOpt, currCommandParameterOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.CommandParameter <-  currValue
        | ValueSome _, ValueNone -> target.CommandParameter <- null
        | ValueNone, ValueNone -> ()

    static member inline ConstructTextCell(?text: string,
                                           ?detail: string,
                                           ?textColor: Xamarin.Forms.Color,
                                           ?detailColor: Xamarin.Forms.Color,
                                           ?command: unit -> unit,
                                           ?canExecute: bool,
                                           ?commandParameter: System.Object,
                                           ?height: double,
                                           ?isEnabled: bool,
                                           ?classId: string,
                                           ?styleId: string,
                                           ?automationId: string,
                                           ?created: (Xamarin.Forms.TextCell -> unit),
                                           ?ref: ViewRef<Xamarin.Forms.TextCell>) = 

        let attribBuilder = ViewBuilders.BuildTextCell(0,
                               ?text=text,
                               ?detail=detail,
                               ?textColor=textColor,
                               ?detailColor=detailColor,
                               ?command=command,
                               ?canExecute=canExecute,
                               ?commandParameter=commandParameter,
                               ?height=height,
                               ?isEnabled=isEnabled,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.TextCell> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.TextCell>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.TextCell>(ViewBuilders.CreateFuncTextCell, ViewBuilders.UpdateFuncTextCell, attribBuilder)

    /// Builds the attributes for a ToolbarItem in the view
    static member inline BuildToolbarItem(attribCount: int,
                                          ?order: Xamarin.Forms.ToolbarItemOrder,
                                          ?priority: int,
                                          ?text: string,
                                          ?command: unit -> unit,
                                          ?commandParameter: System.Object,
                                          ?icon: string,
                                          ?accelerator: string,
                                          ?classId: string,
                                          ?styleId: string,
                                          ?automationId: string,
                                          ?created: obj -> unit,
                                          ?ref: ViewRef) = 

        let attribCount = match order with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match priority with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildMenuItem(attribCount, ?text=text, ?command=command, ?commandParameter=commandParameter, ?icon=icon, ?accelerator=accelerator, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match order with None -> () | Some v -> attribBuilder.Add(ViewAttributes.OrderAttribKey, (v)) 
        match priority with None -> () | Some v -> attribBuilder.Add(ViewAttributes.PriorityAttribKey, (v)) 
        attribBuilder

    static member val CreateFuncToolbarItem : (unit -> Xamarin.Forms.ToolbarItem) = (fun () -> ViewBuilders.CreateToolbarItem())

    static member CreateToolbarItem () : Xamarin.Forms.ToolbarItem =
        upcast (new Xamarin.Forms.ToolbarItem())

    static member val UpdateFuncToolbarItem =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.ToolbarItem) -> ViewBuilders.UpdateToolbarItem (prevOpt, curr, target)) 

    static member UpdateToolbarItem (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.ToolbarItem) = 
        // update the inherited MenuItem element
        let baseElement = (if ViewProto.ProtoMenuItem.IsNone then ViewProto.ProtoMenuItem <- Some (ViewBuilders.ConstructMenuItem())); ViewProto.ProtoMenuItem.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevOrderOpt = ValueNone
        let mutable currOrderOpt = ValueNone
        let mutable prevPriorityOpt = ValueNone
        let mutable currPriorityOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.OrderAttribKey.KeyValue then 
                currOrderOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.ToolbarItemOrder)
            if kvp.Key = ViewAttributes.PriorityAttribKey.KeyValue then 
                currPriorityOpt <- ValueSome (kvp.Value :?> int)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.OrderAttribKey.KeyValue then 
                    prevOrderOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.ToolbarItemOrder)
                if kvp.Key = ViewAttributes.PriorityAttribKey.KeyValue then 
                    prevPriorityOpt <- ValueSome (kvp.Value :?> int)
        match prevOrderOpt, currOrderOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Order <-  currValue
        | ValueSome _, ValueNone -> target.Order <- Xamarin.Forms.ToolbarItemOrder.Default
        | ValueNone, ValueNone -> ()
        match prevPriorityOpt, currPriorityOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Priority <-  currValue
        | ValueSome _, ValueNone -> target.Priority <- 0
        | ValueNone, ValueNone -> ()

    static member inline ConstructToolbarItem(?order: Xamarin.Forms.ToolbarItemOrder,
                                              ?priority: int,
                                              ?text: string,
                                              ?command: unit -> unit,
                                              ?commandParameter: System.Object,
                                              ?icon: string,
                                              ?accelerator: string,
                                              ?classId: string,
                                              ?styleId: string,
                                              ?automationId: string,
                                              ?created: (Xamarin.Forms.ToolbarItem -> unit),
                                              ?ref: ViewRef<Xamarin.Forms.ToolbarItem>) = 

        let attribBuilder = ViewBuilders.BuildToolbarItem(0,
                               ?order=order,
                               ?priority=priority,
                               ?text=text,
                               ?command=command,
                               ?commandParameter=commandParameter,
                               ?icon=icon,
                               ?accelerator=accelerator,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.ToolbarItem> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.ToolbarItem>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.ToolbarItem>(ViewBuilders.CreateFuncToolbarItem, ViewBuilders.UpdateFuncToolbarItem, attribBuilder)

    /// Builds the attributes for a ImageCell in the view
    static member inline BuildImageCell(attribCount: int,
                                        ?imageSource: obj,
                                        ?text: string,
                                        ?detail: string,
                                        ?textColor: Xamarin.Forms.Color,
                                        ?detailColor: Xamarin.Forms.Color,
                                        ?command: unit -> unit,
                                        ?canExecute: bool,
                                        ?commandParameter: System.Object,
                                        ?height: double,
                                        ?isEnabled: bool,
                                        ?classId: string,
                                        ?styleId: string,
                                        ?automationId: string,
                                        ?created: obj -> unit,
                                        ?ref: ViewRef) = 

        let attribCount = match imageSource with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildTextCell(attribCount, ?text=text, ?detail=detail, ?textColor=textColor, ?detailColor=detailColor, ?command=command, ?canExecute=canExecute, ?commandParameter=commandParameter, ?height=height, ?isEnabled=isEnabled, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match imageSource with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ImageSourceAttribKey, (v)) 
        attribBuilder

    static member val CreateFuncImageCell : (unit -> Xamarin.Forms.ImageCell) = (fun () -> ViewBuilders.CreateImageCell())

    static member CreateImageCell () : Xamarin.Forms.ImageCell =
        upcast (new Xamarin.Forms.ImageCell())

    static member val UpdateFuncImageCell =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.ImageCell) -> ViewBuilders.UpdateImageCell (prevOpt, curr, target)) 

    static member UpdateImageCell (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.ImageCell) = 
        // update the inherited TextCell element
        let baseElement = (if ViewProto.ProtoTextCell.IsNone then ViewProto.ProtoTextCell <- Some (ViewBuilders.ConstructTextCell())); ViewProto.ProtoTextCell.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevImageSourceOpt = ValueNone
        let mutable currImageSourceOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.ImageSourceAttribKey.KeyValue then 
                currImageSourceOpt <- ValueSome (kvp.Value :?> obj)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.ImageSourceAttribKey.KeyValue then 
                    prevImageSourceOpt <- ValueSome (kvp.Value :?> obj)
        match prevImageSourceOpt, currImageSourceOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.ImageSource <- makeImageSource currValue
        | ValueSome _, ValueNone -> target.ImageSource <- null
        | ValueNone, ValueNone -> ()

    static member inline ConstructImageCell(?imageSource: obj,
                                            ?text: string,
                                            ?detail: string,
                                            ?textColor: Xamarin.Forms.Color,
                                            ?detailColor: Xamarin.Forms.Color,
                                            ?command: unit -> unit,
                                            ?canExecute: bool,
                                            ?commandParameter: System.Object,
                                            ?height: double,
                                            ?isEnabled: bool,
                                            ?classId: string,
                                            ?styleId: string,
                                            ?automationId: string,
                                            ?created: (Xamarin.Forms.ImageCell -> unit),
                                            ?ref: ViewRef<Xamarin.Forms.ImageCell>) = 

        let attribBuilder = ViewBuilders.BuildImageCell(0,
                               ?imageSource=imageSource,
                               ?text=text,
                               ?detail=detail,
                               ?textColor=textColor,
                               ?detailColor=detailColor,
                               ?command=command,
                               ?canExecute=canExecute,
                               ?commandParameter=commandParameter,
                               ?height=height,
                               ?isEnabled=isEnabled,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.ImageCell> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.ImageCell>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.ImageCell>(ViewBuilders.CreateFuncImageCell, ViewBuilders.UpdateFuncImageCell, attribBuilder)

    /// Builds the attributes for a ViewCell in the view
    static member inline BuildViewCell(attribCount: int,
                                       ?view: ViewElement,
                                       ?height: double,
                                       ?isEnabled: bool,
                                       ?classId: string,
                                       ?styleId: string,
                                       ?automationId: string,
                                       ?created: obj -> unit,
                                       ?ref: ViewRef) = 

        let attribCount = match view with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildCell(attribCount, ?height=height, ?isEnabled=isEnabled, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match view with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ViewAttribKey, (v)) 
        attribBuilder

    static member val CreateFuncViewCell : (unit -> Xamarin.Forms.ViewCell) = (fun () -> ViewBuilders.CreateViewCell())

    static member CreateViewCell () : Xamarin.Forms.ViewCell =
        upcast (new Xamarin.Forms.ViewCell())

    static member val UpdateFuncViewCell =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.ViewCell) -> ViewBuilders.UpdateViewCell (prevOpt, curr, target)) 

    static member UpdateViewCell (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.ViewCell) = 
        // update the inherited Cell element
        let baseElement = (if ViewProto.ProtoCell.IsNone then ViewProto.ProtoCell <- Some (ViewBuilders.ConstructCell())); ViewProto.ProtoCell.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevViewOpt = ValueNone
        let mutable currViewOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.ViewAttribKey.KeyValue then 
                currViewOpt <- ValueSome (kvp.Value :?> ViewElement)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.ViewAttribKey.KeyValue then 
                    prevViewOpt <- ValueSome (kvp.Value :?> ViewElement)
        match prevViewOpt, currViewOpt with
        // For structured objects, dependsOn on reference equality
        | ValueSome prevValue, ValueSome newValue when identical prevValue newValue -> ()
        | ValueSome prevValue, ValueSome newValue when canReuseChild prevValue newValue ->
            newValue.UpdateIncremental(prevValue, target.View)
        | _, ValueSome newValue ->
            target.View <- (newValue.Create() :?> Xamarin.Forms.View)
        | ValueSome _, ValueNone ->
            target.View <- null
        | ValueNone, ValueNone -> ()

    static member inline ConstructViewCell(?view: ViewElement,
                                           ?height: double,
                                           ?isEnabled: bool,
                                           ?classId: string,
                                           ?styleId: string,
                                           ?automationId: string,
                                           ?created: (Xamarin.Forms.ViewCell -> unit),
                                           ?ref: ViewRef<Xamarin.Forms.ViewCell>) = 

        let attribBuilder = ViewBuilders.BuildViewCell(0,
                               ?view=view,
                               ?height=height,
                               ?isEnabled=isEnabled,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.ViewCell> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.ViewCell>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.ViewCell>(ViewBuilders.CreateFuncViewCell, ViewBuilders.UpdateFuncViewCell, attribBuilder)

    /// Builds the attributes for a ListView in the view
    static member inline BuildListView(attribCount: int,
                                       ?items: seq<ViewElement>,
                                       ?footer: System.Object,
                                       ?hasUnevenRows: bool,
                                       ?header: System.Object,
                                       ?headerTemplate: Xamarin.Forms.DataTemplate,
                                       ?isGroupingEnabled: bool,
                                       ?isPullToRefreshEnabled: bool,
                                       ?isRefreshing: bool,
                                       ?refreshCommand: unit -> unit,
                                       ?rowHeight: int,
                                       ?selectedItem: int option,
                                       ?separatorVisibility: Xamarin.Forms.SeparatorVisibility,
                                       ?separatorColor: Xamarin.Forms.Color,
                                       ?itemAppearing: int -> unit,
                                       ?itemDisappearing: int -> unit,
                                       ?itemSelected: int option -> unit,
                                       ?itemTapped: int -> unit,
                                       ?refreshing: unit -> unit,
                                       ?selectionMode: Xamarin.Forms.ListViewSelectionMode,
                                       ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                       ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                       ?margin: obj,
                                       ?gestureRecognizers: ViewElement list,
                                       ?anchorX: double,
                                       ?anchorY: double,
                                       ?backgroundColor: Xamarin.Forms.Color,
                                       ?heightRequest: double,
                                       ?inputTransparent: bool,
                                       ?isEnabled: bool,
                                       ?isVisible: bool,
                                       ?minimumHeightRequest: double,
                                       ?minimumWidthRequest: double,
                                       ?opacity: double,
                                       ?rotation: double,
                                       ?rotationX: double,
                                       ?rotationY: double,
                                       ?scale: double,
                                       ?style: Xamarin.Forms.Style,
                                       ?styleClass: obj,
                                       ?translationX: double,
                                       ?translationY: double,
                                       ?widthRequest: double,
                                       ?resources: (string * obj) list,
                                       ?styles: Xamarin.Forms.Style list,
                                       ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                       ?isTabStop: bool,
                                       ?scaleX: double,
                                       ?scaleY: double,
                                       ?tabIndex: int,
                                       ?childrenReordered: System.EventArgs -> unit,
                                       ?measureInvalidated: System.EventArgs -> unit,
                                       ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                       ?sizeChanged: System.EventArgs -> unit,
                                       ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                       ?classId: string,
                                       ?styleId: string,
                                       ?automationId: string,
                                       ?created: obj -> unit,
                                       ?ref: ViewRef) = 

        let attribCount = match items with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match footer with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match hasUnevenRows with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match header with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match headerTemplate with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match isGroupingEnabled with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match isPullToRefreshEnabled with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match isRefreshing with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match refreshCommand with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match rowHeight with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match selectedItem with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match separatorVisibility with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match separatorColor with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match itemAppearing with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match itemDisappearing with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match itemSelected with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match itemTapped with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match refreshing with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match selectionMode with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildView(attribCount, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match items with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ListViewItemsAttribKey, (v)) 
        match footer with None -> () | Some v -> attribBuilder.Add(ViewAttributes.FooterAttribKey, (v)) 
        match hasUnevenRows with None -> () | Some v -> attribBuilder.Add(ViewAttributes.HasUnevenRowsAttribKey, (v)) 
        match header with None -> () | Some v -> attribBuilder.Add(ViewAttributes.HeaderAttribKey, (v)) 
        match headerTemplate with None -> () | Some v -> attribBuilder.Add(ViewAttributes.HeaderTemplateAttribKey, (v)) 
        match isGroupingEnabled with None -> () | Some v -> attribBuilder.Add(ViewAttributes.IsGroupingEnabledAttribKey, (v)) 
        match isPullToRefreshEnabled with None -> () | Some v -> attribBuilder.Add(ViewAttributes.IsPullToRefreshEnabledAttribKey, (v)) 
        match isRefreshing with None -> () | Some v -> attribBuilder.Add(ViewAttributes.IsRefreshingAttribKey, (v)) 
        match refreshCommand with None -> () | Some v -> attribBuilder.Add(ViewAttributes.RefreshCommandAttribKey, makeCommand(v)) 
        match rowHeight with None -> () | Some v -> attribBuilder.Add(ViewAttributes.RowHeightAttribKey, (v)) 
        match selectedItem with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ListView_SelectedItemAttribKey, (v)) 
        match separatorVisibility with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ListView_SeparatorVisibilityAttribKey, (v)) 
        match separatorColor with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ListView_SeparatorColorAttribKey, (v)) 
        match itemAppearing with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ListView_ItemAppearingAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.ItemVisibilityEventArgs>(fun sender args -> f (tryFindListViewItem sender args.Item).Value))(v)) 
        match itemDisappearing with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ListView_ItemDisappearingAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.ItemVisibilityEventArgs>(fun sender args -> f (tryFindListViewItem sender args.Item).Value))(v)) 
        match itemSelected with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ListView_ItemSelectedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.SelectedItemChangedEventArgs>(fun sender args -> f (tryFindListViewItem sender args.SelectedItem)))(v)) 
        match itemTapped with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ListView_ItemTappedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.ItemTappedEventArgs>(fun sender args -> f (tryFindListViewItem sender args.Item).Value))(v)) 
        match refreshing with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ListView_RefreshingAttribKey, (fun f -> System.EventHandler(fun sender args -> f ()))(v)) 
        match selectionMode with None -> () | Some v -> attribBuilder.Add(ViewAttributes.SelectionModeAttribKey, (v)) 
        attribBuilder

    static member val CreateFuncListView : (unit -> Xamarin.Forms.ListView) = (fun () -> ViewBuilders.CreateListView())

    static member CreateListView () : Xamarin.Forms.ListView =
        upcast (new Fabulous.DynamicViews.CustomListView())

    static member val UpdateFuncListView =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.ListView) -> ViewBuilders.UpdateListView (prevOpt, curr, target)) 

    static member UpdateListView (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.ListView) = 
        // update the inherited View element
        let baseElement = (if ViewProto.ProtoView.IsNone then ViewProto.ProtoView <- Some (ViewBuilders.ConstructView())); ViewProto.ProtoView.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevListViewItemsOpt = ValueNone
        let mutable currListViewItemsOpt = ValueNone
        let mutable prevFooterOpt = ValueNone
        let mutable currFooterOpt = ValueNone
        let mutable prevHasUnevenRowsOpt = ValueNone
        let mutable currHasUnevenRowsOpt = ValueNone
        let mutable prevHeaderOpt = ValueNone
        let mutable currHeaderOpt = ValueNone
        let mutable prevHeaderTemplateOpt = ValueNone
        let mutable currHeaderTemplateOpt = ValueNone
        let mutable prevIsGroupingEnabledOpt = ValueNone
        let mutable currIsGroupingEnabledOpt = ValueNone
        let mutable prevIsPullToRefreshEnabledOpt = ValueNone
        let mutable currIsPullToRefreshEnabledOpt = ValueNone
        let mutable prevIsRefreshingOpt = ValueNone
        let mutable currIsRefreshingOpt = ValueNone
        let mutable prevRefreshCommandOpt = ValueNone
        let mutable currRefreshCommandOpt = ValueNone
        let mutable prevRowHeightOpt = ValueNone
        let mutable currRowHeightOpt = ValueNone
        let mutable prevListView_SelectedItemOpt = ValueNone
        let mutable currListView_SelectedItemOpt = ValueNone
        let mutable prevListView_SeparatorVisibilityOpt = ValueNone
        let mutable currListView_SeparatorVisibilityOpt = ValueNone
        let mutable prevListView_SeparatorColorOpt = ValueNone
        let mutable currListView_SeparatorColorOpt = ValueNone
        let mutable prevListView_ItemAppearingOpt = ValueNone
        let mutable currListView_ItemAppearingOpt = ValueNone
        let mutable prevListView_ItemDisappearingOpt = ValueNone
        let mutable currListView_ItemDisappearingOpt = ValueNone
        let mutable prevListView_ItemSelectedOpt = ValueNone
        let mutable currListView_ItemSelectedOpt = ValueNone
        let mutable prevListView_ItemTappedOpt = ValueNone
        let mutable currListView_ItemTappedOpt = ValueNone
        let mutable prevListView_RefreshingOpt = ValueNone
        let mutable currListView_RefreshingOpt = ValueNone
        let mutable prevSelectionModeOpt = ValueNone
        let mutable currSelectionModeOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.ListViewItemsAttribKey.KeyValue then 
                currListViewItemsOpt <- ValueSome (kvp.Value :?> seq<ViewElement>)
            if kvp.Key = ViewAttributes.FooterAttribKey.KeyValue then 
                currFooterOpt <- ValueSome (kvp.Value :?> System.Object)
            if kvp.Key = ViewAttributes.HasUnevenRowsAttribKey.KeyValue then 
                currHasUnevenRowsOpt <- ValueSome (kvp.Value :?> bool)
            if kvp.Key = ViewAttributes.HeaderAttribKey.KeyValue then 
                currHeaderOpt <- ValueSome (kvp.Value :?> System.Object)
            if kvp.Key = ViewAttributes.HeaderTemplateAttribKey.KeyValue then 
                currHeaderTemplateOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.DataTemplate)
            if kvp.Key = ViewAttributes.IsGroupingEnabledAttribKey.KeyValue then 
                currIsGroupingEnabledOpt <- ValueSome (kvp.Value :?> bool)
            if kvp.Key = ViewAttributes.IsPullToRefreshEnabledAttribKey.KeyValue then 
                currIsPullToRefreshEnabledOpt <- ValueSome (kvp.Value :?> bool)
            if kvp.Key = ViewAttributes.IsRefreshingAttribKey.KeyValue then 
                currIsRefreshingOpt <- ValueSome (kvp.Value :?> bool)
            if kvp.Key = ViewAttributes.RefreshCommandAttribKey.KeyValue then 
                currRefreshCommandOpt <- ValueSome (kvp.Value :?> System.Windows.Input.ICommand)
            if kvp.Key = ViewAttributes.RowHeightAttribKey.KeyValue then 
                currRowHeightOpt <- ValueSome (kvp.Value :?> int)
            if kvp.Key = ViewAttributes.ListView_SelectedItemAttribKey.KeyValue then 
                currListView_SelectedItemOpt <- ValueSome (kvp.Value :?> int option)
            if kvp.Key = ViewAttributes.ListView_SeparatorVisibilityAttribKey.KeyValue then 
                currListView_SeparatorVisibilityOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.SeparatorVisibility)
            if kvp.Key = ViewAttributes.ListView_SeparatorColorAttribKey.KeyValue then 
                currListView_SeparatorColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
            if kvp.Key = ViewAttributes.ListView_ItemAppearingAttribKey.KeyValue then 
                currListView_ItemAppearingOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.ItemVisibilityEventArgs>)
            if kvp.Key = ViewAttributes.ListView_ItemDisappearingAttribKey.KeyValue then 
                currListView_ItemDisappearingOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.ItemVisibilityEventArgs>)
            if kvp.Key = ViewAttributes.ListView_ItemSelectedAttribKey.KeyValue then 
                currListView_ItemSelectedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.SelectedItemChangedEventArgs>)
            if kvp.Key = ViewAttributes.ListView_ItemTappedAttribKey.KeyValue then 
                currListView_ItemTappedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.ItemTappedEventArgs>)
            if kvp.Key = ViewAttributes.ListView_RefreshingAttribKey.KeyValue then 
                currListView_RefreshingOpt <- ValueSome (kvp.Value :?> System.EventHandler)
            if kvp.Key = ViewAttributes.SelectionModeAttribKey.KeyValue then 
                currSelectionModeOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.ListViewSelectionMode)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.ListViewItemsAttribKey.KeyValue then 
                    prevListViewItemsOpt <- ValueSome (kvp.Value :?> seq<ViewElement>)
                if kvp.Key = ViewAttributes.FooterAttribKey.KeyValue then 
                    prevFooterOpt <- ValueSome (kvp.Value :?> System.Object)
                if kvp.Key = ViewAttributes.HasUnevenRowsAttribKey.KeyValue then 
                    prevHasUnevenRowsOpt <- ValueSome (kvp.Value :?> bool)
                if kvp.Key = ViewAttributes.HeaderAttribKey.KeyValue then 
                    prevHeaderOpt <- ValueSome (kvp.Value :?> System.Object)
                if kvp.Key = ViewAttributes.HeaderTemplateAttribKey.KeyValue then 
                    prevHeaderTemplateOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.DataTemplate)
                if kvp.Key = ViewAttributes.IsGroupingEnabledAttribKey.KeyValue then 
                    prevIsGroupingEnabledOpt <- ValueSome (kvp.Value :?> bool)
                if kvp.Key = ViewAttributes.IsPullToRefreshEnabledAttribKey.KeyValue then 
                    prevIsPullToRefreshEnabledOpt <- ValueSome (kvp.Value :?> bool)
                if kvp.Key = ViewAttributes.IsRefreshingAttribKey.KeyValue then 
                    prevIsRefreshingOpt <- ValueSome (kvp.Value :?> bool)
                if kvp.Key = ViewAttributes.RefreshCommandAttribKey.KeyValue then 
                    prevRefreshCommandOpt <- ValueSome (kvp.Value :?> System.Windows.Input.ICommand)
                if kvp.Key = ViewAttributes.RowHeightAttribKey.KeyValue then 
                    prevRowHeightOpt <- ValueSome (kvp.Value :?> int)
                if kvp.Key = ViewAttributes.ListView_SelectedItemAttribKey.KeyValue then 
                    prevListView_SelectedItemOpt <- ValueSome (kvp.Value :?> int option)
                if kvp.Key = ViewAttributes.ListView_SeparatorVisibilityAttribKey.KeyValue then 
                    prevListView_SeparatorVisibilityOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.SeparatorVisibility)
                if kvp.Key = ViewAttributes.ListView_SeparatorColorAttribKey.KeyValue then 
                    prevListView_SeparatorColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
                if kvp.Key = ViewAttributes.ListView_ItemAppearingAttribKey.KeyValue then 
                    prevListView_ItemAppearingOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.ItemVisibilityEventArgs>)
                if kvp.Key = ViewAttributes.ListView_ItemDisappearingAttribKey.KeyValue then 
                    prevListView_ItemDisappearingOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.ItemVisibilityEventArgs>)
                if kvp.Key = ViewAttributes.ListView_ItemSelectedAttribKey.KeyValue then 
                    prevListView_ItemSelectedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.SelectedItemChangedEventArgs>)
                if kvp.Key = ViewAttributes.ListView_ItemTappedAttribKey.KeyValue then 
                    prevListView_ItemTappedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.ItemTappedEventArgs>)
                if kvp.Key = ViewAttributes.ListView_RefreshingAttribKey.KeyValue then 
                    prevListView_RefreshingOpt <- ValueSome (kvp.Value :?> System.EventHandler)
                if kvp.Key = ViewAttributes.SelectionModeAttribKey.KeyValue then 
                    prevSelectionModeOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.ListViewSelectionMode)
        updateListViewItems prevListViewItemsOpt currListViewItemsOpt target
        match prevFooterOpt, currFooterOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Footer <-  currValue
        | ValueSome _, ValueNone -> target.Footer <- null
        | ValueNone, ValueNone -> ()
        match prevHasUnevenRowsOpt, currHasUnevenRowsOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.HasUnevenRows <-  currValue
        | ValueSome _, ValueNone -> target.HasUnevenRows <- false
        | ValueNone, ValueNone -> ()
        match prevHeaderOpt, currHeaderOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Header <-  currValue
        | ValueSome _, ValueNone -> target.Header <- null
        | ValueNone, ValueNone -> ()
        match prevHeaderTemplateOpt, currHeaderTemplateOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.HeaderTemplate <-  currValue
        | ValueSome _, ValueNone -> target.HeaderTemplate <- null
        | ValueNone, ValueNone -> ()
        match prevIsGroupingEnabledOpt, currIsGroupingEnabledOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.IsGroupingEnabled <-  currValue
        | ValueSome _, ValueNone -> target.IsGroupingEnabled <- false
        | ValueNone, ValueNone -> ()
        match prevIsPullToRefreshEnabledOpt, currIsPullToRefreshEnabledOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.IsPullToRefreshEnabled <-  currValue
        | ValueSome _, ValueNone -> target.IsPullToRefreshEnabled <- false
        | ValueNone, ValueNone -> ()
        match prevIsRefreshingOpt, currIsRefreshingOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.IsRefreshing <-  currValue
        | ValueSome _, ValueNone -> target.IsRefreshing <- false
        | ValueNone, ValueNone -> ()
        match prevRefreshCommandOpt, currRefreshCommandOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.RefreshCommand <-  currValue
        | ValueSome _, ValueNone -> target.RefreshCommand <- null
        | ValueNone, ValueNone -> ()
        match prevRowHeightOpt, currRowHeightOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.RowHeight <-  currValue
        | ValueSome _, ValueNone -> target.RowHeight <- -1
        | ValueNone, ValueNone -> ()
        match prevListView_SelectedItemOpt, currListView_SelectedItemOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.SelectedItem <- (function None -> null | Some i -> let items = target.ItemsSource :?> System.Collections.Generic.IList<ListElementData<ViewElement>> in if i >= 0 && i < items.Count then items.[i] else null) currValue
        | ValueSome _, ValueNone -> target.SelectedItem <- null
        | ValueNone, ValueNone -> ()
        match prevListView_SeparatorVisibilityOpt, currListView_SeparatorVisibilityOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.SeparatorVisibility <-  currValue
        | ValueSome _, ValueNone -> target.SeparatorVisibility <- Xamarin.Forms.SeparatorVisibility.Default
        | ValueNone, ValueNone -> ()
        match prevListView_SeparatorColorOpt, currListView_SeparatorColorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.SeparatorColor <-  currValue
        | ValueSome _, ValueNone -> target.SeparatorColor <- Xamarin.Forms.Color.Default
        | ValueNone, ValueNone -> ()
        match prevListView_ItemAppearingOpt, currListView_ItemAppearingOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.ItemAppearing.RemoveHandler(prevValue); target.ItemAppearing.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.ItemAppearing.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.ItemAppearing.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevListView_ItemDisappearingOpt, currListView_ItemDisappearingOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.ItemDisappearing.RemoveHandler(prevValue); target.ItemDisappearing.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.ItemDisappearing.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.ItemDisappearing.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevListView_ItemSelectedOpt, currListView_ItemSelectedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.ItemSelected.RemoveHandler(prevValue); target.ItemSelected.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.ItemSelected.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.ItemSelected.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevListView_ItemTappedOpt, currListView_ItemTappedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.ItemTapped.RemoveHandler(prevValue); target.ItemTapped.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.ItemTapped.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.ItemTapped.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevListView_RefreshingOpt, currListView_RefreshingOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.Refreshing.RemoveHandler(prevValue); target.Refreshing.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.Refreshing.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.Refreshing.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevSelectionModeOpt, currSelectionModeOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.SelectionMode <-  currValue
        | ValueSome _, ValueNone -> target.SelectionMode <- Xamarin.Forms.ListViewSelectionMode.Single
        | ValueNone, ValueNone -> ()

    static member inline ConstructListView(?items: seq<ViewElement>,
                                           ?footer: System.Object,
                                           ?hasUnevenRows: bool,
                                           ?header: System.Object,
                                           ?headerTemplate: Xamarin.Forms.DataTemplate,
                                           ?isGroupingEnabled: bool,
                                           ?isPullToRefreshEnabled: bool,
                                           ?isRefreshing: bool,
                                           ?refreshCommand: unit -> unit,
                                           ?rowHeight: int,
                                           ?selectedItem: int option,
                                           ?separatorVisibility: Xamarin.Forms.SeparatorVisibility,
                                           ?separatorColor: Xamarin.Forms.Color,
                                           ?itemAppearing: int -> unit,
                                           ?itemDisappearing: int -> unit,
                                           ?itemSelected: int option -> unit,
                                           ?itemTapped: int -> unit,
                                           ?refreshing: unit -> unit,
                                           ?selectionMode: Xamarin.Forms.ListViewSelectionMode,
                                           ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                           ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                           ?margin: obj,
                                           ?gestureRecognizers: ViewElement list,
                                           ?anchorX: double,
                                           ?anchorY: double,
                                           ?backgroundColor: Xamarin.Forms.Color,
                                           ?heightRequest: double,
                                           ?inputTransparent: bool,
                                           ?isEnabled: bool,
                                           ?isVisible: bool,
                                           ?minimumHeightRequest: double,
                                           ?minimumWidthRequest: double,
                                           ?opacity: double,
                                           ?rotation: double,
                                           ?rotationX: double,
                                           ?rotationY: double,
                                           ?scale: double,
                                           ?style: Xamarin.Forms.Style,
                                           ?styleClass: obj,
                                           ?translationX: double,
                                           ?translationY: double,
                                           ?widthRequest: double,
                                           ?resources: (string * obj) list,
                                           ?styles: Xamarin.Forms.Style list,
                                           ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                           ?isTabStop: bool,
                                           ?scaleX: double,
                                           ?scaleY: double,
                                           ?tabIndex: int,
                                           ?childrenReordered: System.EventArgs -> unit,
                                           ?measureInvalidated: System.EventArgs -> unit,
                                           ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                           ?sizeChanged: System.EventArgs -> unit,
                                           ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                           ?classId: string,
                                           ?styleId: string,
                                           ?automationId: string,
                                           ?created: (Xamarin.Forms.ListView -> unit),
                                           ?ref: ViewRef<Xamarin.Forms.ListView>) = 

        let attribBuilder = ViewBuilders.BuildListView(0,
                               ?items=items,
                               ?footer=footer,
                               ?hasUnevenRows=hasUnevenRows,
                               ?header=header,
                               ?headerTemplate=headerTemplate,
                               ?isGroupingEnabled=isGroupingEnabled,
                               ?isPullToRefreshEnabled=isPullToRefreshEnabled,
                               ?isRefreshing=isRefreshing,
                               ?refreshCommand=refreshCommand,
                               ?rowHeight=rowHeight,
                               ?selectedItem=selectedItem,
                               ?separatorVisibility=separatorVisibility,
                               ?separatorColor=separatorColor,
                               ?itemAppearing=itemAppearing,
                               ?itemDisappearing=itemDisappearing,
                               ?itemSelected=itemSelected,
                               ?itemTapped=itemTapped,
                               ?refreshing=refreshing,
                               ?selectionMode=selectionMode,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.ListView> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.ListView>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.ListView>(ViewBuilders.CreateFuncListView, ViewBuilders.UpdateFuncListView, attribBuilder)

    /// Builds the attributes for a ListViewGrouped in the view
    static member inline BuildListViewGrouped(attribCount: int,
                                              ?items: (string * ViewElement * ViewElement list) list,
                                              ?showJumpList: bool,
                                              ?footer: System.Object,
                                              ?hasUnevenRows: bool,
                                              ?header: System.Object,
                                              ?isPullToRefreshEnabled: bool,
                                              ?isRefreshing: bool,
                                              ?refreshCommand: unit -> unit,
                                              ?rowHeight: int,
                                              ?selectedItem: (int * int) option,
                                              ?separatorVisibility: Xamarin.Forms.SeparatorVisibility,
                                              ?separatorColor: Xamarin.Forms.Color,
                                              ?itemAppearing: int * int option -> unit,
                                              ?itemDisappearing: int * int option -> unit,
                                              ?itemSelected: (int * int) option -> unit,
                                              ?itemTapped: int * int -> unit,
                                              ?refreshing: unit -> unit,
                                              ?selectionMode: Xamarin.Forms.ListViewSelectionMode,
                                              ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                              ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                              ?margin: obj,
                                              ?gestureRecognizers: ViewElement list,
                                              ?anchorX: double,
                                              ?anchorY: double,
                                              ?backgroundColor: Xamarin.Forms.Color,
                                              ?heightRequest: double,
                                              ?inputTransparent: bool,
                                              ?isEnabled: bool,
                                              ?isVisible: bool,
                                              ?minimumHeightRequest: double,
                                              ?minimumWidthRequest: double,
                                              ?opacity: double,
                                              ?rotation: double,
                                              ?rotationX: double,
                                              ?rotationY: double,
                                              ?scale: double,
                                              ?style: Xamarin.Forms.Style,
                                              ?styleClass: obj,
                                              ?translationX: double,
                                              ?translationY: double,
                                              ?widthRequest: double,
                                              ?resources: (string * obj) list,
                                              ?styles: Xamarin.Forms.Style list,
                                              ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                              ?isTabStop: bool,
                                              ?scaleX: double,
                                              ?scaleY: double,
                                              ?tabIndex: int,
                                              ?childrenReordered: System.EventArgs -> unit,
                                              ?measureInvalidated: System.EventArgs -> unit,
                                              ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                              ?sizeChanged: System.EventArgs -> unit,
                                              ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                              ?classId: string,
                                              ?styleId: string,
                                              ?automationId: string,
                                              ?created: obj -> unit,
                                              ?ref: ViewRef) = 

        let attribCount = match items with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match showJumpList with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match footer with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match hasUnevenRows with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match header with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match isPullToRefreshEnabled with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match isRefreshing with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match refreshCommand with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match rowHeight with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match selectedItem with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match separatorVisibility with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match separatorColor with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match itemAppearing with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match itemDisappearing with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match itemSelected with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match itemTapped with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match refreshing with Some _ -> attribCount + 1 | None -> attribCount
        let attribCount = match selectionMode with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildView(attribCount, ?horizontalOptions=horizontalOptions, ?verticalOptions=verticalOptions, ?margin=margin, ?gestureRecognizers=gestureRecognizers, ?anchorX=anchorX, ?anchorY=anchorY, ?backgroundColor=backgroundColor, ?heightRequest=heightRequest, ?inputTransparent=inputTransparent, ?isEnabled=isEnabled, ?isVisible=isVisible, ?minimumHeightRequest=minimumHeightRequest, ?minimumWidthRequest=minimumWidthRequest, ?opacity=opacity, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, ?scale=scale, ?style=style, ?styleClass=styleClass, ?translationX=translationX, ?translationY=translationY, ?widthRequest=widthRequest, ?resources=resources, ?styles=styles, ?styleSheets=styleSheets, ?isTabStop=isTabStop, ?scaleX=scaleX, ?scaleY=scaleY, ?tabIndex=tabIndex, ?childrenReordered=childrenReordered, ?measureInvalidated=measureInvalidated, ?focused=focused, ?sizeChanged=sizeChanged, ?unfocused=unfocused, ?classId=classId, ?styleId=styleId, ?automationId=automationId, ?created=created, ?ref=ref)
        match items with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ListViewGrouped_ItemsSourceAttribKey, (fun es -> es |> Array.ofList |> Array.map (fun (g, e, l) -> (g, e, Array.ofList l)))(v)) 
        match showJumpList with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ListViewGrouped_ShowJumpListAttribKey, (v)) 
        match footer with None -> () | Some v -> attribBuilder.Add(ViewAttributes.FooterAttribKey, (v)) 
        match hasUnevenRows with None -> () | Some v -> attribBuilder.Add(ViewAttributes.HasUnevenRowsAttribKey, (v)) 
        match header with None -> () | Some v -> attribBuilder.Add(ViewAttributes.HeaderAttribKey, (v)) 
        match isPullToRefreshEnabled with None -> () | Some v -> attribBuilder.Add(ViewAttributes.IsPullToRefreshEnabledAttribKey, (v)) 
        match isRefreshing with None -> () | Some v -> attribBuilder.Add(ViewAttributes.IsRefreshingAttribKey, (v)) 
        match refreshCommand with None -> () | Some v -> attribBuilder.Add(ViewAttributes.RefreshCommandAttribKey, makeCommand(v)) 
        match rowHeight with None -> () | Some v -> attribBuilder.Add(ViewAttributes.RowHeightAttribKey, (v)) 
        match selectedItem with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ListViewGrouped_SelectedItemAttribKey, (v)) 
        match separatorVisibility with None -> () | Some v -> attribBuilder.Add(ViewAttributes.SeparatorVisibilityAttribKey, (v)) 
        match separatorColor with None -> () | Some v -> attribBuilder.Add(ViewAttributes.SeparatorColorAttribKey, (v)) 
        match itemAppearing with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ListViewGrouped_ItemAppearingAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.ItemVisibilityEventArgs>(fun sender args -> f (tryFindGroupedListViewItemOrGroupItem sender args.Item).Value))(v)) 
        match itemDisappearing with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ListViewGrouped_ItemDisappearingAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.ItemVisibilityEventArgs>(fun sender args -> f (tryFindGroupedListViewItemOrGroupItem sender args.Item).Value))(v)) 
        match itemSelected with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ListViewGrouped_ItemSelectedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.SelectedItemChangedEventArgs>(fun sender args -> f (tryFindGroupedListViewItem sender args.SelectedItem)))(v)) 
        match itemTapped with None -> () | Some v -> attribBuilder.Add(ViewAttributes.ListViewGrouped_ItemTappedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.ItemTappedEventArgs>(fun sender args -> f (tryFindGroupedListViewItem sender args.Item).Value))(v)) 
        match refreshing with None -> () | Some v -> attribBuilder.Add(ViewAttributes.RefreshingAttribKey, (fun f -> System.EventHandler(fun sender args -> f ()))(v)) 
        match selectionMode with None -> () | Some v -> attribBuilder.Add(ViewAttributes.SelectionModeAttribKey, (v)) 
        attribBuilder

    static member val CreateFuncListViewGrouped : (unit -> Xamarin.Forms.ListView) = (fun () -> ViewBuilders.CreateListViewGrouped())

    static member CreateListViewGrouped () : Xamarin.Forms.ListView =
        upcast (new Fabulous.DynamicViews.CustomGroupListView())

    static member val UpdateFuncListViewGrouped =
        (fun (prevOpt: ViewElement voption) (curr: ViewElement) (target: Xamarin.Forms.ListView) -> ViewBuilders.UpdateListViewGrouped (prevOpt, curr, target)) 

    static member UpdateListViewGrouped (prevOpt: ViewElement voption, curr: ViewElement, target: Xamarin.Forms.ListView) = 
        // update the inherited View element
        let baseElement = (if ViewProto.ProtoView.IsNone then ViewProto.ProtoView <- Some (ViewBuilders.ConstructView())); ViewProto.ProtoView.Value
        baseElement.UpdateInherited (prevOpt, curr, target)
        let mutable prevListViewGrouped_ItemsSourceOpt = ValueNone
        let mutable currListViewGrouped_ItemsSourceOpt = ValueNone
        let mutable prevListViewGrouped_ShowJumpListOpt = ValueNone
        let mutable currListViewGrouped_ShowJumpListOpt = ValueNone
        let mutable prevFooterOpt = ValueNone
        let mutable currFooterOpt = ValueNone
        let mutable prevHasUnevenRowsOpt = ValueNone
        let mutable currHasUnevenRowsOpt = ValueNone
        let mutable prevHeaderOpt = ValueNone
        let mutable currHeaderOpt = ValueNone
        let mutable prevIsPullToRefreshEnabledOpt = ValueNone
        let mutable currIsPullToRefreshEnabledOpt = ValueNone
        let mutable prevIsRefreshingOpt = ValueNone
        let mutable currIsRefreshingOpt = ValueNone
        let mutable prevRefreshCommandOpt = ValueNone
        let mutable currRefreshCommandOpt = ValueNone
        let mutable prevRowHeightOpt = ValueNone
        let mutable currRowHeightOpt = ValueNone
        let mutable prevListViewGrouped_SelectedItemOpt = ValueNone
        let mutable currListViewGrouped_SelectedItemOpt = ValueNone
        let mutable prevSeparatorVisibilityOpt = ValueNone
        let mutable currSeparatorVisibilityOpt = ValueNone
        let mutable prevSeparatorColorOpt = ValueNone
        let mutable currSeparatorColorOpt = ValueNone
        let mutable prevListViewGrouped_ItemAppearingOpt = ValueNone
        let mutable currListViewGrouped_ItemAppearingOpt = ValueNone
        let mutable prevListViewGrouped_ItemDisappearingOpt = ValueNone
        let mutable currListViewGrouped_ItemDisappearingOpt = ValueNone
        let mutable prevListViewGrouped_ItemSelectedOpt = ValueNone
        let mutable currListViewGrouped_ItemSelectedOpt = ValueNone
        let mutable prevListViewGrouped_ItemTappedOpt = ValueNone
        let mutable currListViewGrouped_ItemTappedOpt = ValueNone
        let mutable prevRefreshingOpt = ValueNone
        let mutable currRefreshingOpt = ValueNone
        let mutable prevSelectionModeOpt = ValueNone
        let mutable currSelectionModeOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.ListViewGrouped_ItemsSourceAttribKey.KeyValue then 
                currListViewGrouped_ItemsSourceOpt <- ValueSome (kvp.Value :?> (string * ViewElement * ViewElement[])[])
            if kvp.Key = ViewAttributes.ListViewGrouped_ShowJumpListAttribKey.KeyValue then 
                currListViewGrouped_ShowJumpListOpt <- ValueSome (kvp.Value :?> bool)
            if kvp.Key = ViewAttributes.FooterAttribKey.KeyValue then 
                currFooterOpt <- ValueSome (kvp.Value :?> System.Object)
            if kvp.Key = ViewAttributes.HasUnevenRowsAttribKey.KeyValue then 
                currHasUnevenRowsOpt <- ValueSome (kvp.Value :?> bool)
            if kvp.Key = ViewAttributes.HeaderAttribKey.KeyValue then 
                currHeaderOpt <- ValueSome (kvp.Value :?> System.Object)
            if kvp.Key = ViewAttributes.IsPullToRefreshEnabledAttribKey.KeyValue then 
                currIsPullToRefreshEnabledOpt <- ValueSome (kvp.Value :?> bool)
            if kvp.Key = ViewAttributes.IsRefreshingAttribKey.KeyValue then 
                currIsRefreshingOpt <- ValueSome (kvp.Value :?> bool)
            if kvp.Key = ViewAttributes.RefreshCommandAttribKey.KeyValue then 
                currRefreshCommandOpt <- ValueSome (kvp.Value :?> System.Windows.Input.ICommand)
            if kvp.Key = ViewAttributes.RowHeightAttribKey.KeyValue then 
                currRowHeightOpt <- ValueSome (kvp.Value :?> int)
            if kvp.Key = ViewAttributes.ListViewGrouped_SelectedItemAttribKey.KeyValue then 
                currListViewGrouped_SelectedItemOpt <- ValueSome (kvp.Value :?> (int * int) option)
            if kvp.Key = ViewAttributes.SeparatorVisibilityAttribKey.KeyValue then 
                currSeparatorVisibilityOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.SeparatorVisibility)
            if kvp.Key = ViewAttributes.SeparatorColorAttribKey.KeyValue then 
                currSeparatorColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
            if kvp.Key = ViewAttributes.ListViewGrouped_ItemAppearingAttribKey.KeyValue then 
                currListViewGrouped_ItemAppearingOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.ItemVisibilityEventArgs>)
            if kvp.Key = ViewAttributes.ListViewGrouped_ItemDisappearingAttribKey.KeyValue then 
                currListViewGrouped_ItemDisappearingOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.ItemVisibilityEventArgs>)
            if kvp.Key = ViewAttributes.ListViewGrouped_ItemSelectedAttribKey.KeyValue then 
                currListViewGrouped_ItemSelectedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.SelectedItemChangedEventArgs>)
            if kvp.Key = ViewAttributes.ListViewGrouped_ItemTappedAttribKey.KeyValue then 
                currListViewGrouped_ItemTappedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.ItemTappedEventArgs>)
            if kvp.Key = ViewAttributes.RefreshingAttribKey.KeyValue then 
                currRefreshingOpt <- ValueSome (kvp.Value :?> System.EventHandler)
            if kvp.Key = ViewAttributes.SelectionModeAttribKey.KeyValue then 
                currSelectionModeOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.ListViewSelectionMode)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.ListViewGrouped_ItemsSourceAttribKey.KeyValue then 
                    prevListViewGrouped_ItemsSourceOpt <- ValueSome (kvp.Value :?> (string * ViewElement * ViewElement[])[])
                if kvp.Key = ViewAttributes.ListViewGrouped_ShowJumpListAttribKey.KeyValue then 
                    prevListViewGrouped_ShowJumpListOpt <- ValueSome (kvp.Value :?> bool)
                if kvp.Key = ViewAttributes.FooterAttribKey.KeyValue then 
                    prevFooterOpt <- ValueSome (kvp.Value :?> System.Object)
                if kvp.Key = ViewAttributes.HasUnevenRowsAttribKey.KeyValue then 
                    prevHasUnevenRowsOpt <- ValueSome (kvp.Value :?> bool)
                if kvp.Key = ViewAttributes.HeaderAttribKey.KeyValue then 
                    prevHeaderOpt <- ValueSome (kvp.Value :?> System.Object)
                if kvp.Key = ViewAttributes.IsPullToRefreshEnabledAttribKey.KeyValue then 
                    prevIsPullToRefreshEnabledOpt <- ValueSome (kvp.Value :?> bool)
                if kvp.Key = ViewAttributes.IsRefreshingAttribKey.KeyValue then 
                    prevIsRefreshingOpt <- ValueSome (kvp.Value :?> bool)
                if kvp.Key = ViewAttributes.RefreshCommandAttribKey.KeyValue then 
                    prevRefreshCommandOpt <- ValueSome (kvp.Value :?> System.Windows.Input.ICommand)
                if kvp.Key = ViewAttributes.RowHeightAttribKey.KeyValue then 
                    prevRowHeightOpt <- ValueSome (kvp.Value :?> int)
                if kvp.Key = ViewAttributes.ListViewGrouped_SelectedItemAttribKey.KeyValue then 
                    prevListViewGrouped_SelectedItemOpt <- ValueSome (kvp.Value :?> (int * int) option)
                if kvp.Key = ViewAttributes.SeparatorVisibilityAttribKey.KeyValue then 
                    prevSeparatorVisibilityOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.SeparatorVisibility)
                if kvp.Key = ViewAttributes.SeparatorColorAttribKey.KeyValue then 
                    prevSeparatorColorOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.Color)
                if kvp.Key = ViewAttributes.ListViewGrouped_ItemAppearingAttribKey.KeyValue then 
                    prevListViewGrouped_ItemAppearingOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.ItemVisibilityEventArgs>)
                if kvp.Key = ViewAttributes.ListViewGrouped_ItemDisappearingAttribKey.KeyValue then 
                    prevListViewGrouped_ItemDisappearingOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.ItemVisibilityEventArgs>)
                if kvp.Key = ViewAttributes.ListViewGrouped_ItemSelectedAttribKey.KeyValue then 
                    prevListViewGrouped_ItemSelectedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.SelectedItemChangedEventArgs>)
                if kvp.Key = ViewAttributes.ListViewGrouped_ItemTappedAttribKey.KeyValue then 
                    prevListViewGrouped_ItemTappedOpt <- ValueSome (kvp.Value :?> System.EventHandler<Xamarin.Forms.ItemTappedEventArgs>)
                if kvp.Key = ViewAttributes.RefreshingAttribKey.KeyValue then 
                    prevRefreshingOpt <- ValueSome (kvp.Value :?> System.EventHandler)
                if kvp.Key = ViewAttributes.SelectionModeAttribKey.KeyValue then 
                    prevSelectionModeOpt <- ValueSome (kvp.Value :?> Xamarin.Forms.ListViewSelectionMode)
        updateListViewGroupedItems prevListViewGrouped_ItemsSourceOpt currListViewGrouped_ItemsSourceOpt target
        updateListViewGroupedShowJumpList prevListViewGrouped_ShowJumpListOpt currListViewGrouped_ShowJumpListOpt target
        match prevFooterOpt, currFooterOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Footer <-  currValue
        | ValueSome _, ValueNone -> target.Footer <- null
        | ValueNone, ValueNone -> ()
        match prevHasUnevenRowsOpt, currHasUnevenRowsOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.HasUnevenRows <-  currValue
        | ValueSome _, ValueNone -> target.HasUnevenRows <- false
        | ValueNone, ValueNone -> ()
        match prevHeaderOpt, currHeaderOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Header <-  currValue
        | ValueSome _, ValueNone -> target.Header <- null
        | ValueNone, ValueNone -> ()
        match prevIsPullToRefreshEnabledOpt, currIsPullToRefreshEnabledOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.IsPullToRefreshEnabled <-  currValue
        | ValueSome _, ValueNone -> target.IsPullToRefreshEnabled <- false
        | ValueNone, ValueNone -> ()
        match prevIsRefreshingOpt, currIsRefreshingOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.IsRefreshing <-  currValue
        | ValueSome _, ValueNone -> target.IsRefreshing <- false
        | ValueNone, ValueNone -> ()
        match prevRefreshCommandOpt, currRefreshCommandOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.RefreshCommand <-  currValue
        | ValueSome _, ValueNone -> target.RefreshCommand <- null
        | ValueNone, ValueNone -> ()
        match prevRowHeightOpt, currRowHeightOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.RowHeight <-  currValue
        | ValueSome _, ValueNone -> target.RowHeight <- -1
        | ValueNone, ValueNone -> ()
        match prevListViewGrouped_SelectedItemOpt, currListViewGrouped_SelectedItemOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.SelectedItem <- (function None -> null | Some (i,j) -> let items = target.ItemsSource :?> System.Collections.Generic.IList<ListGroupData<ViewElement>> in (if i >= 0 && i < items.Count then (let items2 = items.[i] in if j >= 0 && j < items2.Count then items2.[j] else null) else null)) currValue
        | ValueSome _, ValueNone -> target.SelectedItem <- null
        | ValueNone, ValueNone -> ()
        match prevSeparatorVisibilityOpt, currSeparatorVisibilityOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.SeparatorVisibility <-  currValue
        | ValueSome _, ValueNone -> target.SeparatorVisibility <- Xamarin.Forms.SeparatorVisibility.Default
        | ValueNone, ValueNone -> ()
        match prevSeparatorColorOpt, currSeparatorColorOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.SeparatorColor <-  currValue
        | ValueSome _, ValueNone -> target.SeparatorColor <- Xamarin.Forms.Color.Default
        | ValueNone, ValueNone -> ()
        match prevListViewGrouped_ItemAppearingOpt, currListViewGrouped_ItemAppearingOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.ItemAppearing.RemoveHandler(prevValue); target.ItemAppearing.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.ItemAppearing.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.ItemAppearing.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevListViewGrouped_ItemDisappearingOpt, currListViewGrouped_ItemDisappearingOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.ItemDisappearing.RemoveHandler(prevValue); target.ItemDisappearing.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.ItemDisappearing.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.ItemDisappearing.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevListViewGrouped_ItemSelectedOpt, currListViewGrouped_ItemSelectedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.ItemSelected.RemoveHandler(prevValue); target.ItemSelected.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.ItemSelected.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.ItemSelected.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevListViewGrouped_ItemTappedOpt, currListViewGrouped_ItemTappedOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.ItemTapped.RemoveHandler(prevValue); target.ItemTapped.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.ItemTapped.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.ItemTapped.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevRefreshingOpt, currRefreshingOpt with
        | ValueSome prevValue, ValueSome currValue when identical prevValue currValue -> ()
        | ValueSome prevValue, ValueSome currValue -> target.Refreshing.RemoveHandler(prevValue); target.Refreshing.AddHandler(currValue)
        | ValueNone, ValueSome currValue -> target.Refreshing.AddHandler(currValue)
        | ValueSome prevValue, ValueNone -> target.Refreshing.RemoveHandler(prevValue)
        | ValueNone, ValueNone -> ()
        match prevSelectionModeOpt, currSelectionModeOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.SelectionMode <-  currValue
        | ValueSome _, ValueNone -> target.SelectionMode <- Xamarin.Forms.ListViewSelectionMode.Single
        | ValueNone, ValueNone -> ()

    static member inline ConstructListViewGrouped(?items: (string * ViewElement * ViewElement list) list,
                                                  ?showJumpList: bool,
                                                  ?footer: System.Object,
                                                  ?hasUnevenRows: bool,
                                                  ?header: System.Object,
                                                  ?isPullToRefreshEnabled: bool,
                                                  ?isRefreshing: bool,
                                                  ?refreshCommand: unit -> unit,
                                                  ?rowHeight: int,
                                                  ?selectedItem: (int * int) option,
                                                  ?separatorVisibility: Xamarin.Forms.SeparatorVisibility,
                                                  ?separatorColor: Xamarin.Forms.Color,
                                                  ?itemAppearing: int * int option -> unit,
                                                  ?itemDisappearing: int * int option -> unit,
                                                  ?itemSelected: (int * int) option -> unit,
                                                  ?itemTapped: int * int -> unit,
                                                  ?refreshing: unit -> unit,
                                                  ?selectionMode: Xamarin.Forms.ListViewSelectionMode,
                                                  ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                                  ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                                  ?margin: obj,
                                                  ?gestureRecognizers: ViewElement list,
                                                  ?anchorX: double,
                                                  ?anchorY: double,
                                                  ?backgroundColor: Xamarin.Forms.Color,
                                                  ?heightRequest: double,
                                                  ?inputTransparent: bool,
                                                  ?isEnabled: bool,
                                                  ?isVisible: bool,
                                                  ?minimumHeightRequest: double,
                                                  ?minimumWidthRequest: double,
                                                  ?opacity: double,
                                                  ?rotation: double,
                                                  ?rotationX: double,
                                                  ?rotationY: double,
                                                  ?scale: double,
                                                  ?style: Xamarin.Forms.Style,
                                                  ?styleClass: obj,
                                                  ?translationX: double,
                                                  ?translationY: double,
                                                  ?widthRequest: double,
                                                  ?resources: (string * obj) list,
                                                  ?styles: Xamarin.Forms.Style list,
                                                  ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                                  ?isTabStop: bool,
                                                  ?scaleX: double,
                                                  ?scaleY: double,
                                                  ?tabIndex: int,
                                                  ?childrenReordered: System.EventArgs -> unit,
                                                  ?measureInvalidated: System.EventArgs -> unit,
                                                  ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                                  ?sizeChanged: System.EventArgs -> unit,
                                                  ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                                  ?classId: string,
                                                  ?styleId: string,
                                                  ?automationId: string,
                                                  ?created: (Xamarin.Forms.ListView -> unit),
                                                  ?ref: ViewRef<Xamarin.Forms.ListView>) = 

        let attribBuilder = ViewBuilders.BuildListViewGrouped(0,
                               ?items=items,
                               ?showJumpList=showJumpList,
                               ?footer=footer,
                               ?hasUnevenRows=hasUnevenRows,
                               ?header=header,
                               ?isPullToRefreshEnabled=isPullToRefreshEnabled,
                               ?isRefreshing=isRefreshing,
                               ?refreshCommand=refreshCommand,
                               ?rowHeight=rowHeight,
                               ?selectedItem=selectedItem,
                               ?separatorVisibility=separatorVisibility,
                               ?separatorColor=separatorColor,
                               ?itemAppearing=itemAppearing,
                               ?itemDisappearing=itemDisappearing,
                               ?itemSelected=itemSelected,
                               ?itemTapped=itemTapped,
                               ?refreshing=refreshing,
                               ?selectionMode=selectionMode,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Xamarin.Forms.ListView> target))),
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Xamarin.Forms.ListView>) -> Some ref.Unbox))

        ViewElement.Create<Xamarin.Forms.ListView>(ViewBuilders.CreateFuncListViewGrouped, ViewBuilders.UpdateFuncListViewGrouped, attribBuilder)

/// Viewer that allows to read the properties of a ViewElement representing a Element
type ElementViewer(element: ViewElement) =
    do if not ((typeof<Xamarin.Forms.Element>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.Element' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the ClassId property
    member this.ClassId = element.GetAttributeKeyed(ViewAttributes.ClassIdAttribKey)
    /// Get the value of the StyleId property
    member this.StyleId = element.GetAttributeKeyed(ViewAttributes.StyleIdAttribKey)
    /// Get the value of the AutomationId property
    member this.AutomationId = element.GetAttributeKeyed(ViewAttributes.AutomationIdAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a VisualElement
type VisualElementViewer(element: ViewElement) =
    inherit ElementViewer(element)
    do if not ((typeof<Xamarin.Forms.VisualElement>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.VisualElement' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the AnchorX property
    member this.AnchorX = element.GetAttributeKeyed(ViewAttributes.AnchorXAttribKey)
    /// Get the value of the AnchorY property
    member this.AnchorY = element.GetAttributeKeyed(ViewAttributes.AnchorYAttribKey)
    /// Get the value of the BackgroundColor property
    member this.BackgroundColor = element.GetAttributeKeyed(ViewAttributes.BackgroundColorAttribKey)
    /// Get the value of the HeightRequest property
    member this.HeightRequest = element.GetAttributeKeyed(ViewAttributes.HeightRequestAttribKey)
    /// Get the value of the InputTransparent property
    member this.InputTransparent = element.GetAttributeKeyed(ViewAttributes.InputTransparentAttribKey)
    /// Get the value of the IsEnabled property
    member this.IsEnabled = element.GetAttributeKeyed(ViewAttributes.IsEnabledAttribKey)
    /// Get the value of the IsVisible property
    member this.IsVisible = element.GetAttributeKeyed(ViewAttributes.IsVisibleAttribKey)
    /// Get the value of the MinimumHeightRequest property
    member this.MinimumHeightRequest = element.GetAttributeKeyed(ViewAttributes.MinimumHeightRequestAttribKey)
    /// Get the value of the MinimumWidthRequest property
    member this.MinimumWidthRequest = element.GetAttributeKeyed(ViewAttributes.MinimumWidthRequestAttribKey)
    /// Get the value of the Opacity property
    member this.Opacity = element.GetAttributeKeyed(ViewAttributes.OpacityAttribKey)
    /// Get the value of the Rotation property
    member this.Rotation = element.GetAttributeKeyed(ViewAttributes.RotationAttribKey)
    /// Get the value of the RotationX property
    member this.RotationX = element.GetAttributeKeyed(ViewAttributes.RotationXAttribKey)
    /// Get the value of the RotationY property
    member this.RotationY = element.GetAttributeKeyed(ViewAttributes.RotationYAttribKey)
    /// Get the value of the Scale property
    member this.Scale = element.GetAttributeKeyed(ViewAttributes.ScaleAttribKey)
    /// Get the value of the Style property
    member this.Style = element.GetAttributeKeyed(ViewAttributes.StyleAttribKey)
    /// Get the value of the StyleClass property
    member this.StyleClass = element.GetAttributeKeyed(ViewAttributes.StyleClassAttribKey)
    /// Get the value of the TranslationX property
    member this.TranslationX = element.GetAttributeKeyed(ViewAttributes.TranslationXAttribKey)
    /// Get the value of the TranslationY property
    member this.TranslationY = element.GetAttributeKeyed(ViewAttributes.TranslationYAttribKey)
    /// Get the value of the WidthRequest property
    member this.WidthRequest = element.GetAttributeKeyed(ViewAttributes.WidthRequestAttribKey)
    /// Get the value of the Resources property
    member this.Resources = element.GetAttributeKeyed(ViewAttributes.ResourcesAttribKey)
    /// Get the value of the Styles property
    member this.Styles = element.GetAttributeKeyed(ViewAttributes.StylesAttribKey)
    /// Get the value of the StyleSheets property
    member this.StyleSheets = element.GetAttributeKeyed(ViewAttributes.StyleSheetsAttribKey)
    /// Get the value of the IsTabStop property
    member this.IsTabStop = element.GetAttributeKeyed(ViewAttributes.IsTabStopAttribKey)
    /// Get the value of the ScaleX property
    member this.ScaleX = element.GetAttributeKeyed(ViewAttributes.ScaleXAttribKey)
    /// Get the value of the ScaleY property
    member this.ScaleY = element.GetAttributeKeyed(ViewAttributes.ScaleYAttribKey)
    /// Get the value of the TabIndex property
    member this.TabIndex = element.GetAttributeKeyed(ViewAttributes.TabIndexAttribKey)
    /// Get the value of the ChildrenReordered property
    member this.ChildrenReordered = element.GetAttributeKeyed(ViewAttributes.ChildrenReorderedAttribKey)
    /// Get the value of the MeasureInvalidated property
    member this.MeasureInvalidated = element.GetAttributeKeyed(ViewAttributes.MeasureInvalidatedAttribKey)
    /// Get the value of the Focused property
    member this.Focused = element.GetAttributeKeyed(ViewAttributes.FocusedAttribKey)
    /// Get the value of the SizeChanged property
    member this.SizeChanged = element.GetAttributeKeyed(ViewAttributes.SizeChangedAttribKey)
    /// Get the value of the Unfocused property
    member this.Unfocused = element.GetAttributeKeyed(ViewAttributes.UnfocusedAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a View
type ViewViewer(element: ViewElement) =
    inherit VisualElementViewer(element)
    do if not ((typeof<Xamarin.Forms.View>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.View' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the HorizontalOptions property
    member this.HorizontalOptions = element.GetAttributeKeyed(ViewAttributes.HorizontalOptionsAttribKey)
    /// Get the value of the VerticalOptions property
    member this.VerticalOptions = element.GetAttributeKeyed(ViewAttributes.VerticalOptionsAttribKey)
    /// Get the value of the Margin property
    member this.Margin = element.GetAttributeKeyed(ViewAttributes.MarginAttribKey)
    /// Get the value of the GestureRecognizers property
    member this.GestureRecognizers = element.GetAttributeKeyed(ViewAttributes.GestureRecognizersAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a IGestureRecognizer
type IGestureRecognizerViewer(element: ViewElement) =
    do if not ((typeof<Xamarin.Forms.IGestureRecognizer>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.IGestureRecognizer' is expected, but '%s' was provided." element.TargetType.FullName

/// Viewer that allows to read the properties of a ViewElement representing a PanGestureRecognizer
type PanGestureRecognizerViewer(element: ViewElement) =
    inherit ElementViewer(element)
    do if not ((typeof<Xamarin.Forms.PanGestureRecognizer>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.PanGestureRecognizer' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the TouchPoints property
    member this.TouchPoints = element.GetAttributeKeyed(ViewAttributes.TouchPointsAttribKey)
    /// Get the value of the PanUpdated property
    member this.PanUpdated = element.GetAttributeKeyed(ViewAttributes.PanUpdatedAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a TapGestureRecognizer
type TapGestureRecognizerViewer(element: ViewElement) =
    inherit ElementViewer(element)
    do if not ((typeof<Xamarin.Forms.TapGestureRecognizer>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.TapGestureRecognizer' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Command property
    member this.Command = element.GetAttributeKeyed(ViewAttributes.CommandAttribKey)
    /// Get the value of the NumberOfTapsRequired property
    member this.NumberOfTapsRequired = element.GetAttributeKeyed(ViewAttributes.NumberOfTapsRequiredAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a ClickGestureRecognizer
type ClickGestureRecognizerViewer(element: ViewElement) =
    inherit ElementViewer(element)
    do if not ((typeof<Xamarin.Forms.ClickGestureRecognizer>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.ClickGestureRecognizer' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Command property
    member this.Command = element.GetAttributeKeyed(ViewAttributes.CommandAttribKey)
    /// Get the value of the NumberOfClicksRequired property
    member this.NumberOfClicksRequired = element.GetAttributeKeyed(ViewAttributes.NumberOfClicksRequiredAttribKey)
    /// Get the value of the Buttons property
    member this.Buttons = element.GetAttributeKeyed(ViewAttributes.ButtonsAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a PinchGestureRecognizer
type PinchGestureRecognizerViewer(element: ViewElement) =
    inherit ElementViewer(element)
    do if not ((typeof<Xamarin.Forms.PinchGestureRecognizer>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.PinchGestureRecognizer' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the IsPinching property
    member this.IsPinching = element.GetAttributeKeyed(ViewAttributes.IsPinchingAttribKey)
    /// Get the value of the PinchUpdated property
    member this.PinchUpdated = element.GetAttributeKeyed(ViewAttributes.PinchUpdatedAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a SwipeGestureRecognizer
type SwipeGestureRecognizerViewer(element: ViewElement) =
    inherit ElementViewer(element)
    do if not ((typeof<Xamarin.Forms.SwipeGestureRecognizer>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.SwipeGestureRecognizer' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Command property
    member this.Command = element.GetAttributeKeyed(ViewAttributes.CommandAttribKey)
    /// Get the value of the Direction property
    member this.Direction = element.GetAttributeKeyed(ViewAttributes.SwipeGestureRecognizerDirectionAttribKey)
    /// Get the value of the Threshold property
    member this.Threshold = element.GetAttributeKeyed(ViewAttributes.ThresholdAttribKey)
    /// Get the value of the Swiped property
    member this.Swiped = element.GetAttributeKeyed(ViewAttributes.SwipedAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a ActivityIndicator
type ActivityIndicatorViewer(element: ViewElement) =
    inherit ViewViewer(element)
    do if not ((typeof<Xamarin.Forms.ActivityIndicator>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.ActivityIndicator' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Color property
    member this.Color = element.GetAttributeKeyed(ViewAttributes.ColorAttribKey)
    /// Get the value of the IsRunning property
    member this.IsRunning = element.GetAttributeKeyed(ViewAttributes.IsRunningAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a BoxView
type BoxViewViewer(element: ViewElement) =
    inherit ViewViewer(element)
    do if not ((typeof<Xamarin.Forms.BoxView>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.BoxView' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Color property
    member this.Color = element.GetAttributeKeyed(ViewAttributes.ColorAttribKey)
    /// Get the value of the CornerRadius property
    member this.CornerRadius = element.GetAttributeKeyed(ViewAttributes.BoxViewCornerRadiusAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a ProgressBar
type ProgressBarViewer(element: ViewElement) =
    inherit ViewViewer(element)
    do if not ((typeof<Xamarin.Forms.ProgressBar>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.ProgressBar' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Progress property
    member this.Progress = element.GetAttributeKeyed(ViewAttributes.ProgressAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a Layout
type LayoutViewer(element: ViewElement) =
    inherit ViewViewer(element)
    do if not ((typeof<Xamarin.Forms.Layout>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.Layout' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the IsClippedToBounds property
    member this.IsClippedToBounds = element.GetAttributeKeyed(ViewAttributes.IsClippedToBoundsAttribKey)
    /// Get the value of the Padding property
    member this.Padding = element.GetAttributeKeyed(ViewAttributes.PaddingAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a ScrollView
type ScrollViewViewer(element: ViewElement) =
    inherit LayoutViewer(element)
    do if not ((typeof<Xamarin.Forms.ScrollView>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.ScrollView' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Content property
    member this.Content = element.GetAttributeKeyed(ViewAttributes.ContentAttribKey)
    /// Get the value of the Orientation property
    member this.Orientation = element.GetAttributeKeyed(ViewAttributes.ScrollOrientationAttribKey)
    /// Get the value of the HorizontalScrollBarVisibility property
    member this.HorizontalScrollBarVisibility = element.GetAttributeKeyed(ViewAttributes.HorizontalScrollBarVisibilityAttribKey)
    /// Get the value of the VerticalScrollBarVisibility property
    member this.VerticalScrollBarVisibility = element.GetAttributeKeyed(ViewAttributes.VerticalScrollBarVisibilityAttribKey)
    /// Get the value of the ScrollTo property
    member this.ScrollTo = element.GetAttributeKeyed(ViewAttributes.ScrollToAttribKey)
    /// Get the value of the Scrolled property
    member this.Scrolled = element.GetAttributeKeyed(ViewAttributes.ScrolledAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a SearchBar
type SearchBarViewer(element: ViewElement) =
    inherit ViewViewer(element)
    do if not ((typeof<Xamarin.Forms.SearchBar>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.SearchBar' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the CancelButtonColor property
    member this.CancelButtonColor = element.GetAttributeKeyed(ViewAttributes.CancelButtonColorAttribKey)
    /// Get the value of the FontFamily property
    member this.FontFamily = element.GetAttributeKeyed(ViewAttributes.FontFamilyAttribKey)
    /// Get the value of the FontAttributes property
    member this.FontAttributes = element.GetAttributeKeyed(ViewAttributes.FontAttributesAttribKey)
    /// Get the value of the FontSize property
    member this.FontSize = element.GetAttributeKeyed(ViewAttributes.FontSizeAttribKey)
    /// Get the value of the HorizontalTextAlignment property
    member this.HorizontalTextAlignment = element.GetAttributeKeyed(ViewAttributes.HorizontalTextAlignmentAttribKey)
    /// Get the value of the Placeholder property
    member this.Placeholder = element.GetAttributeKeyed(ViewAttributes.PlaceholderAttribKey)
    /// Get the value of the PlaceholderColor property
    member this.PlaceholderColor = element.GetAttributeKeyed(ViewAttributes.PlaceholderColorAttribKey)
    /// Get the value of the SearchCommand property
    member this.SearchCommand = element.GetAttributeKeyed(ViewAttributes.SearchBarCommandAttribKey)
    /// Get the value of the CanExecute property
    member this.CanExecute = element.GetAttributeKeyed(ViewAttributes.SearchBarCanExecuteAttribKey)
    /// Get the value of the Text property
    member this.Text = element.GetAttributeKeyed(ViewAttributes.TextAttribKey)
    /// Get the value of the TextColor property
    member this.TextColor = element.GetAttributeKeyed(ViewAttributes.TextColorAttribKey)
    /// Get the value of the TextChanged property
    member this.TextChanged = element.GetAttributeKeyed(ViewAttributes.SearchBarTextChangedAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a Button
type ButtonViewer(element: ViewElement) =
    inherit ViewViewer(element)
    do if not ((typeof<Xamarin.Forms.Button>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.Button' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Text property
    member this.Text = element.GetAttributeKeyed(ViewAttributes.TextAttribKey)
    /// Get the value of the Command property
    member this.Command = element.GetAttributeKeyed(ViewAttributes.ButtonCommandAttribKey)
    /// Get the value of the CanExecute property
    member this.CanExecute = element.GetAttributeKeyed(ViewAttributes.ButtonCanExecuteAttribKey)
    /// Get the value of the BorderColor property
    member this.BorderColor = element.GetAttributeKeyed(ViewAttributes.BorderColorAttribKey)
    /// Get the value of the BorderWidth property
    member this.BorderWidth = element.GetAttributeKeyed(ViewAttributes.BorderWidthAttribKey)
    /// Get the value of the CommandParameter property
    member this.CommandParameter = element.GetAttributeKeyed(ViewAttributes.CommandParameterAttribKey)
    /// Get the value of the ContentLayout property
    member this.ContentLayout = element.GetAttributeKeyed(ViewAttributes.ContentLayoutAttribKey)
    /// Get the value of the CornerRadius property
    member this.CornerRadius = element.GetAttributeKeyed(ViewAttributes.ButtonCornerRadiusAttribKey)
    /// Get the value of the FontFamily property
    member this.FontFamily = element.GetAttributeKeyed(ViewAttributes.FontFamilyAttribKey)
    /// Get the value of the FontAttributes property
    member this.FontAttributes = element.GetAttributeKeyed(ViewAttributes.FontAttributesAttribKey)
    /// Get the value of the FontSize property
    member this.FontSize = element.GetAttributeKeyed(ViewAttributes.FontSizeAttribKey)
    /// Get the value of the Image property
    member this.Image = element.GetAttributeKeyed(ViewAttributes.ButtonImageSourceAttribKey)
    /// Get the value of the TextColor property
    member this.TextColor = element.GetAttributeKeyed(ViewAttributes.TextColorAttribKey)
    /// Get the value of the Padding property
    member this.Padding = element.GetAttributeKeyed(ViewAttributes.PaddingAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a Slider
type SliderViewer(element: ViewElement) =
    inherit ViewViewer(element)
    do if not ((typeof<Xamarin.Forms.Slider>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.Slider' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the MinimumMaximum property
    member this.MinimumMaximum = element.GetAttributeKeyed(ViewAttributes.MinimumMaximumAttribKey)
    /// Get the value of the Value property
    member this.Value = element.GetAttributeKeyed(ViewAttributes.ValueAttribKey)
    /// Get the value of the ValueChanged property
    member this.ValueChanged = element.GetAttributeKeyed(ViewAttributes.ValueChangedAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a Stepper
type StepperViewer(element: ViewElement) =
    inherit ViewViewer(element)
    do if not ((typeof<Xamarin.Forms.Stepper>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.Stepper' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the MinimumMaximum property
    member this.MinimumMaximum = element.GetAttributeKeyed(ViewAttributes.MinimumMaximumAttribKey)
    /// Get the value of the Value property
    member this.Value = element.GetAttributeKeyed(ViewAttributes.ValueAttribKey)
    /// Get the value of the Increment property
    member this.Increment = element.GetAttributeKeyed(ViewAttributes.IncrementAttribKey)
    /// Get the value of the ValueChanged property
    member this.ValueChanged = element.GetAttributeKeyed(ViewAttributes.ValueChangedAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a Switch
type SwitchViewer(element: ViewElement) =
    inherit ViewViewer(element)
    do if not ((typeof<Xamarin.Forms.Switch>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.Switch' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the IsToggled property
    member this.IsToggled = element.GetAttributeKeyed(ViewAttributes.IsToggledAttribKey)
    /// Get the value of the Toggled property
    member this.Toggled = element.GetAttributeKeyed(ViewAttributes.ToggledAttribKey)
    /// Get the value of the OnColor property
    member this.OnColor = element.GetAttributeKeyed(ViewAttributes.OnColorAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a Cell
type CellViewer(element: ViewElement) =
    inherit ElementViewer(element)
    do if not ((typeof<Xamarin.Forms.Cell>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.Cell' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Height property
    member this.Height = element.GetAttributeKeyed(ViewAttributes.HeightAttribKey)
    /// Get the value of the IsEnabled property
    member this.IsEnabled = element.GetAttributeKeyed(ViewAttributes.IsEnabledAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a SwitchCell
type SwitchCellViewer(element: ViewElement) =
    inherit CellViewer(element)
    do if not ((typeof<Xamarin.Forms.SwitchCell>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.SwitchCell' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the On property
    member this.On = element.GetAttributeKeyed(ViewAttributes.OnAttribKey)
    /// Get the value of the Text property
    member this.Text = element.GetAttributeKeyed(ViewAttributes.TextAttribKey)
    /// Get the value of the OnChanged property
    member this.OnChanged = element.GetAttributeKeyed(ViewAttributes.OnChangedAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a TableView
type TableViewViewer(element: ViewElement) =
    inherit ViewViewer(element)
    do if not ((typeof<Xamarin.Forms.TableView>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.TableView' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Intent property
    member this.Intent = element.GetAttributeKeyed(ViewAttributes.IntentAttribKey)
    /// Get the value of the HasUnevenRows property
    member this.HasUnevenRows = element.GetAttributeKeyed(ViewAttributes.HasUnevenRowsAttribKey)
    /// Get the value of the RowHeight property
    member this.RowHeight = element.GetAttributeKeyed(ViewAttributes.RowHeightAttribKey)
    /// Get the value of the Root property
    member this.Root = element.GetAttributeKeyed(ViewAttributes.TableRootAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a RowDefinition
type RowDefinitionViewer(element: ViewElement) =
    do if not ((typeof<Xamarin.Forms.RowDefinition>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.RowDefinition' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Height property
    member this.Height = element.GetAttributeKeyed(ViewAttributes.RowDefinitionHeightAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a ColumnDefinition
type ColumnDefinitionViewer(element: ViewElement) =
    do if not ((typeof<Xamarin.Forms.ColumnDefinition>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.ColumnDefinition' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Width property
    member this.Width = element.GetAttributeKeyed(ViewAttributes.ColumnDefinitionWidthAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a Grid
type GridViewer(element: ViewElement) =
    inherit LayoutViewer(element)
    do if not ((typeof<Xamarin.Forms.Grid>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.Grid' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the RowDefinitions property
    member this.RowDefinitions = element.GetAttributeKeyed(ViewAttributes.GridRowDefinitionsAttribKey)
    /// Get the value of the ColumnDefinitions property
    member this.ColumnDefinitions = element.GetAttributeKeyed(ViewAttributes.GridColumnDefinitionsAttribKey)
    /// Get the value of the RowSpacing property
    member this.RowSpacing = element.GetAttributeKeyed(ViewAttributes.RowSpacingAttribKey)
    /// Get the value of the ColumnSpacing property
    member this.ColumnSpacing = element.GetAttributeKeyed(ViewAttributes.ColumnSpacingAttribKey)
    /// Get the value of the Children property
    member this.Children = element.GetAttributeKeyed(ViewAttributes.ChildrenAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a AbsoluteLayout
type AbsoluteLayoutViewer(element: ViewElement) =
    inherit LayoutViewer(element)
    do if not ((typeof<Xamarin.Forms.AbsoluteLayout>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.AbsoluteLayout' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Children property
    member this.Children = element.GetAttributeKeyed(ViewAttributes.ChildrenAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a RelativeLayout
type RelativeLayoutViewer(element: ViewElement) =
    inherit LayoutViewer(element)
    do if not ((typeof<Xamarin.Forms.RelativeLayout>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.RelativeLayout' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Children property
    member this.Children = element.GetAttributeKeyed(ViewAttributes.ChildrenAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a FlexLayout
type FlexLayoutViewer(element: ViewElement) =
    inherit LayoutViewer(element)
    do if not ((typeof<Xamarin.Forms.FlexLayout>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.FlexLayout' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the AlignContent property
    member this.AlignContent = element.GetAttributeKeyed(ViewAttributes.AlignContentAttribKey)
    /// Get the value of the AlignItems property
    member this.AlignItems = element.GetAttributeKeyed(ViewAttributes.AlignItemsAttribKey)
    /// Get the value of the Direction property
    member this.Direction = element.GetAttributeKeyed(ViewAttributes.FlexLayoutDirectionAttribKey)
    /// Get the value of the Position property
    member this.Position = element.GetAttributeKeyed(ViewAttributes.PositionAttribKey)
    /// Get the value of the Wrap property
    member this.Wrap = element.GetAttributeKeyed(ViewAttributes.WrapAttribKey)
    /// Get the value of the JustifyContent property
    member this.JustifyContent = element.GetAttributeKeyed(ViewAttributes.JustifyContentAttribKey)
    /// Get the value of the Children property
    member this.Children = element.GetAttributeKeyed(ViewAttributes.ChildrenAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a TemplatedView
type TemplatedViewViewer(element: ViewElement) =
    inherit LayoutViewer(element)
    do if not ((typeof<Xamarin.Forms.TemplatedView>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.TemplatedView' is expected, but '%s' was provided." element.TargetType.FullName

/// Viewer that allows to read the properties of a ViewElement representing a ContentView
type ContentViewViewer(element: ViewElement) =
    inherit TemplatedViewViewer(element)
    do if not ((typeof<Xamarin.Forms.ContentView>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.ContentView' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Content property
    member this.Content = element.GetAttributeKeyed(ViewAttributes.ContentAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a DatePicker
type DatePickerViewer(element: ViewElement) =
    inherit ViewViewer(element)
    do if not ((typeof<Xamarin.Forms.DatePicker>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.DatePicker' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Date property
    member this.Date = element.GetAttributeKeyed(ViewAttributes.DateAttribKey)
    /// Get the value of the Format property
    member this.Format = element.GetAttributeKeyed(ViewAttributes.FormatAttribKey)
    /// Get the value of the MinimumDate property
    member this.MinimumDate = element.GetAttributeKeyed(ViewAttributes.MinimumDateAttribKey)
    /// Get the value of the MaximumDate property
    member this.MaximumDate = element.GetAttributeKeyed(ViewAttributes.MaximumDateAttribKey)
    /// Get the value of the DateSelected property
    member this.DateSelected = element.GetAttributeKeyed(ViewAttributes.DateSelectedAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a Picker
type PickerViewer(element: ViewElement) =
    inherit ViewViewer(element)
    do if not ((typeof<Xamarin.Forms.Picker>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.Picker' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the ItemsSource property
    member this.ItemsSource = element.GetAttributeKeyed(ViewAttributes.PickerItemsSourceAttribKey)
    /// Get the value of the SelectedIndex property
    member this.SelectedIndex = element.GetAttributeKeyed(ViewAttributes.SelectedIndexAttribKey)
    /// Get the value of the Title property
    member this.Title = element.GetAttributeKeyed(ViewAttributes.TitleAttribKey)
    /// Get the value of the TextColor property
    member this.TextColor = element.GetAttributeKeyed(ViewAttributes.TextColorAttribKey)
    /// Get the value of the SelectedIndexChanged property
    member this.SelectedIndexChanged = element.GetAttributeKeyed(ViewAttributes.SelectedIndexChangedAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a Frame
type FrameViewer(element: ViewElement) =
    inherit ContentViewViewer(element)
    do if not ((typeof<Xamarin.Forms.Frame>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.Frame' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the BorderColor property
    member this.BorderColor = element.GetAttributeKeyed(ViewAttributes.BorderColorAttribKey)
    /// Get the value of the CornerRadius property
    member this.CornerRadius = element.GetAttributeKeyed(ViewAttributes.FrameCornerRadiusAttribKey)
    /// Get the value of the HasShadow property
    member this.HasShadow = element.GetAttributeKeyed(ViewAttributes.HasShadowAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a Image
type ImageViewer(element: ViewElement) =
    inherit ViewViewer(element)
    do if not ((typeof<Xamarin.Forms.Image>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.Image' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Source property
    member this.Source = element.GetAttributeKeyed(ViewAttributes.ImageSourceAttribKey)
    /// Get the value of the Aspect property
    member this.Aspect = element.GetAttributeKeyed(ViewAttributes.AspectAttribKey)
    /// Get the value of the IsOpaque property
    member this.IsOpaque = element.GetAttributeKeyed(ViewAttributes.IsOpaqueAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a ImageButton
type ImageButtonViewer(element: ViewElement) =
    inherit ViewViewer(element)
    do if not ((typeof<Xamarin.Forms.ImageButton>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.ImageButton' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Command property
    member this.Command = element.GetAttributeKeyed(ViewAttributes.ImageButtonCommandAttribKey)
    /// Get the value of the Source property
    member this.Source = element.GetAttributeKeyed(ViewAttributes.ImageSourceAttribKey)
    /// Get the value of the Aspect property
    member this.Aspect = element.GetAttributeKeyed(ViewAttributes.AspectAttribKey)
    /// Get the value of the BorderColor property
    member this.BorderColor = element.GetAttributeKeyed(ViewAttributes.BorderColorAttribKey)
    /// Get the value of the BorderWidth property
    member this.BorderWidth = element.GetAttributeKeyed(ViewAttributes.BorderWidthAttribKey)
    /// Get the value of the CornerRadius property
    member this.CornerRadius = element.GetAttributeKeyed(ViewAttributes.ImageButtonCornerRadiusAttribKey)
    /// Get the value of the IsOpaque property
    member this.IsOpaque = element.GetAttributeKeyed(ViewAttributes.IsOpaqueAttribKey)
    /// Get the value of the Padding property
    member this.Padding = element.GetAttributeKeyed(ViewAttributes.PaddingAttribKey)
    /// Get the value of the Clicked property
    member this.Clicked = element.GetAttributeKeyed(ViewAttributes.ClickedAttribKey)
    /// Get the value of the Pressed property
    member this.Pressed = element.GetAttributeKeyed(ViewAttributes.PressedAttribKey)
    /// Get the value of the Released property
    member this.Released = element.GetAttributeKeyed(ViewAttributes.ReleasedAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a InputView
type InputViewViewer(element: ViewElement) =
    inherit ViewViewer(element)
    do if not ((typeof<Xamarin.Forms.InputView>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.InputView' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Keyboard property
    member this.Keyboard = element.GetAttributeKeyed(ViewAttributes.KeyboardAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a Editor
type EditorViewer(element: ViewElement) =
    inherit InputViewViewer(element)
    do if not ((typeof<Xamarin.Forms.Editor>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.Editor' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Text property
    member this.Text = element.GetAttributeKeyed(ViewAttributes.TextAttribKey)
    /// Get the value of the FontSize property
    member this.FontSize = element.GetAttributeKeyed(ViewAttributes.FontSizeAttribKey)
    /// Get the value of the FontFamily property
    member this.FontFamily = element.GetAttributeKeyed(ViewAttributes.FontFamilyAttribKey)
    /// Get the value of the FontAttributes property
    member this.FontAttributes = element.GetAttributeKeyed(ViewAttributes.FontAttributesAttribKey)
    /// Get the value of the TextColor property
    member this.TextColor = element.GetAttributeKeyed(ViewAttributes.TextColorAttribKey)
    /// Get the value of the Completed property
    member this.Completed = element.GetAttributeKeyed(ViewAttributes.EditorCompletedAttribKey)
    /// Get the value of the TextChanged property
    member this.TextChanged = element.GetAttributeKeyed(ViewAttributes.TextChangedAttribKey)
    /// Get the value of the AutoSize property
    member this.AutoSize = element.GetAttributeKeyed(ViewAttributes.AutoSizeAttribKey)
    /// Get the value of the Placeholder property
    member this.Placeholder = element.GetAttributeKeyed(ViewAttributes.PlaceholderAttribKey)
    /// Get the value of the PlaceholderColor property
    member this.PlaceholderColor = element.GetAttributeKeyed(ViewAttributes.PlaceholderColorAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a Entry
type EntryViewer(element: ViewElement) =
    inherit InputViewViewer(element)
    do if not ((typeof<Xamarin.Forms.Entry>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.Entry' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Text property
    member this.Text = element.GetAttributeKeyed(ViewAttributes.TextAttribKey)
    /// Get the value of the Placeholder property
    member this.Placeholder = element.GetAttributeKeyed(ViewAttributes.PlaceholderAttribKey)
    /// Get the value of the HorizontalTextAlignment property
    member this.HorizontalTextAlignment = element.GetAttributeKeyed(ViewAttributes.HorizontalTextAlignmentAttribKey)
    /// Get the value of the FontSize property
    member this.FontSize = element.GetAttributeKeyed(ViewAttributes.FontSizeAttribKey)
    /// Get the value of the FontFamily property
    member this.FontFamily = element.GetAttributeKeyed(ViewAttributes.FontFamilyAttribKey)
    /// Get the value of the FontAttributes property
    member this.FontAttributes = element.GetAttributeKeyed(ViewAttributes.FontAttributesAttribKey)
    /// Get the value of the TextColor property
    member this.TextColor = element.GetAttributeKeyed(ViewAttributes.TextColorAttribKey)
    /// Get the value of the PlaceholderColor property
    member this.PlaceholderColor = element.GetAttributeKeyed(ViewAttributes.PlaceholderColorAttribKey)
    /// Get the value of the IsPassword property
    member this.IsPassword = element.GetAttributeKeyed(ViewAttributes.IsPasswordAttribKey)
    /// Get the value of the Completed property
    member this.Completed = element.GetAttributeKeyed(ViewAttributes.EntryCompletedAttribKey)
    /// Get the value of the TextChanged property
    member this.TextChanged = element.GetAttributeKeyed(ViewAttributes.TextChangedAttribKey)
    /// Get the value of the IsTextPredictionEnabled property
    member this.IsTextPredictionEnabled = element.GetAttributeKeyed(ViewAttributes.IsTextPredictionEnabledAttribKey)
    /// Get the value of the ReturnType property
    member this.ReturnType = element.GetAttributeKeyed(ViewAttributes.ReturnTypeAttribKey)
    /// Get the value of the ReturnCommand property
    member this.ReturnCommand = element.GetAttributeKeyed(ViewAttributes.ReturnCommandAttribKey)
    /// Get the value of the CursorPosition property
    member this.CursorPosition = element.GetAttributeKeyed(ViewAttributes.CursorPositionAttribKey)
    /// Get the value of the SelectionLength property
    member this.SelectionLength = element.GetAttributeKeyed(ViewAttributes.SelectionLengthAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a EntryCell
type EntryCellViewer(element: ViewElement) =
    inherit CellViewer(element)
    do if not ((typeof<Fabulous.CustomControls.CustomEntryCell>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Fabulous.CustomControls.CustomEntryCell' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Label property
    member this.Label = element.GetAttributeKeyed(ViewAttributes.LabelAttribKey)
    /// Get the value of the Text property
    member this.Text = element.GetAttributeKeyed(ViewAttributes.TextAttribKey)
    /// Get the value of the Keyboard property
    member this.Keyboard = element.GetAttributeKeyed(ViewAttributes.KeyboardAttribKey)
    /// Get the value of the Placeholder property
    member this.Placeholder = element.GetAttributeKeyed(ViewAttributes.PlaceholderAttribKey)
    /// Get the value of the HorizontalTextAlignment property
    member this.HorizontalTextAlignment = element.GetAttributeKeyed(ViewAttributes.HorizontalTextAlignmentAttribKey)
    /// Get the value of the Completed property
    member this.Completed = element.GetAttributeKeyed(ViewAttributes.EntryCompletedAttribKey)
    /// Get the value of the TextChanged property
    member this.TextChanged = element.GetAttributeKeyed(ViewAttributes.EntryCellTextChangedAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a Label
type LabelViewer(element: ViewElement) =
    inherit ViewViewer(element)
    do if not ((typeof<Xamarin.Forms.Label>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.Label' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Text property
    member this.Text = element.GetAttributeKeyed(ViewAttributes.TextAttribKey)
    /// Get the value of the HorizontalTextAlignment property
    member this.HorizontalTextAlignment = element.GetAttributeKeyed(ViewAttributes.HorizontalTextAlignmentAttribKey)
    /// Get the value of the VerticalTextAlignment property
    member this.VerticalTextAlignment = element.GetAttributeKeyed(ViewAttributes.VerticalTextAlignmentAttribKey)
    /// Get the value of the FontSize property
    member this.FontSize = element.GetAttributeKeyed(ViewAttributes.FontSizeAttribKey)
    /// Get the value of the FontFamily property
    member this.FontFamily = element.GetAttributeKeyed(ViewAttributes.FontFamilyAttribKey)
    /// Get the value of the FontAttributes property
    member this.FontAttributes = element.GetAttributeKeyed(ViewAttributes.FontAttributesAttribKey)
    /// Get the value of the TextColor property
    member this.TextColor = element.GetAttributeKeyed(ViewAttributes.TextColorAttribKey)
    /// Get the value of the FormattedText property
    member this.FormattedText = element.GetAttributeKeyed(ViewAttributes.FormattedTextAttribKey)
    /// Get the value of the LineBreakMode property
    member this.LineBreakMode = element.GetAttributeKeyed(ViewAttributes.LineBreakModeAttribKey)
    /// Get the value of the LineHeight property
    member this.LineHeight = element.GetAttributeKeyed(ViewAttributes.LineHeightAttribKey)
    /// Get the value of the MaxLines property
    member this.MaxLines = element.GetAttributeKeyed(ViewAttributes.MaxLinesAttribKey)
    /// Get the value of the TextDecorations property
    member this.TextDecorations = element.GetAttributeKeyed(ViewAttributes.TextDecorationsAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a StackLayout
type StackLayoutViewer(element: ViewElement) =
    inherit LayoutViewer(element)
    do if not ((typeof<Xamarin.Forms.StackLayout>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.StackLayout' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Children property
    member this.Children = element.GetAttributeKeyed(ViewAttributes.ChildrenAttribKey)
    /// Get the value of the Orientation property
    member this.Orientation = element.GetAttributeKeyed(ViewAttributes.StackOrientationAttribKey)
    /// Get the value of the Spacing property
    member this.Spacing = element.GetAttributeKeyed(ViewAttributes.SpacingAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a Span
type SpanViewer(element: ViewElement) =
    inherit ElementViewer(element)
    do if not ((typeof<Xamarin.Forms.Span>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.Span' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the FontFamily property
    member this.FontFamily = element.GetAttributeKeyed(ViewAttributes.FontFamilyAttribKey)
    /// Get the value of the FontAttributes property
    member this.FontAttributes = element.GetAttributeKeyed(ViewAttributes.FontAttributesAttribKey)
    /// Get the value of the FontSize property
    member this.FontSize = element.GetAttributeKeyed(ViewAttributes.FontSizeAttribKey)
    /// Get the value of the BackgroundColor property
    member this.BackgroundColor = element.GetAttributeKeyed(ViewAttributes.BackgroundColorAttribKey)
    /// Get the value of the ForegroundColor property
    member this.ForegroundColor = element.GetAttributeKeyed(ViewAttributes.ForegroundColorAttribKey)
    /// Get the value of the Text property
    member this.Text = element.GetAttributeKeyed(ViewAttributes.TextAttribKey)
    /// Get the value of the PropertyChanged property
    member this.PropertyChanged = element.GetAttributeKeyed(ViewAttributes.PropertyChangedAttribKey)
    /// Get the value of the LineHeight property
    member this.LineHeight = element.GetAttributeKeyed(ViewAttributes.LineHeightAttribKey)
    /// Get the value of the TextDecorations property
    member this.TextDecorations = element.GetAttributeKeyed(ViewAttributes.TextDecorationsAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a FormattedString
type FormattedStringViewer(element: ViewElement) =
    inherit ElementViewer(element)
    do if not ((typeof<Xamarin.Forms.FormattedString>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.FormattedString' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Spans property
    member this.Spans = element.GetAttributeKeyed(ViewAttributes.SpansAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a TimePicker
type TimePickerViewer(element: ViewElement) =
    inherit ViewViewer(element)
    do if not ((typeof<Xamarin.Forms.TimePicker>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.TimePicker' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Time property
    member this.Time = element.GetAttributeKeyed(ViewAttributes.TimeAttribKey)
    /// Get the value of the Format property
    member this.Format = element.GetAttributeKeyed(ViewAttributes.FormatAttribKey)
    /// Get the value of the TextColor property
    member this.TextColor = element.GetAttributeKeyed(ViewAttributes.TextColorAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a WebView
type WebViewViewer(element: ViewElement) =
    inherit ViewViewer(element)
    do if not ((typeof<Xamarin.Forms.WebView>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.WebView' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Source property
    member this.Source = element.GetAttributeKeyed(ViewAttributes.WebSourceAttribKey)
    /// Get the value of the Reload property
    member this.Reload = element.GetAttributeKeyed(ViewAttributes.ReloadAttribKey)
    /// Get the value of the Navigated property
    member this.Navigated = element.GetAttributeKeyed(ViewAttributes.NavigatedAttribKey)
    /// Get the value of the Navigating property
    member this.Navigating = element.GetAttributeKeyed(ViewAttributes.NavigatingAttribKey)
    /// Get the value of the ReloadRequested property
    member this.ReloadRequested = element.GetAttributeKeyed(ViewAttributes.ReloadRequestedAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a Page
type PageViewer(element: ViewElement) =
    inherit VisualElementViewer(element)
    do if not ((typeof<Xamarin.Forms.Page>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.Page' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Title property
    member this.Title = element.GetAttributeKeyed(ViewAttributes.TitleAttribKey)
    /// Get the value of the BackgroundImage property
    member this.BackgroundImage = element.GetAttributeKeyed(ViewAttributes.BackgroundImageAttribKey)
    /// Get the value of the Icon property
    member this.Icon = element.GetAttributeKeyed(ViewAttributes.IconAttribKey)
    /// Get the value of the IsBusy property
    member this.IsBusy = element.GetAttributeKeyed(ViewAttributes.IsBusyAttribKey)
    /// Get the value of the Padding property
    member this.Padding = element.GetAttributeKeyed(ViewAttributes.PaddingAttribKey)
    /// Get the value of the ToolbarItems property
    member this.ToolbarItems = element.GetAttributeKeyed(ViewAttributes.ToolbarItemsAttribKey)
    /// Get the value of the UseSafeArea property
    member this.UseSafeArea = element.GetAttributeKeyed(ViewAttributes.UseSafeAreaAttribKey)
    /// Get the value of the Appearing property
    member this.Appearing = element.GetAttributeKeyed(ViewAttributes.Page_AppearingAttribKey)
    /// Get the value of the Disappearing property
    member this.Disappearing = element.GetAttributeKeyed(ViewAttributes.Page_DisappearingAttribKey)
    /// Get the value of the LayoutChanged property
    member this.LayoutChanged = element.GetAttributeKeyed(ViewAttributes.Page_LayoutChangedAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a CarouselPage
type CarouselPageViewer(element: ViewElement) =
    inherit PageViewer(element)
    do if not ((typeof<Xamarin.Forms.CarouselPage>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.CarouselPage' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Children property
    member this.Children = element.GetAttributeKeyed(ViewAttributes.ChildrenAttribKey)
    /// Get the value of the CurrentPage property
    member this.CurrentPage = element.GetAttributeKeyed(ViewAttributes.CarouselPage_CurrentPageAttribKey)
    /// Get the value of the CurrentPageChanged property
    member this.CurrentPageChanged = element.GetAttributeKeyed(ViewAttributes.CarouselPage_CurrentPageChangedAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a NavigationPage
type NavigationPageViewer(element: ViewElement) =
    inherit PageViewer(element)
    do if not ((typeof<Xamarin.Forms.NavigationPage>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.NavigationPage' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Pages property
    member this.Pages = element.GetAttributeKeyed(ViewAttributes.PagesAttribKey)
    /// Get the value of the BarBackgroundColor property
    member this.BarBackgroundColor = element.GetAttributeKeyed(ViewAttributes.BarBackgroundColorAttribKey)
    /// Get the value of the BarTextColor property
    member this.BarTextColor = element.GetAttributeKeyed(ViewAttributes.BarTextColorAttribKey)
    /// Get the value of the Popped property
    member this.Popped = element.GetAttributeKeyed(ViewAttributes.PoppedAttribKey)
    /// Get the value of the PoppedToRoot property
    member this.PoppedToRoot = element.GetAttributeKeyed(ViewAttributes.PoppedToRootAttribKey)
    /// Get the value of the Pushed property
    member this.Pushed = element.GetAttributeKeyed(ViewAttributes.PushedAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a TabbedPage
type TabbedPageViewer(element: ViewElement) =
    inherit PageViewer(element)
    do if not ((typeof<Xamarin.Forms.TabbedPage>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.TabbedPage' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Children property
    member this.Children = element.GetAttributeKeyed(ViewAttributes.ChildrenAttribKey)
    /// Get the value of the BarBackgroundColor property
    member this.BarBackgroundColor = element.GetAttributeKeyed(ViewAttributes.BarBackgroundColorAttribKey)
    /// Get the value of the BarTextColor property
    member this.BarTextColor = element.GetAttributeKeyed(ViewAttributes.BarTextColorAttribKey)
    /// Get the value of the CurrentPage property
    member this.CurrentPage = element.GetAttributeKeyed(ViewAttributes.TabbedPage_CurrentPageAttribKey)
    /// Get the value of the CurrentPageChanged property
    member this.CurrentPageChanged = element.GetAttributeKeyed(ViewAttributes.TabbedPage_CurrentPageChangedAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a ContentPage
type ContentPageViewer(element: ViewElement) =
    inherit PageViewer(element)
    do if not ((typeof<Xamarin.Forms.ContentPage>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.ContentPage' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Content property
    member this.Content = element.GetAttributeKeyed(ViewAttributes.ContentAttribKey)
    /// Get the value of the OnSizeAllocatedCallback property
    member this.OnSizeAllocatedCallback = element.GetAttributeKeyed(ViewAttributes.OnSizeAllocatedCallbackAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a MasterDetailPage
type MasterDetailPageViewer(element: ViewElement) =
    inherit PageViewer(element)
    do if not ((typeof<Xamarin.Forms.MasterDetailPage>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.MasterDetailPage' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Master property
    member this.Master = element.GetAttributeKeyed(ViewAttributes.MasterAttribKey)
    /// Get the value of the Detail property
    member this.Detail = element.GetAttributeKeyed(ViewAttributes.DetailAttribKey)
    /// Get the value of the IsGestureEnabled property
    member this.IsGestureEnabled = element.GetAttributeKeyed(ViewAttributes.IsGestureEnabledAttribKey)
    /// Get the value of the IsPresented property
    member this.IsPresented = element.GetAttributeKeyed(ViewAttributes.IsPresentedAttribKey)
    /// Get the value of the MasterBehavior property
    member this.MasterBehavior = element.GetAttributeKeyed(ViewAttributes.MasterBehaviorAttribKey)
    /// Get the value of the IsPresentedChanged property
    member this.IsPresentedChanged = element.GetAttributeKeyed(ViewAttributes.IsPresentedChangedAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a MenuItem
type MenuItemViewer(element: ViewElement) =
    inherit ElementViewer(element)
    do if not ((typeof<Xamarin.Forms.MenuItem>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.MenuItem' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Text property
    member this.Text = element.GetAttributeKeyed(ViewAttributes.TextAttribKey)
    /// Get the value of the Command property
    member this.Command = element.GetAttributeKeyed(ViewAttributes.CommandAttribKey)
    /// Get the value of the CommandParameter property
    member this.CommandParameter = element.GetAttributeKeyed(ViewAttributes.CommandParameterAttribKey)
    /// Get the value of the Icon property
    member this.Icon = element.GetAttributeKeyed(ViewAttributes.IconAttribKey)
    /// Get the value of the Accelerator property
    member this.Accelerator = element.GetAttributeKeyed(ViewAttributes.AcceleratorAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a TextCell
type TextCellViewer(element: ViewElement) =
    inherit CellViewer(element)
    do if not ((typeof<Xamarin.Forms.TextCell>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.TextCell' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Text property
    member this.Text = element.GetAttributeKeyed(ViewAttributes.TextAttribKey)
    /// Get the value of the Detail property
    member this.Detail = element.GetAttributeKeyed(ViewAttributes.TextDetailAttribKey)
    /// Get the value of the TextColor property
    member this.TextColor = element.GetAttributeKeyed(ViewAttributes.TextColorAttribKey)
    /// Get the value of the DetailColor property
    member this.DetailColor = element.GetAttributeKeyed(ViewAttributes.TextDetailColorAttribKey)
    /// Get the value of the Command property
    member this.Command = element.GetAttributeKeyed(ViewAttributes.TextCellCommandAttribKey)
    /// Get the value of the CanExecute property
    member this.CanExecute = element.GetAttributeKeyed(ViewAttributes.TextCellCanExecuteAttribKey)
    /// Get the value of the CommandParameter property
    member this.CommandParameter = element.GetAttributeKeyed(ViewAttributes.CommandParameterAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a ToolbarItem
type ToolbarItemViewer(element: ViewElement) =
    inherit MenuItemViewer(element)
    do if not ((typeof<Xamarin.Forms.ToolbarItem>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.ToolbarItem' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Order property
    member this.Order = element.GetAttributeKeyed(ViewAttributes.OrderAttribKey)
    /// Get the value of the Priority property
    member this.Priority = element.GetAttributeKeyed(ViewAttributes.PriorityAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a ImageCell
type ImageCellViewer(element: ViewElement) =
    inherit TextCellViewer(element)
    do if not ((typeof<Xamarin.Forms.ImageCell>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.ImageCell' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the ImageSource property
    member this.ImageSource = element.GetAttributeKeyed(ViewAttributes.ImageSourceAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a ViewCell
type ViewCellViewer(element: ViewElement) =
    inherit CellViewer(element)
    do if not ((typeof<Xamarin.Forms.ViewCell>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.ViewCell' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the View property
    member this.View = element.GetAttributeKeyed(ViewAttributes.ViewAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a ListView
type ListViewViewer(element: ViewElement) =
    inherit ViewViewer(element)
    do if not ((typeof<Xamarin.Forms.ListView>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.ListView' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the ItemsSource property
    member this.ItemsSource = element.GetAttributeKeyed(ViewAttributes.ListViewItemsAttribKey)
    /// Get the value of the Footer property
    member this.Footer = element.GetAttributeKeyed(ViewAttributes.FooterAttribKey)
    /// Get the value of the HasUnevenRows property
    member this.HasUnevenRows = element.GetAttributeKeyed(ViewAttributes.HasUnevenRowsAttribKey)
    /// Get the value of the Header property
    member this.Header = element.GetAttributeKeyed(ViewAttributes.HeaderAttribKey)
    /// Get the value of the HeaderTemplate property
    member this.HeaderTemplate = element.GetAttributeKeyed(ViewAttributes.HeaderTemplateAttribKey)
    /// Get the value of the IsGroupingEnabled property
    member this.IsGroupingEnabled = element.GetAttributeKeyed(ViewAttributes.IsGroupingEnabledAttribKey)
    /// Get the value of the IsPullToRefreshEnabled property
    member this.IsPullToRefreshEnabled = element.GetAttributeKeyed(ViewAttributes.IsPullToRefreshEnabledAttribKey)
    /// Get the value of the IsRefreshing property
    member this.IsRefreshing = element.GetAttributeKeyed(ViewAttributes.IsRefreshingAttribKey)
    /// Get the value of the RefreshCommand property
    member this.RefreshCommand = element.GetAttributeKeyed(ViewAttributes.RefreshCommandAttribKey)
    /// Get the value of the RowHeight property
    member this.RowHeight = element.GetAttributeKeyed(ViewAttributes.RowHeightAttribKey)
    /// Get the value of the SelectedItem property
    member this.SelectedItem = element.GetAttributeKeyed(ViewAttributes.ListView_SelectedItemAttribKey)
    /// Get the value of the SeparatorVisibility property
    member this.SeparatorVisibility = element.GetAttributeKeyed(ViewAttributes.ListView_SeparatorVisibilityAttribKey)
    /// Get the value of the SeparatorColor property
    member this.SeparatorColor = element.GetAttributeKeyed(ViewAttributes.ListView_SeparatorColorAttribKey)
    /// Get the value of the ItemAppearing property
    member this.ItemAppearing = element.GetAttributeKeyed(ViewAttributes.ListView_ItemAppearingAttribKey)
    /// Get the value of the ItemDisappearing property
    member this.ItemDisappearing = element.GetAttributeKeyed(ViewAttributes.ListView_ItemDisappearingAttribKey)
    /// Get the value of the ItemSelected property
    member this.ItemSelected = element.GetAttributeKeyed(ViewAttributes.ListView_ItemSelectedAttribKey)
    /// Get the value of the ItemTapped property
    member this.ItemTapped = element.GetAttributeKeyed(ViewAttributes.ListView_ItemTappedAttribKey)
    /// Get the value of the Refreshing property
    member this.Refreshing = element.GetAttributeKeyed(ViewAttributes.ListView_RefreshingAttribKey)
    /// Get the value of the SelectionMode property
    member this.SelectionMode = element.GetAttributeKeyed(ViewAttributes.SelectionModeAttribKey)

/// Viewer that allows to read the properties of a ViewElement representing a ListViewGrouped
type ListViewGroupedViewer(element: ViewElement) =
    inherit ViewViewer(element)
    do if not ((typeof<Xamarin.Forms.ListView>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Xamarin.Forms.ListView' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the ItemsSource property
    member this.ItemsSource = element.GetAttributeKeyed(ViewAttributes.ListViewGrouped_ItemsSourceAttribKey)
    /// Get the value of the ShowJumpList property
    member this.ShowJumpList = element.GetAttributeKeyed(ViewAttributes.ListViewGrouped_ShowJumpListAttribKey)
    /// Get the value of the Footer property
    member this.Footer = element.GetAttributeKeyed(ViewAttributes.FooterAttribKey)
    /// Get the value of the HasUnevenRows property
    member this.HasUnevenRows = element.GetAttributeKeyed(ViewAttributes.HasUnevenRowsAttribKey)
    /// Get the value of the Header property
    member this.Header = element.GetAttributeKeyed(ViewAttributes.HeaderAttribKey)
    /// Get the value of the IsPullToRefreshEnabled property
    member this.IsPullToRefreshEnabled = element.GetAttributeKeyed(ViewAttributes.IsPullToRefreshEnabledAttribKey)
    /// Get the value of the IsRefreshing property
    member this.IsRefreshing = element.GetAttributeKeyed(ViewAttributes.IsRefreshingAttribKey)
    /// Get the value of the RefreshCommand property
    member this.RefreshCommand = element.GetAttributeKeyed(ViewAttributes.RefreshCommandAttribKey)
    /// Get the value of the RowHeight property
    member this.RowHeight = element.GetAttributeKeyed(ViewAttributes.RowHeightAttribKey)
    /// Get the value of the SelectedItem property
    member this.SelectedItem = element.GetAttributeKeyed(ViewAttributes.ListViewGrouped_SelectedItemAttribKey)
    /// Get the value of the SeparatorVisibility property
    member this.SeparatorVisibility = element.GetAttributeKeyed(ViewAttributes.SeparatorVisibilityAttribKey)
    /// Get the value of the SeparatorColor property
    member this.SeparatorColor = element.GetAttributeKeyed(ViewAttributes.SeparatorColorAttribKey)
    /// Get the value of the ItemAppearing property
    member this.ItemAppearing = element.GetAttributeKeyed(ViewAttributes.ListViewGrouped_ItemAppearingAttribKey)
    /// Get the value of the ItemDisappearing property
    member this.ItemDisappearing = element.GetAttributeKeyed(ViewAttributes.ListViewGrouped_ItemDisappearingAttribKey)
    /// Get the value of the ItemSelected property
    member this.ItemSelected = element.GetAttributeKeyed(ViewAttributes.ListViewGrouped_ItemSelectedAttribKey)
    /// Get the value of the ItemTapped property
    member this.ItemTapped = element.GetAttributeKeyed(ViewAttributes.ListViewGrouped_ItemTappedAttribKey)
    /// Get the value of the Refreshing property
    member this.Refreshing = element.GetAttributeKeyed(ViewAttributes.RefreshingAttribKey)
    /// Get the value of the SelectionMode property
    member this.SelectionMode = element.GetAttributeKeyed(ViewAttributes.SelectionModeAttribKey)

type View() =
    /// Describes a Element in the view
    static member inline Element(?classId: string,
                                 ?styleId: string,
                                 ?automationId: string,
                                 ?created: (Xamarin.Forms.Element -> unit),
                                 ?ref: ViewRef<Xamarin.Forms.Element>) =

        ViewBuilders.ConstructElement(?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a VisualElement in the view
    static member inline VisualElement(?anchorX: double,
                                       ?anchorY: double,
                                       ?backgroundColor: Xamarin.Forms.Color,
                                       ?heightRequest: double,
                                       ?inputTransparent: bool,
                                       ?isEnabled: bool,
                                       ?isVisible: bool,
                                       ?minimumHeightRequest: double,
                                       ?minimumWidthRequest: double,
                                       ?opacity: double,
                                       ?rotation: double,
                                       ?rotationX: double,
                                       ?rotationY: double,
                                       ?scale: double,
                                       ?style: Xamarin.Forms.Style,
                                       ?styleClass: obj,
                                       ?translationX: double,
                                       ?translationY: double,
                                       ?widthRequest: double,
                                       ?resources: (string * obj) list,
                                       ?styles: Xamarin.Forms.Style list,
                                       ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                       ?isTabStop: bool,
                                       ?scaleX: double,
                                       ?scaleY: double,
                                       ?tabIndex: int,
                                       ?childrenReordered: System.EventArgs -> unit,
                                       ?measureInvalidated: System.EventArgs -> unit,
                                       ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                       ?sizeChanged: System.EventArgs -> unit,
                                       ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                       ?classId: string,
                                       ?styleId: string,
                                       ?automationId: string,
                                       ?created: (Xamarin.Forms.VisualElement -> unit),
                                       ?ref: ViewRef<Xamarin.Forms.VisualElement>) =

        ViewBuilders.ConstructVisualElement(?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a View in the view
    static member inline View(?horizontalOptions: Xamarin.Forms.LayoutOptions,
                              ?verticalOptions: Xamarin.Forms.LayoutOptions,
                              ?margin: obj,
                              ?gestureRecognizers: ViewElement list,
                              ?anchorX: double,
                              ?anchorY: double,
                              ?backgroundColor: Xamarin.Forms.Color,
                              ?heightRequest: double,
                              ?inputTransparent: bool,
                              ?isEnabled: bool,
                              ?isVisible: bool,
                              ?minimumHeightRequest: double,
                              ?minimumWidthRequest: double,
                              ?opacity: double,
                              ?rotation: double,
                              ?rotationX: double,
                              ?rotationY: double,
                              ?scale: double,
                              ?style: Xamarin.Forms.Style,
                              ?styleClass: obj,
                              ?translationX: double,
                              ?translationY: double,
                              ?widthRequest: double,
                              ?resources: (string * obj) list,
                              ?styles: Xamarin.Forms.Style list,
                              ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                              ?isTabStop: bool,
                              ?scaleX: double,
                              ?scaleY: double,
                              ?tabIndex: int,
                              ?childrenReordered: System.EventArgs -> unit,
                              ?measureInvalidated: System.EventArgs -> unit,
                              ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                              ?sizeChanged: System.EventArgs -> unit,
                              ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                              ?classId: string,
                              ?styleId: string,
                              ?automationId: string,
                              ?created: (Xamarin.Forms.View -> unit),
                              ?ref: ViewRef<Xamarin.Forms.View>) =

        ViewBuilders.ConstructView(?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a IGestureRecognizer in the view
    static member inline IGestureRecognizer() =

        ViewBuilders.ConstructIGestureRecognizer()

    /// Describes a PanGestureRecognizer in the view
    static member inline PanGestureRecognizer(?touchPoints: int,
                                              ?panUpdated: Xamarin.Forms.PanUpdatedEventArgs -> unit,
                                              ?classId: string,
                                              ?styleId: string,
                                              ?automationId: string,
                                              ?created: (Xamarin.Forms.PanGestureRecognizer -> unit),
                                              ?ref: ViewRef<Xamarin.Forms.PanGestureRecognizer>) =

        ViewBuilders.ConstructPanGestureRecognizer(?touchPoints=touchPoints,
                               ?panUpdated=panUpdated,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a TapGestureRecognizer in the view
    static member inline TapGestureRecognizer(?command: unit -> unit,
                                              ?numberOfTapsRequired: int,
                                              ?classId: string,
                                              ?styleId: string,
                                              ?automationId: string,
                                              ?created: (Xamarin.Forms.TapGestureRecognizer -> unit),
                                              ?ref: ViewRef<Xamarin.Forms.TapGestureRecognizer>) =

        ViewBuilders.ConstructTapGestureRecognizer(?command=command,
                               ?numberOfTapsRequired=numberOfTapsRequired,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a ClickGestureRecognizer in the view
    static member inline ClickGestureRecognizer(?command: unit -> unit,
                                                ?numberOfClicksRequired: int,
                                                ?buttons: Xamarin.Forms.ButtonsMask,
                                                ?classId: string,
                                                ?styleId: string,
                                                ?automationId: string,
                                                ?created: (Xamarin.Forms.ClickGestureRecognizer -> unit),
                                                ?ref: ViewRef<Xamarin.Forms.ClickGestureRecognizer>) =

        ViewBuilders.ConstructClickGestureRecognizer(?command=command,
                               ?numberOfClicksRequired=numberOfClicksRequired,
                               ?buttons=buttons,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a PinchGestureRecognizer in the view
    static member inline PinchGestureRecognizer(?isPinching: bool,
                                                ?pinchUpdated: Xamarin.Forms.PinchGestureUpdatedEventArgs -> unit,
                                                ?classId: string,
                                                ?styleId: string,
                                                ?automationId: string,
                                                ?created: (Xamarin.Forms.PinchGestureRecognizer -> unit),
                                                ?ref: ViewRef<Xamarin.Forms.PinchGestureRecognizer>) =

        ViewBuilders.ConstructPinchGestureRecognizer(?isPinching=isPinching,
                               ?pinchUpdated=pinchUpdated,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a SwipeGestureRecognizer in the view
    static member inline SwipeGestureRecognizer(?command: unit -> unit,
                                                ?direction: Xamarin.Forms.SwipeDirection,
                                                ?threshold: System.UInt32,
                                                ?swiped: Xamarin.Forms.SwipedEventArgs -> unit,
                                                ?classId: string,
                                                ?styleId: string,
                                                ?automationId: string,
                                                ?created: (Xamarin.Forms.SwipeGestureRecognizer -> unit),
                                                ?ref: ViewRef<Xamarin.Forms.SwipeGestureRecognizer>) =

        ViewBuilders.ConstructSwipeGestureRecognizer(?command=command,
                               ?direction=direction,
                               ?threshold=threshold,
                               ?swiped=swiped,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a ActivityIndicator in the view
    static member inline ActivityIndicator(?color: Xamarin.Forms.Color,
                                           ?isRunning: bool,
                                           ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                           ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                           ?margin: obj,
                                           ?gestureRecognizers: ViewElement list,
                                           ?anchorX: double,
                                           ?anchorY: double,
                                           ?backgroundColor: Xamarin.Forms.Color,
                                           ?heightRequest: double,
                                           ?inputTransparent: bool,
                                           ?isEnabled: bool,
                                           ?isVisible: bool,
                                           ?minimumHeightRequest: double,
                                           ?minimumWidthRequest: double,
                                           ?opacity: double,
                                           ?rotation: double,
                                           ?rotationX: double,
                                           ?rotationY: double,
                                           ?scale: double,
                                           ?style: Xamarin.Forms.Style,
                                           ?styleClass: obj,
                                           ?translationX: double,
                                           ?translationY: double,
                                           ?widthRequest: double,
                                           ?resources: (string * obj) list,
                                           ?styles: Xamarin.Forms.Style list,
                                           ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                           ?isTabStop: bool,
                                           ?scaleX: double,
                                           ?scaleY: double,
                                           ?tabIndex: int,
                                           ?childrenReordered: System.EventArgs -> unit,
                                           ?measureInvalidated: System.EventArgs -> unit,
                                           ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                           ?sizeChanged: System.EventArgs -> unit,
                                           ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                           ?classId: string,
                                           ?styleId: string,
                                           ?automationId: string,
                                           ?created: (Xamarin.Forms.ActivityIndicator -> unit),
                                           ?ref: ViewRef<Xamarin.Forms.ActivityIndicator>) =

        ViewBuilders.ConstructActivityIndicator(?color=color,
                               ?isRunning=isRunning,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a BoxView in the view
    static member inline BoxView(?color: Xamarin.Forms.Color,
                                 ?cornerRadius: Xamarin.Forms.CornerRadius,
                                 ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                 ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                 ?margin: obj,
                                 ?gestureRecognizers: ViewElement list,
                                 ?anchorX: double,
                                 ?anchorY: double,
                                 ?backgroundColor: Xamarin.Forms.Color,
                                 ?heightRequest: double,
                                 ?inputTransparent: bool,
                                 ?isEnabled: bool,
                                 ?isVisible: bool,
                                 ?minimumHeightRequest: double,
                                 ?minimumWidthRequest: double,
                                 ?opacity: double,
                                 ?rotation: double,
                                 ?rotationX: double,
                                 ?rotationY: double,
                                 ?scale: double,
                                 ?style: Xamarin.Forms.Style,
                                 ?styleClass: obj,
                                 ?translationX: double,
                                 ?translationY: double,
                                 ?widthRequest: double,
                                 ?resources: (string * obj) list,
                                 ?styles: Xamarin.Forms.Style list,
                                 ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                 ?isTabStop: bool,
                                 ?scaleX: double,
                                 ?scaleY: double,
                                 ?tabIndex: int,
                                 ?childrenReordered: System.EventArgs -> unit,
                                 ?measureInvalidated: System.EventArgs -> unit,
                                 ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                 ?sizeChanged: System.EventArgs -> unit,
                                 ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                 ?classId: string,
                                 ?styleId: string,
                                 ?automationId: string,
                                 ?created: (Xamarin.Forms.BoxView -> unit),
                                 ?ref: ViewRef<Xamarin.Forms.BoxView>) =

        ViewBuilders.ConstructBoxView(?color=color,
                               ?cornerRadius=cornerRadius,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a ProgressBar in the view
    static member inline ProgressBar(?progress: double,
                                     ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                     ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                     ?margin: obj,
                                     ?gestureRecognizers: ViewElement list,
                                     ?anchorX: double,
                                     ?anchorY: double,
                                     ?backgroundColor: Xamarin.Forms.Color,
                                     ?heightRequest: double,
                                     ?inputTransparent: bool,
                                     ?isEnabled: bool,
                                     ?isVisible: bool,
                                     ?minimumHeightRequest: double,
                                     ?minimumWidthRequest: double,
                                     ?opacity: double,
                                     ?rotation: double,
                                     ?rotationX: double,
                                     ?rotationY: double,
                                     ?scale: double,
                                     ?style: Xamarin.Forms.Style,
                                     ?styleClass: obj,
                                     ?translationX: double,
                                     ?translationY: double,
                                     ?widthRequest: double,
                                     ?resources: (string * obj) list,
                                     ?styles: Xamarin.Forms.Style list,
                                     ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                     ?isTabStop: bool,
                                     ?scaleX: double,
                                     ?scaleY: double,
                                     ?tabIndex: int,
                                     ?childrenReordered: System.EventArgs -> unit,
                                     ?measureInvalidated: System.EventArgs -> unit,
                                     ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                     ?sizeChanged: System.EventArgs -> unit,
                                     ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                     ?classId: string,
                                     ?styleId: string,
                                     ?automationId: string,
                                     ?created: (Xamarin.Forms.ProgressBar -> unit),
                                     ?ref: ViewRef<Xamarin.Forms.ProgressBar>) =

        ViewBuilders.ConstructProgressBar(?progress=progress,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a Layout in the view
    static member inline Layout(?isClippedToBounds: bool,
                                ?padding: obj,
                                ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                ?margin: obj,
                                ?gestureRecognizers: ViewElement list,
                                ?anchorX: double,
                                ?anchorY: double,
                                ?backgroundColor: Xamarin.Forms.Color,
                                ?heightRequest: double,
                                ?inputTransparent: bool,
                                ?isEnabled: bool,
                                ?isVisible: bool,
                                ?minimumHeightRequest: double,
                                ?minimumWidthRequest: double,
                                ?opacity: double,
                                ?rotation: double,
                                ?rotationX: double,
                                ?rotationY: double,
                                ?scale: double,
                                ?style: Xamarin.Forms.Style,
                                ?styleClass: obj,
                                ?translationX: double,
                                ?translationY: double,
                                ?widthRequest: double,
                                ?resources: (string * obj) list,
                                ?styles: Xamarin.Forms.Style list,
                                ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                ?isTabStop: bool,
                                ?scaleX: double,
                                ?scaleY: double,
                                ?tabIndex: int,
                                ?childrenReordered: System.EventArgs -> unit,
                                ?measureInvalidated: System.EventArgs -> unit,
                                ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                ?sizeChanged: System.EventArgs -> unit,
                                ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                ?classId: string,
                                ?styleId: string,
                                ?automationId: string,
                                ?created: (Xamarin.Forms.Layout -> unit),
                                ?ref: ViewRef<Xamarin.Forms.Layout>) =

        ViewBuilders.ConstructLayout(?isClippedToBounds=isClippedToBounds,
                               ?padding=padding,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a ScrollView in the view
    static member inline ScrollView(?content: ViewElement,
                                    ?orientation: Xamarin.Forms.ScrollOrientation,
                                    ?horizontalScrollBarVisibility: Xamarin.Forms.ScrollBarVisibility,
                                    ?verticalScrollBarVisibility: Xamarin.Forms.ScrollBarVisibility,
                                    ?scrollTo: float * float * Fabulous.DynamicViews.AnimationKind,
                                    ?scrolled: Xamarin.Forms.ScrolledEventArgs -> unit,
                                    ?isClippedToBounds: bool,
                                    ?padding: obj,
                                    ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                    ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                    ?margin: obj,
                                    ?gestureRecognizers: ViewElement list,
                                    ?anchorX: double,
                                    ?anchorY: double,
                                    ?backgroundColor: Xamarin.Forms.Color,
                                    ?heightRequest: double,
                                    ?inputTransparent: bool,
                                    ?isEnabled: bool,
                                    ?isVisible: bool,
                                    ?minimumHeightRequest: double,
                                    ?minimumWidthRequest: double,
                                    ?opacity: double,
                                    ?rotation: double,
                                    ?rotationX: double,
                                    ?rotationY: double,
                                    ?scale: double,
                                    ?style: Xamarin.Forms.Style,
                                    ?styleClass: obj,
                                    ?translationX: double,
                                    ?translationY: double,
                                    ?widthRequest: double,
                                    ?resources: (string * obj) list,
                                    ?styles: Xamarin.Forms.Style list,
                                    ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                    ?isTabStop: bool,
                                    ?scaleX: double,
                                    ?scaleY: double,
                                    ?tabIndex: int,
                                    ?childrenReordered: System.EventArgs -> unit,
                                    ?measureInvalidated: System.EventArgs -> unit,
                                    ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                    ?sizeChanged: System.EventArgs -> unit,
                                    ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                    ?classId: string,
                                    ?styleId: string,
                                    ?automationId: string,
                                    ?created: (Xamarin.Forms.ScrollView -> unit),
                                    ?ref: ViewRef<Xamarin.Forms.ScrollView>) =

        ViewBuilders.ConstructScrollView(?content=content,
                               ?orientation=orientation,
                               ?horizontalScrollBarVisibility=horizontalScrollBarVisibility,
                               ?verticalScrollBarVisibility=verticalScrollBarVisibility,
                               ?scrollTo=scrollTo,
                               ?scrolled=scrolled,
                               ?isClippedToBounds=isClippedToBounds,
                               ?padding=padding,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a SearchBar in the view
    static member inline SearchBar(?cancelButtonColor: Xamarin.Forms.Color,
                                   ?fontFamily: string,
                                   ?fontAttributes: Xamarin.Forms.FontAttributes,
                                   ?fontSize: obj,
                                   ?horizontalTextAlignment: Xamarin.Forms.TextAlignment,
                                   ?placeholder: string,
                                   ?placeholderColor: Xamarin.Forms.Color,
                                   ?searchCommand: string -> unit,
                                   ?canExecute: bool,
                                   ?text: string,
                                   ?textColor: Xamarin.Forms.Color,
                                   ?textChanged: Xamarin.Forms.TextChangedEventArgs -> unit,
                                   ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                   ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                   ?margin: obj,
                                   ?gestureRecognizers: ViewElement list,
                                   ?anchorX: double,
                                   ?anchorY: double,
                                   ?backgroundColor: Xamarin.Forms.Color,
                                   ?heightRequest: double,
                                   ?inputTransparent: bool,
                                   ?isEnabled: bool,
                                   ?isVisible: bool,
                                   ?minimumHeightRequest: double,
                                   ?minimumWidthRequest: double,
                                   ?opacity: double,
                                   ?rotation: double,
                                   ?rotationX: double,
                                   ?rotationY: double,
                                   ?scale: double,
                                   ?style: Xamarin.Forms.Style,
                                   ?styleClass: obj,
                                   ?translationX: double,
                                   ?translationY: double,
                                   ?widthRequest: double,
                                   ?resources: (string * obj) list,
                                   ?styles: Xamarin.Forms.Style list,
                                   ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                   ?isTabStop: bool,
                                   ?scaleX: double,
                                   ?scaleY: double,
                                   ?tabIndex: int,
                                   ?childrenReordered: System.EventArgs -> unit,
                                   ?measureInvalidated: System.EventArgs -> unit,
                                   ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                   ?sizeChanged: System.EventArgs -> unit,
                                   ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                   ?classId: string,
                                   ?styleId: string,
                                   ?automationId: string,
                                   ?created: (Xamarin.Forms.SearchBar -> unit),
                                   ?ref: ViewRef<Xamarin.Forms.SearchBar>) =

        ViewBuilders.ConstructSearchBar(?cancelButtonColor=cancelButtonColor,
                               ?fontFamily=fontFamily,
                               ?fontAttributes=fontAttributes,
                               ?fontSize=fontSize,
                               ?horizontalTextAlignment=horizontalTextAlignment,
                               ?placeholder=placeholder,
                               ?placeholderColor=placeholderColor,
                               ?searchCommand=searchCommand,
                               ?canExecute=canExecute,
                               ?text=text,
                               ?textColor=textColor,
                               ?textChanged=textChanged,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a Button in the view
    static member inline Button(?text: string,
                                ?command: unit -> unit,
                                ?canExecute: bool,
                                ?borderColor: Xamarin.Forms.Color,
                                ?borderWidth: double,
                                ?commandParameter: System.Object,
                                ?contentLayout: Xamarin.Forms.Button.ButtonContentLayout,
                                ?cornerRadius: int,
                                ?fontFamily: string,
                                ?fontAttributes: Xamarin.Forms.FontAttributes,
                                ?fontSize: obj,
                                ?image: string,
                                ?textColor: Xamarin.Forms.Color,
                                ?padding: Xamarin.Forms.Thickness,
                                ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                ?margin: obj,
                                ?gestureRecognizers: ViewElement list,
                                ?anchorX: double,
                                ?anchorY: double,
                                ?backgroundColor: Xamarin.Forms.Color,
                                ?heightRequest: double,
                                ?inputTransparent: bool,
                                ?isEnabled: bool,
                                ?isVisible: bool,
                                ?minimumHeightRequest: double,
                                ?minimumWidthRequest: double,
                                ?opacity: double,
                                ?rotation: double,
                                ?rotationX: double,
                                ?rotationY: double,
                                ?scale: double,
                                ?style: Xamarin.Forms.Style,
                                ?styleClass: obj,
                                ?translationX: double,
                                ?translationY: double,
                                ?widthRequest: double,
                                ?resources: (string * obj) list,
                                ?styles: Xamarin.Forms.Style list,
                                ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                ?isTabStop: bool,
                                ?scaleX: double,
                                ?scaleY: double,
                                ?tabIndex: int,
                                ?childrenReordered: System.EventArgs -> unit,
                                ?measureInvalidated: System.EventArgs -> unit,
                                ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                ?sizeChanged: System.EventArgs -> unit,
                                ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                ?classId: string,
                                ?styleId: string,
                                ?automationId: string,
                                ?created: (Xamarin.Forms.Button -> unit),
                                ?ref: ViewRef<Xamarin.Forms.Button>) =

        ViewBuilders.ConstructButton(?text=text,
                               ?command=command,
                               ?canExecute=canExecute,
                               ?borderColor=borderColor,
                               ?borderWidth=borderWidth,
                               ?commandParameter=commandParameter,
                               ?contentLayout=contentLayout,
                               ?cornerRadius=cornerRadius,
                               ?fontFamily=fontFamily,
                               ?fontAttributes=fontAttributes,
                               ?fontSize=fontSize,
                               ?image=image,
                               ?textColor=textColor,
                               ?padding=padding,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a Slider in the view
    static member inline Slider(?minimumMaximum: float * float,
                                ?value: double,
                                ?valueChanged: Xamarin.Forms.ValueChangedEventArgs -> unit,
                                ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                ?margin: obj,
                                ?gestureRecognizers: ViewElement list,
                                ?anchorX: double,
                                ?anchorY: double,
                                ?backgroundColor: Xamarin.Forms.Color,
                                ?heightRequest: double,
                                ?inputTransparent: bool,
                                ?isEnabled: bool,
                                ?isVisible: bool,
                                ?minimumHeightRequest: double,
                                ?minimumWidthRequest: double,
                                ?opacity: double,
                                ?rotation: double,
                                ?rotationX: double,
                                ?rotationY: double,
                                ?scale: double,
                                ?style: Xamarin.Forms.Style,
                                ?styleClass: obj,
                                ?translationX: double,
                                ?translationY: double,
                                ?widthRequest: double,
                                ?resources: (string * obj) list,
                                ?styles: Xamarin.Forms.Style list,
                                ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                ?isTabStop: bool,
                                ?scaleX: double,
                                ?scaleY: double,
                                ?tabIndex: int,
                                ?childrenReordered: System.EventArgs -> unit,
                                ?measureInvalidated: System.EventArgs -> unit,
                                ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                ?sizeChanged: System.EventArgs -> unit,
                                ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                ?classId: string,
                                ?styleId: string,
                                ?automationId: string,
                                ?created: (Xamarin.Forms.Slider -> unit),
                                ?ref: ViewRef<Xamarin.Forms.Slider>) =

        ViewBuilders.ConstructSlider(?minimumMaximum=minimumMaximum,
                               ?value=value,
                               ?valueChanged=valueChanged,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a Stepper in the view
    static member inline Stepper(?minimumMaximum: float * float,
                                 ?value: double,
                                 ?increment: double,
                                 ?valueChanged: Xamarin.Forms.ValueChangedEventArgs -> unit,
                                 ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                 ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                 ?margin: obj,
                                 ?gestureRecognizers: ViewElement list,
                                 ?anchorX: double,
                                 ?anchorY: double,
                                 ?backgroundColor: Xamarin.Forms.Color,
                                 ?heightRequest: double,
                                 ?inputTransparent: bool,
                                 ?isEnabled: bool,
                                 ?isVisible: bool,
                                 ?minimumHeightRequest: double,
                                 ?minimumWidthRequest: double,
                                 ?opacity: double,
                                 ?rotation: double,
                                 ?rotationX: double,
                                 ?rotationY: double,
                                 ?scale: double,
                                 ?style: Xamarin.Forms.Style,
                                 ?styleClass: obj,
                                 ?translationX: double,
                                 ?translationY: double,
                                 ?widthRequest: double,
                                 ?resources: (string * obj) list,
                                 ?styles: Xamarin.Forms.Style list,
                                 ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                 ?isTabStop: bool,
                                 ?scaleX: double,
                                 ?scaleY: double,
                                 ?tabIndex: int,
                                 ?childrenReordered: System.EventArgs -> unit,
                                 ?measureInvalidated: System.EventArgs -> unit,
                                 ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                 ?sizeChanged: System.EventArgs -> unit,
                                 ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                 ?classId: string,
                                 ?styleId: string,
                                 ?automationId: string,
                                 ?created: (Xamarin.Forms.Stepper -> unit),
                                 ?ref: ViewRef<Xamarin.Forms.Stepper>) =

        ViewBuilders.ConstructStepper(?minimumMaximum=minimumMaximum,
                               ?value=value,
                               ?increment=increment,
                               ?valueChanged=valueChanged,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a Switch in the view
    static member inline Switch(?isToggled: bool,
                                ?toggled: Xamarin.Forms.ToggledEventArgs -> unit,
                                ?onColor: Xamarin.Forms.Color,
                                ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                ?margin: obj,
                                ?gestureRecognizers: ViewElement list,
                                ?anchorX: double,
                                ?anchorY: double,
                                ?backgroundColor: Xamarin.Forms.Color,
                                ?heightRequest: double,
                                ?inputTransparent: bool,
                                ?isEnabled: bool,
                                ?isVisible: bool,
                                ?minimumHeightRequest: double,
                                ?minimumWidthRequest: double,
                                ?opacity: double,
                                ?rotation: double,
                                ?rotationX: double,
                                ?rotationY: double,
                                ?scale: double,
                                ?style: Xamarin.Forms.Style,
                                ?styleClass: obj,
                                ?translationX: double,
                                ?translationY: double,
                                ?widthRequest: double,
                                ?resources: (string * obj) list,
                                ?styles: Xamarin.Forms.Style list,
                                ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                ?isTabStop: bool,
                                ?scaleX: double,
                                ?scaleY: double,
                                ?tabIndex: int,
                                ?childrenReordered: System.EventArgs -> unit,
                                ?measureInvalidated: System.EventArgs -> unit,
                                ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                ?sizeChanged: System.EventArgs -> unit,
                                ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                ?classId: string,
                                ?styleId: string,
                                ?automationId: string,
                                ?created: (Xamarin.Forms.Switch -> unit),
                                ?ref: ViewRef<Xamarin.Forms.Switch>) =

        ViewBuilders.ConstructSwitch(?isToggled=isToggled,
                               ?toggled=toggled,
                               ?onColor=onColor,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a Cell in the view
    static member inline Cell(?height: double,
                              ?isEnabled: bool,
                              ?classId: string,
                              ?styleId: string,
                              ?automationId: string,
                              ?created: (Xamarin.Forms.Cell -> unit),
                              ?ref: ViewRef<Xamarin.Forms.Cell>) =

        ViewBuilders.ConstructCell(?height=height,
                               ?isEnabled=isEnabled,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a SwitchCell in the view
    static member inline SwitchCell(?on: bool,
                                    ?text: string,
                                    ?onChanged: Xamarin.Forms.ToggledEventArgs -> unit,
                                    ?height: double,
                                    ?isEnabled: bool,
                                    ?classId: string,
                                    ?styleId: string,
                                    ?automationId: string,
                                    ?created: (Xamarin.Forms.SwitchCell -> unit),
                                    ?ref: ViewRef<Xamarin.Forms.SwitchCell>) =

        ViewBuilders.ConstructSwitchCell(?on=on,
                               ?text=text,
                               ?onChanged=onChanged,
                               ?height=height,
                               ?isEnabled=isEnabled,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a TableView in the view
    static member inline TableView(?intent: Xamarin.Forms.TableIntent,
                                   ?hasUnevenRows: bool,
                                   ?rowHeight: int,
                                   ?items: (string * ViewElement list) list,
                                   ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                   ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                   ?margin: obj,
                                   ?gestureRecognizers: ViewElement list,
                                   ?anchorX: double,
                                   ?anchorY: double,
                                   ?backgroundColor: Xamarin.Forms.Color,
                                   ?heightRequest: double,
                                   ?inputTransparent: bool,
                                   ?isEnabled: bool,
                                   ?isVisible: bool,
                                   ?minimumHeightRequest: double,
                                   ?minimumWidthRequest: double,
                                   ?opacity: double,
                                   ?rotation: double,
                                   ?rotationX: double,
                                   ?rotationY: double,
                                   ?scale: double,
                                   ?style: Xamarin.Forms.Style,
                                   ?styleClass: obj,
                                   ?translationX: double,
                                   ?translationY: double,
                                   ?widthRequest: double,
                                   ?resources: (string * obj) list,
                                   ?styles: Xamarin.Forms.Style list,
                                   ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                   ?isTabStop: bool,
                                   ?scaleX: double,
                                   ?scaleY: double,
                                   ?tabIndex: int,
                                   ?childrenReordered: System.EventArgs -> unit,
                                   ?measureInvalidated: System.EventArgs -> unit,
                                   ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                   ?sizeChanged: System.EventArgs -> unit,
                                   ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                   ?classId: string,
                                   ?styleId: string,
                                   ?automationId: string,
                                   ?created: (Xamarin.Forms.TableView -> unit),
                                   ?ref: ViewRef<Xamarin.Forms.TableView>) =

        ViewBuilders.ConstructTableView(?intent=intent,
                               ?hasUnevenRows=hasUnevenRows,
                               ?rowHeight=rowHeight,
                               ?items=items,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a RowDefinition in the view
    static member inline RowDefinition(?height: obj) =

        ViewBuilders.ConstructRowDefinition(?height=height)

    /// Describes a ColumnDefinition in the view
    static member inline ColumnDefinition(?width: obj) =

        ViewBuilders.ConstructColumnDefinition(?width=width)

    /// Describes a Grid in the view
    static member inline Grid(?rowdefs: obj list,
                              ?coldefs: obj list,
                              ?rowSpacing: double,
                              ?columnSpacing: double,
                              ?children: ViewElement list,
                              ?isClippedToBounds: bool,
                              ?padding: obj,
                              ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                              ?verticalOptions: Xamarin.Forms.LayoutOptions,
                              ?margin: obj,
                              ?gestureRecognizers: ViewElement list,
                              ?anchorX: double,
                              ?anchorY: double,
                              ?backgroundColor: Xamarin.Forms.Color,
                              ?heightRequest: double,
                              ?inputTransparent: bool,
                              ?isEnabled: bool,
                              ?isVisible: bool,
                              ?minimumHeightRequest: double,
                              ?minimumWidthRequest: double,
                              ?opacity: double,
                              ?rotation: double,
                              ?rotationX: double,
                              ?rotationY: double,
                              ?scale: double,
                              ?style: Xamarin.Forms.Style,
                              ?styleClass: obj,
                              ?translationX: double,
                              ?translationY: double,
                              ?widthRequest: double,
                              ?resources: (string * obj) list,
                              ?styles: Xamarin.Forms.Style list,
                              ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                              ?isTabStop: bool,
                              ?scaleX: double,
                              ?scaleY: double,
                              ?tabIndex: int,
                              ?childrenReordered: System.EventArgs -> unit,
                              ?measureInvalidated: System.EventArgs -> unit,
                              ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                              ?sizeChanged: System.EventArgs -> unit,
                              ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                              ?classId: string,
                              ?styleId: string,
                              ?automationId: string,
                              ?created: (Xamarin.Forms.Grid -> unit),
                              ?ref: ViewRef<Xamarin.Forms.Grid>) =

        ViewBuilders.ConstructGrid(?rowdefs=rowdefs,
                               ?coldefs=coldefs,
                               ?rowSpacing=rowSpacing,
                               ?columnSpacing=columnSpacing,
                               ?children=children,
                               ?isClippedToBounds=isClippedToBounds,
                               ?padding=padding,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a AbsoluteLayout in the view
    static member inline AbsoluteLayout(?children: ViewElement list,
                                        ?isClippedToBounds: bool,
                                        ?padding: obj,
                                        ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                        ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                        ?margin: obj,
                                        ?gestureRecognizers: ViewElement list,
                                        ?anchorX: double,
                                        ?anchorY: double,
                                        ?backgroundColor: Xamarin.Forms.Color,
                                        ?heightRequest: double,
                                        ?inputTransparent: bool,
                                        ?isEnabled: bool,
                                        ?isVisible: bool,
                                        ?minimumHeightRequest: double,
                                        ?minimumWidthRequest: double,
                                        ?opacity: double,
                                        ?rotation: double,
                                        ?rotationX: double,
                                        ?rotationY: double,
                                        ?scale: double,
                                        ?style: Xamarin.Forms.Style,
                                        ?styleClass: obj,
                                        ?translationX: double,
                                        ?translationY: double,
                                        ?widthRequest: double,
                                        ?resources: (string * obj) list,
                                        ?styles: Xamarin.Forms.Style list,
                                        ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                        ?isTabStop: bool,
                                        ?scaleX: double,
                                        ?scaleY: double,
                                        ?tabIndex: int,
                                        ?childrenReordered: System.EventArgs -> unit,
                                        ?measureInvalidated: System.EventArgs -> unit,
                                        ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                        ?sizeChanged: System.EventArgs -> unit,
                                        ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                        ?classId: string,
                                        ?styleId: string,
                                        ?automationId: string,
                                        ?created: (Xamarin.Forms.AbsoluteLayout -> unit),
                                        ?ref: ViewRef<Xamarin.Forms.AbsoluteLayout>) =

        ViewBuilders.ConstructAbsoluteLayout(?children=children,
                               ?isClippedToBounds=isClippedToBounds,
                               ?padding=padding,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a RelativeLayout in the view
    static member inline RelativeLayout(?children: ViewElement list,
                                        ?isClippedToBounds: bool,
                                        ?padding: obj,
                                        ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                        ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                        ?margin: obj,
                                        ?gestureRecognizers: ViewElement list,
                                        ?anchorX: double,
                                        ?anchorY: double,
                                        ?backgroundColor: Xamarin.Forms.Color,
                                        ?heightRequest: double,
                                        ?inputTransparent: bool,
                                        ?isEnabled: bool,
                                        ?isVisible: bool,
                                        ?minimumHeightRequest: double,
                                        ?minimumWidthRequest: double,
                                        ?opacity: double,
                                        ?rotation: double,
                                        ?rotationX: double,
                                        ?rotationY: double,
                                        ?scale: double,
                                        ?style: Xamarin.Forms.Style,
                                        ?styleClass: obj,
                                        ?translationX: double,
                                        ?translationY: double,
                                        ?widthRequest: double,
                                        ?resources: (string * obj) list,
                                        ?styles: Xamarin.Forms.Style list,
                                        ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                        ?isTabStop: bool,
                                        ?scaleX: double,
                                        ?scaleY: double,
                                        ?tabIndex: int,
                                        ?childrenReordered: System.EventArgs -> unit,
                                        ?measureInvalidated: System.EventArgs -> unit,
                                        ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                        ?sizeChanged: System.EventArgs -> unit,
                                        ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                        ?classId: string,
                                        ?styleId: string,
                                        ?automationId: string,
                                        ?created: (Xamarin.Forms.RelativeLayout -> unit),
                                        ?ref: ViewRef<Xamarin.Forms.RelativeLayout>) =

        ViewBuilders.ConstructRelativeLayout(?children=children,
                               ?isClippedToBounds=isClippedToBounds,
                               ?padding=padding,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a FlexLayout in the view
    static member inline FlexLayout(?alignContent: Xamarin.Forms.FlexAlignContent,
                                    ?alignItems: Xamarin.Forms.FlexAlignItems,
                                    ?direction: Xamarin.Forms.FlexDirection,
                                    ?position: Xamarin.Forms.FlexPosition,
                                    ?wrap: Xamarin.Forms.FlexWrap,
                                    ?justifyContent: Xamarin.Forms.FlexJustify,
                                    ?children: ViewElement list,
                                    ?isClippedToBounds: bool,
                                    ?padding: obj,
                                    ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                    ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                    ?margin: obj,
                                    ?gestureRecognizers: ViewElement list,
                                    ?anchorX: double,
                                    ?anchorY: double,
                                    ?backgroundColor: Xamarin.Forms.Color,
                                    ?heightRequest: double,
                                    ?inputTransparent: bool,
                                    ?isEnabled: bool,
                                    ?isVisible: bool,
                                    ?minimumHeightRequest: double,
                                    ?minimumWidthRequest: double,
                                    ?opacity: double,
                                    ?rotation: double,
                                    ?rotationX: double,
                                    ?rotationY: double,
                                    ?scale: double,
                                    ?style: Xamarin.Forms.Style,
                                    ?styleClass: obj,
                                    ?translationX: double,
                                    ?translationY: double,
                                    ?widthRequest: double,
                                    ?resources: (string * obj) list,
                                    ?styles: Xamarin.Forms.Style list,
                                    ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                    ?isTabStop: bool,
                                    ?scaleX: double,
                                    ?scaleY: double,
                                    ?tabIndex: int,
                                    ?childrenReordered: System.EventArgs -> unit,
                                    ?measureInvalidated: System.EventArgs -> unit,
                                    ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                    ?sizeChanged: System.EventArgs -> unit,
                                    ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                    ?classId: string,
                                    ?styleId: string,
                                    ?automationId: string,
                                    ?created: (Xamarin.Forms.FlexLayout -> unit),
                                    ?ref: ViewRef<Xamarin.Forms.FlexLayout>) =

        ViewBuilders.ConstructFlexLayout(?alignContent=alignContent,
                               ?alignItems=alignItems,
                               ?direction=direction,
                               ?position=position,
                               ?wrap=wrap,
                               ?justifyContent=justifyContent,
                               ?children=children,
                               ?isClippedToBounds=isClippedToBounds,
                               ?padding=padding,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a TemplatedView in the view
    static member inline TemplatedView(?isClippedToBounds: bool,
                                       ?padding: obj,
                                       ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                       ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                       ?margin: obj,
                                       ?gestureRecognizers: ViewElement list,
                                       ?anchorX: double,
                                       ?anchorY: double,
                                       ?backgroundColor: Xamarin.Forms.Color,
                                       ?heightRequest: double,
                                       ?inputTransparent: bool,
                                       ?isEnabled: bool,
                                       ?isVisible: bool,
                                       ?minimumHeightRequest: double,
                                       ?minimumWidthRequest: double,
                                       ?opacity: double,
                                       ?rotation: double,
                                       ?rotationX: double,
                                       ?rotationY: double,
                                       ?scale: double,
                                       ?style: Xamarin.Forms.Style,
                                       ?styleClass: obj,
                                       ?translationX: double,
                                       ?translationY: double,
                                       ?widthRequest: double,
                                       ?resources: (string * obj) list,
                                       ?styles: Xamarin.Forms.Style list,
                                       ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                       ?isTabStop: bool,
                                       ?scaleX: double,
                                       ?scaleY: double,
                                       ?tabIndex: int,
                                       ?childrenReordered: System.EventArgs -> unit,
                                       ?measureInvalidated: System.EventArgs -> unit,
                                       ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                       ?sizeChanged: System.EventArgs -> unit,
                                       ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                       ?classId: string,
                                       ?styleId: string,
                                       ?automationId: string,
                                       ?created: (Xamarin.Forms.TemplatedView -> unit),
                                       ?ref: ViewRef<Xamarin.Forms.TemplatedView>) =

        ViewBuilders.ConstructTemplatedView(?isClippedToBounds=isClippedToBounds,
                               ?padding=padding,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a ContentView in the view
    static member inline ContentView(?content: ViewElement,
                                     ?isClippedToBounds: bool,
                                     ?padding: obj,
                                     ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                     ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                     ?margin: obj,
                                     ?gestureRecognizers: ViewElement list,
                                     ?anchorX: double,
                                     ?anchorY: double,
                                     ?backgroundColor: Xamarin.Forms.Color,
                                     ?heightRequest: double,
                                     ?inputTransparent: bool,
                                     ?isEnabled: bool,
                                     ?isVisible: bool,
                                     ?minimumHeightRequest: double,
                                     ?minimumWidthRequest: double,
                                     ?opacity: double,
                                     ?rotation: double,
                                     ?rotationX: double,
                                     ?rotationY: double,
                                     ?scale: double,
                                     ?style: Xamarin.Forms.Style,
                                     ?styleClass: obj,
                                     ?translationX: double,
                                     ?translationY: double,
                                     ?widthRequest: double,
                                     ?resources: (string * obj) list,
                                     ?styles: Xamarin.Forms.Style list,
                                     ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                     ?isTabStop: bool,
                                     ?scaleX: double,
                                     ?scaleY: double,
                                     ?tabIndex: int,
                                     ?childrenReordered: System.EventArgs -> unit,
                                     ?measureInvalidated: System.EventArgs -> unit,
                                     ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                     ?sizeChanged: System.EventArgs -> unit,
                                     ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                     ?classId: string,
                                     ?styleId: string,
                                     ?automationId: string,
                                     ?created: (Xamarin.Forms.ContentView -> unit),
                                     ?ref: ViewRef<Xamarin.Forms.ContentView>) =

        ViewBuilders.ConstructContentView(?content=content,
                               ?isClippedToBounds=isClippedToBounds,
                               ?padding=padding,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a DatePicker in the view
    static member inline DatePicker(?date: System.DateTime,
                                    ?format: string,
                                    ?minimumDate: System.DateTime,
                                    ?maximumDate: System.DateTime,
                                    ?dateSelected: Xamarin.Forms.DateChangedEventArgs -> unit,
                                    ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                    ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                    ?margin: obj,
                                    ?gestureRecognizers: ViewElement list,
                                    ?anchorX: double,
                                    ?anchorY: double,
                                    ?backgroundColor: Xamarin.Forms.Color,
                                    ?heightRequest: double,
                                    ?inputTransparent: bool,
                                    ?isEnabled: bool,
                                    ?isVisible: bool,
                                    ?minimumHeightRequest: double,
                                    ?minimumWidthRequest: double,
                                    ?opacity: double,
                                    ?rotation: double,
                                    ?rotationX: double,
                                    ?rotationY: double,
                                    ?scale: double,
                                    ?style: Xamarin.Forms.Style,
                                    ?styleClass: obj,
                                    ?translationX: double,
                                    ?translationY: double,
                                    ?widthRequest: double,
                                    ?resources: (string * obj) list,
                                    ?styles: Xamarin.Forms.Style list,
                                    ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                    ?isTabStop: bool,
                                    ?scaleX: double,
                                    ?scaleY: double,
                                    ?tabIndex: int,
                                    ?childrenReordered: System.EventArgs -> unit,
                                    ?measureInvalidated: System.EventArgs -> unit,
                                    ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                    ?sizeChanged: System.EventArgs -> unit,
                                    ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                    ?classId: string,
                                    ?styleId: string,
                                    ?automationId: string,
                                    ?created: (Xamarin.Forms.DatePicker -> unit),
                                    ?ref: ViewRef<Xamarin.Forms.DatePicker>) =

        ViewBuilders.ConstructDatePicker(?date=date,
                               ?format=format,
                               ?minimumDate=minimumDate,
                               ?maximumDate=maximumDate,
                               ?dateSelected=dateSelected,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a Picker in the view
    static member inline Picker(?itemsSource: seq<'T>,
                                ?selectedIndex: int,
                                ?title: string,
                                ?textColor: Xamarin.Forms.Color,
                                ?selectedIndexChanged: (int * 'T option) -> unit,
                                ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                ?margin: obj,
                                ?gestureRecognizers: ViewElement list,
                                ?anchorX: double,
                                ?anchorY: double,
                                ?backgroundColor: Xamarin.Forms.Color,
                                ?heightRequest: double,
                                ?inputTransparent: bool,
                                ?isEnabled: bool,
                                ?isVisible: bool,
                                ?minimumHeightRequest: double,
                                ?minimumWidthRequest: double,
                                ?opacity: double,
                                ?rotation: double,
                                ?rotationX: double,
                                ?rotationY: double,
                                ?scale: double,
                                ?style: Xamarin.Forms.Style,
                                ?styleClass: obj,
                                ?translationX: double,
                                ?translationY: double,
                                ?widthRequest: double,
                                ?resources: (string * obj) list,
                                ?styles: Xamarin.Forms.Style list,
                                ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                ?isTabStop: bool,
                                ?scaleX: double,
                                ?scaleY: double,
                                ?tabIndex: int,
                                ?childrenReordered: System.EventArgs -> unit,
                                ?measureInvalidated: System.EventArgs -> unit,
                                ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                ?sizeChanged: System.EventArgs -> unit,
                                ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                ?classId: string,
                                ?styleId: string,
                                ?automationId: string,
                                ?created: (Xamarin.Forms.Picker -> unit),
                                ?ref: ViewRef<Xamarin.Forms.Picker>) =

        ViewBuilders.ConstructPicker(?itemsSource=itemsSource,
                               ?selectedIndex=selectedIndex,
                               ?title=title,
                               ?textColor=textColor,
                               ?selectedIndexChanged=selectedIndexChanged,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a Frame in the view
    static member inline Frame(?borderColor: Xamarin.Forms.Color,
                               ?cornerRadius: double,
                               ?hasShadow: bool,
                               ?content: ViewElement,
                               ?isClippedToBounds: bool,
                               ?padding: obj,
                               ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                               ?verticalOptions: Xamarin.Forms.LayoutOptions,
                               ?margin: obj,
                               ?gestureRecognizers: ViewElement list,
                               ?anchorX: double,
                               ?anchorY: double,
                               ?backgroundColor: Xamarin.Forms.Color,
                               ?heightRequest: double,
                               ?inputTransparent: bool,
                               ?isEnabled: bool,
                               ?isVisible: bool,
                               ?minimumHeightRequest: double,
                               ?minimumWidthRequest: double,
                               ?opacity: double,
                               ?rotation: double,
                               ?rotationX: double,
                               ?rotationY: double,
                               ?scale: double,
                               ?style: Xamarin.Forms.Style,
                               ?styleClass: obj,
                               ?translationX: double,
                               ?translationY: double,
                               ?widthRequest: double,
                               ?resources: (string * obj) list,
                               ?styles: Xamarin.Forms.Style list,
                               ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                               ?isTabStop: bool,
                               ?scaleX: double,
                               ?scaleY: double,
                               ?tabIndex: int,
                               ?childrenReordered: System.EventArgs -> unit,
                               ?measureInvalidated: System.EventArgs -> unit,
                               ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                               ?sizeChanged: System.EventArgs -> unit,
                               ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                               ?classId: string,
                               ?styleId: string,
                               ?automationId: string,
                               ?created: (Xamarin.Forms.Frame -> unit),
                               ?ref: ViewRef<Xamarin.Forms.Frame>) =

        ViewBuilders.ConstructFrame(?borderColor=borderColor,
                               ?cornerRadius=cornerRadius,
                               ?hasShadow=hasShadow,
                               ?content=content,
                               ?isClippedToBounds=isClippedToBounds,
                               ?padding=padding,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a Image in the view
    static member inline Image(?source: obj,
                               ?aspect: Xamarin.Forms.Aspect,
                               ?isOpaque: bool,
                               ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                               ?verticalOptions: Xamarin.Forms.LayoutOptions,
                               ?margin: obj,
                               ?gestureRecognizers: ViewElement list,
                               ?anchorX: double,
                               ?anchorY: double,
                               ?backgroundColor: Xamarin.Forms.Color,
                               ?heightRequest: double,
                               ?inputTransparent: bool,
                               ?isEnabled: bool,
                               ?isVisible: bool,
                               ?minimumHeightRequest: double,
                               ?minimumWidthRequest: double,
                               ?opacity: double,
                               ?rotation: double,
                               ?rotationX: double,
                               ?rotationY: double,
                               ?scale: double,
                               ?style: Xamarin.Forms.Style,
                               ?styleClass: obj,
                               ?translationX: double,
                               ?translationY: double,
                               ?widthRequest: double,
                               ?resources: (string * obj) list,
                               ?styles: Xamarin.Forms.Style list,
                               ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                               ?isTabStop: bool,
                               ?scaleX: double,
                               ?scaleY: double,
                               ?tabIndex: int,
                               ?childrenReordered: System.EventArgs -> unit,
                               ?measureInvalidated: System.EventArgs -> unit,
                               ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                               ?sizeChanged: System.EventArgs -> unit,
                               ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                               ?classId: string,
                               ?styleId: string,
                               ?automationId: string,
                               ?created: (Xamarin.Forms.Image -> unit),
                               ?ref: ViewRef<Xamarin.Forms.Image>) =

        ViewBuilders.ConstructImage(?source=source,
                               ?aspect=aspect,
                               ?isOpaque=isOpaque,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a ImageButton in the view
    static member inline ImageButton(?command: unit -> unit,
                                     ?source: obj,
                                     ?aspect: Xamarin.Forms.Aspect,
                                     ?borderColor: Xamarin.Forms.Color,
                                     ?borderWidth: double,
                                     ?cornerRadius: int,
                                     ?isOpaque: bool,
                                     ?padding: Xamarin.Forms.Thickness,
                                     ?clicked: System.EventArgs -> unit,
                                     ?pressed: System.EventArgs -> unit,
                                     ?released: System.EventArgs -> unit,
                                     ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                     ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                     ?margin: obj,
                                     ?gestureRecognizers: ViewElement list,
                                     ?anchorX: double,
                                     ?anchorY: double,
                                     ?backgroundColor: Xamarin.Forms.Color,
                                     ?heightRequest: double,
                                     ?inputTransparent: bool,
                                     ?isEnabled: bool,
                                     ?isVisible: bool,
                                     ?minimumHeightRequest: double,
                                     ?minimumWidthRequest: double,
                                     ?opacity: double,
                                     ?rotation: double,
                                     ?rotationX: double,
                                     ?rotationY: double,
                                     ?scale: double,
                                     ?style: Xamarin.Forms.Style,
                                     ?styleClass: obj,
                                     ?translationX: double,
                                     ?translationY: double,
                                     ?widthRequest: double,
                                     ?resources: (string * obj) list,
                                     ?styles: Xamarin.Forms.Style list,
                                     ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                     ?isTabStop: bool,
                                     ?scaleX: double,
                                     ?scaleY: double,
                                     ?tabIndex: int,
                                     ?childrenReordered: System.EventArgs -> unit,
                                     ?measureInvalidated: System.EventArgs -> unit,
                                     ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                     ?sizeChanged: System.EventArgs -> unit,
                                     ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                     ?classId: string,
                                     ?styleId: string,
                                     ?automationId: string,
                                     ?created: (Xamarin.Forms.ImageButton -> unit),
                                     ?ref: ViewRef<Xamarin.Forms.ImageButton>) =

        ViewBuilders.ConstructImageButton(?command=command,
                               ?source=source,
                               ?aspect=aspect,
                               ?borderColor=borderColor,
                               ?borderWidth=borderWidth,
                               ?cornerRadius=cornerRadius,
                               ?isOpaque=isOpaque,
                               ?padding=padding,
                               ?clicked=clicked,
                               ?pressed=pressed,
                               ?released=released,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a InputView in the view
    static member inline InputView(?keyboard: Xamarin.Forms.Keyboard,
                                   ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                   ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                   ?margin: obj,
                                   ?gestureRecognizers: ViewElement list,
                                   ?anchorX: double,
                                   ?anchorY: double,
                                   ?backgroundColor: Xamarin.Forms.Color,
                                   ?heightRequest: double,
                                   ?inputTransparent: bool,
                                   ?isEnabled: bool,
                                   ?isVisible: bool,
                                   ?minimumHeightRequest: double,
                                   ?minimumWidthRequest: double,
                                   ?opacity: double,
                                   ?rotation: double,
                                   ?rotationX: double,
                                   ?rotationY: double,
                                   ?scale: double,
                                   ?style: Xamarin.Forms.Style,
                                   ?styleClass: obj,
                                   ?translationX: double,
                                   ?translationY: double,
                                   ?widthRequest: double,
                                   ?resources: (string * obj) list,
                                   ?styles: Xamarin.Forms.Style list,
                                   ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                   ?isTabStop: bool,
                                   ?scaleX: double,
                                   ?scaleY: double,
                                   ?tabIndex: int,
                                   ?childrenReordered: System.EventArgs -> unit,
                                   ?measureInvalidated: System.EventArgs -> unit,
                                   ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                   ?sizeChanged: System.EventArgs -> unit,
                                   ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                   ?classId: string,
                                   ?styleId: string,
                                   ?automationId: string,
                                   ?created: (Xamarin.Forms.InputView -> unit),
                                   ?ref: ViewRef<Xamarin.Forms.InputView>) =

        ViewBuilders.ConstructInputView(?keyboard=keyboard,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a Editor in the view
    static member inline Editor(?text: string,
                                ?fontSize: obj,
                                ?fontFamily: string,
                                ?fontAttributes: Xamarin.Forms.FontAttributes,
                                ?textColor: Xamarin.Forms.Color,
                                ?completed: string -> unit,
                                ?textChanged: Xamarin.Forms.TextChangedEventArgs -> unit,
                                ?autoSize: Xamarin.Forms.EditorAutoSizeOption,
                                ?placeholder: string,
                                ?placeholderColor: Xamarin.Forms.Color,
                                ?keyboard: Xamarin.Forms.Keyboard,
                                ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                ?margin: obj,
                                ?gestureRecognizers: ViewElement list,
                                ?anchorX: double,
                                ?anchorY: double,
                                ?backgroundColor: Xamarin.Forms.Color,
                                ?heightRequest: double,
                                ?inputTransparent: bool,
                                ?isEnabled: bool,
                                ?isVisible: bool,
                                ?minimumHeightRequest: double,
                                ?minimumWidthRequest: double,
                                ?opacity: double,
                                ?rotation: double,
                                ?rotationX: double,
                                ?rotationY: double,
                                ?scale: double,
                                ?style: Xamarin.Forms.Style,
                                ?styleClass: obj,
                                ?translationX: double,
                                ?translationY: double,
                                ?widthRequest: double,
                                ?resources: (string * obj) list,
                                ?styles: Xamarin.Forms.Style list,
                                ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                ?isTabStop: bool,
                                ?scaleX: double,
                                ?scaleY: double,
                                ?tabIndex: int,
                                ?childrenReordered: System.EventArgs -> unit,
                                ?measureInvalidated: System.EventArgs -> unit,
                                ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                ?sizeChanged: System.EventArgs -> unit,
                                ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                ?classId: string,
                                ?styleId: string,
                                ?automationId: string,
                                ?created: (Xamarin.Forms.Editor -> unit),
                                ?ref: ViewRef<Xamarin.Forms.Editor>) =

        ViewBuilders.ConstructEditor(?text=text,
                               ?fontSize=fontSize,
                               ?fontFamily=fontFamily,
                               ?fontAttributes=fontAttributes,
                               ?textColor=textColor,
                               ?completed=completed,
                               ?textChanged=textChanged,
                               ?autoSize=autoSize,
                               ?placeholder=placeholder,
                               ?placeholderColor=placeholderColor,
                               ?keyboard=keyboard,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a Entry in the view
    static member inline Entry(?text: string,
                               ?placeholder: string,
                               ?horizontalTextAlignment: Xamarin.Forms.TextAlignment,
                               ?fontSize: obj,
                               ?fontFamily: string,
                               ?fontAttributes: Xamarin.Forms.FontAttributes,
                               ?textColor: Xamarin.Forms.Color,
                               ?placeholderColor: Xamarin.Forms.Color,
                               ?isPassword: bool,
                               ?completed: string -> unit,
                               ?textChanged: Xamarin.Forms.TextChangedEventArgs -> unit,
                               ?isTextPredictionEnabled: bool,
                               ?returnType: Xamarin.Forms.ReturnType,
                               ?returnCommand: unit -> unit,
                               ?cursorPosition: int,
                               ?selectionLength: int,
                               ?keyboard: Xamarin.Forms.Keyboard,
                               ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                               ?verticalOptions: Xamarin.Forms.LayoutOptions,
                               ?margin: obj,
                               ?gestureRecognizers: ViewElement list,
                               ?anchorX: double,
                               ?anchorY: double,
                               ?backgroundColor: Xamarin.Forms.Color,
                               ?heightRequest: double,
                               ?inputTransparent: bool,
                               ?isEnabled: bool,
                               ?isVisible: bool,
                               ?minimumHeightRequest: double,
                               ?minimumWidthRequest: double,
                               ?opacity: double,
                               ?rotation: double,
                               ?rotationX: double,
                               ?rotationY: double,
                               ?scale: double,
                               ?style: Xamarin.Forms.Style,
                               ?styleClass: obj,
                               ?translationX: double,
                               ?translationY: double,
                               ?widthRequest: double,
                               ?resources: (string * obj) list,
                               ?styles: Xamarin.Forms.Style list,
                               ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                               ?isTabStop: bool,
                               ?scaleX: double,
                               ?scaleY: double,
                               ?tabIndex: int,
                               ?childrenReordered: System.EventArgs -> unit,
                               ?measureInvalidated: System.EventArgs -> unit,
                               ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                               ?sizeChanged: System.EventArgs -> unit,
                               ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                               ?classId: string,
                               ?styleId: string,
                               ?automationId: string,
                               ?created: (Xamarin.Forms.Entry -> unit),
                               ?ref: ViewRef<Xamarin.Forms.Entry>) =

        ViewBuilders.ConstructEntry(?text=text,
                               ?placeholder=placeholder,
                               ?horizontalTextAlignment=horizontalTextAlignment,
                               ?fontSize=fontSize,
                               ?fontFamily=fontFamily,
                               ?fontAttributes=fontAttributes,
                               ?textColor=textColor,
                               ?placeholderColor=placeholderColor,
                               ?isPassword=isPassword,
                               ?completed=completed,
                               ?textChanged=textChanged,
                               ?isTextPredictionEnabled=isTextPredictionEnabled,
                               ?returnType=returnType,
                               ?returnCommand=returnCommand,
                               ?cursorPosition=cursorPosition,
                               ?selectionLength=selectionLength,
                               ?keyboard=keyboard,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a EntryCell in the view
    static member inline EntryCell(?label: string,
                                   ?text: string,
                                   ?keyboard: Xamarin.Forms.Keyboard,
                                   ?placeholder: string,
                                   ?horizontalTextAlignment: Xamarin.Forms.TextAlignment,
                                   ?completed: string -> unit,
                                   ?textChanged: Xamarin.Forms.TextChangedEventArgs -> unit,
                                   ?height: double,
                                   ?isEnabled: bool,
                                   ?classId: string,
                                   ?styleId: string,
                                   ?automationId: string,
                                   ?created: (Fabulous.CustomControls.CustomEntryCell -> unit),
                                   ?ref: ViewRef<Fabulous.CustomControls.CustomEntryCell>) =

        ViewBuilders.ConstructEntryCell(?label=label,
                               ?text=text,
                               ?keyboard=keyboard,
                               ?placeholder=placeholder,
                               ?horizontalTextAlignment=horizontalTextAlignment,
                               ?completed=completed,
                               ?textChanged=textChanged,
                               ?height=height,
                               ?isEnabled=isEnabled,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a Label in the view
    static member inline Label(?text: string,
                               ?horizontalTextAlignment: Xamarin.Forms.TextAlignment,
                               ?verticalTextAlignment: Xamarin.Forms.TextAlignment,
                               ?fontSize: obj,
                               ?fontFamily: string,
                               ?fontAttributes: Xamarin.Forms.FontAttributes,
                               ?textColor: Xamarin.Forms.Color,
                               ?formattedText: ViewElement,
                               ?lineBreakMode: Xamarin.Forms.LineBreakMode,
                               ?lineHeight: double,
                               ?maxLines: int,
                               ?textDecorations: Xamarin.Forms.TextDecorations,
                               ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                               ?verticalOptions: Xamarin.Forms.LayoutOptions,
                               ?margin: obj,
                               ?gestureRecognizers: ViewElement list,
                               ?anchorX: double,
                               ?anchorY: double,
                               ?backgroundColor: Xamarin.Forms.Color,
                               ?heightRequest: double,
                               ?inputTransparent: bool,
                               ?isEnabled: bool,
                               ?isVisible: bool,
                               ?minimumHeightRequest: double,
                               ?minimumWidthRequest: double,
                               ?opacity: double,
                               ?rotation: double,
                               ?rotationX: double,
                               ?rotationY: double,
                               ?scale: double,
                               ?style: Xamarin.Forms.Style,
                               ?styleClass: obj,
                               ?translationX: double,
                               ?translationY: double,
                               ?widthRequest: double,
                               ?resources: (string * obj) list,
                               ?styles: Xamarin.Forms.Style list,
                               ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                               ?isTabStop: bool,
                               ?scaleX: double,
                               ?scaleY: double,
                               ?tabIndex: int,
                               ?childrenReordered: System.EventArgs -> unit,
                               ?measureInvalidated: System.EventArgs -> unit,
                               ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                               ?sizeChanged: System.EventArgs -> unit,
                               ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                               ?classId: string,
                               ?styleId: string,
                               ?automationId: string,
                               ?created: (Xamarin.Forms.Label -> unit),
                               ?ref: ViewRef<Xamarin.Forms.Label>) =

        ViewBuilders.ConstructLabel(?text=text,
                               ?horizontalTextAlignment=horizontalTextAlignment,
                               ?verticalTextAlignment=verticalTextAlignment,
                               ?fontSize=fontSize,
                               ?fontFamily=fontFamily,
                               ?fontAttributes=fontAttributes,
                               ?textColor=textColor,
                               ?formattedText=formattedText,
                               ?lineBreakMode=lineBreakMode,
                               ?lineHeight=lineHeight,
                               ?maxLines=maxLines,
                               ?textDecorations=textDecorations,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a StackLayout in the view
    static member inline StackLayout(?children: ViewElement list,
                                     ?orientation: Xamarin.Forms.StackOrientation,
                                     ?spacing: double,
                                     ?isClippedToBounds: bool,
                                     ?padding: obj,
                                     ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                     ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                     ?margin: obj,
                                     ?gestureRecognizers: ViewElement list,
                                     ?anchorX: double,
                                     ?anchorY: double,
                                     ?backgroundColor: Xamarin.Forms.Color,
                                     ?heightRequest: double,
                                     ?inputTransparent: bool,
                                     ?isEnabled: bool,
                                     ?isVisible: bool,
                                     ?minimumHeightRequest: double,
                                     ?minimumWidthRequest: double,
                                     ?opacity: double,
                                     ?rotation: double,
                                     ?rotationX: double,
                                     ?rotationY: double,
                                     ?scale: double,
                                     ?style: Xamarin.Forms.Style,
                                     ?styleClass: obj,
                                     ?translationX: double,
                                     ?translationY: double,
                                     ?widthRequest: double,
                                     ?resources: (string * obj) list,
                                     ?styles: Xamarin.Forms.Style list,
                                     ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                     ?isTabStop: bool,
                                     ?scaleX: double,
                                     ?scaleY: double,
                                     ?tabIndex: int,
                                     ?childrenReordered: System.EventArgs -> unit,
                                     ?measureInvalidated: System.EventArgs -> unit,
                                     ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                     ?sizeChanged: System.EventArgs -> unit,
                                     ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                     ?classId: string,
                                     ?styleId: string,
                                     ?automationId: string,
                                     ?created: (Xamarin.Forms.StackLayout -> unit),
                                     ?ref: ViewRef<Xamarin.Forms.StackLayout>) =

        ViewBuilders.ConstructStackLayout(?children=children,
                               ?orientation=orientation,
                               ?spacing=spacing,
                               ?isClippedToBounds=isClippedToBounds,
                               ?padding=padding,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a Span in the view
    static member inline Span(?fontFamily: string,
                              ?fontAttributes: Xamarin.Forms.FontAttributes,
                              ?fontSize: obj,
                              ?backgroundColor: Xamarin.Forms.Color,
                              ?foregroundColor: Xamarin.Forms.Color,
                              ?text: string,
                              ?propertyChanged: System.ComponentModel.PropertyChangedEventArgs -> unit,
                              ?lineHeight: double,
                              ?textDecorations: Xamarin.Forms.TextDecorations,
                              ?classId: string,
                              ?styleId: string,
                              ?automationId: string,
                              ?created: (Xamarin.Forms.Span -> unit),
                              ?ref: ViewRef<Xamarin.Forms.Span>) =

        ViewBuilders.ConstructSpan(?fontFamily=fontFamily,
                               ?fontAttributes=fontAttributes,
                               ?fontSize=fontSize,
                               ?backgroundColor=backgroundColor,
                               ?foregroundColor=foregroundColor,
                               ?text=text,
                               ?propertyChanged=propertyChanged,
                               ?lineHeight=lineHeight,
                               ?textDecorations=textDecorations,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a FormattedString in the view
    static member inline FormattedString(?spans: ViewElement[],
                                         ?classId: string,
                                         ?styleId: string,
                                         ?automationId: string,
                                         ?created: (Xamarin.Forms.FormattedString -> unit),
                                         ?ref: ViewRef<Xamarin.Forms.FormattedString>) =

        ViewBuilders.ConstructFormattedString(?spans=spans,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a TimePicker in the view
    static member inline TimePicker(?time: System.TimeSpan,
                                    ?format: string,
                                    ?textColor: Xamarin.Forms.Color,
                                    ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                    ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                    ?margin: obj,
                                    ?gestureRecognizers: ViewElement list,
                                    ?anchorX: double,
                                    ?anchorY: double,
                                    ?backgroundColor: Xamarin.Forms.Color,
                                    ?heightRequest: double,
                                    ?inputTransparent: bool,
                                    ?isEnabled: bool,
                                    ?isVisible: bool,
                                    ?minimumHeightRequest: double,
                                    ?minimumWidthRequest: double,
                                    ?opacity: double,
                                    ?rotation: double,
                                    ?rotationX: double,
                                    ?rotationY: double,
                                    ?scale: double,
                                    ?style: Xamarin.Forms.Style,
                                    ?styleClass: obj,
                                    ?translationX: double,
                                    ?translationY: double,
                                    ?widthRequest: double,
                                    ?resources: (string * obj) list,
                                    ?styles: Xamarin.Forms.Style list,
                                    ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                    ?isTabStop: bool,
                                    ?scaleX: double,
                                    ?scaleY: double,
                                    ?tabIndex: int,
                                    ?childrenReordered: System.EventArgs -> unit,
                                    ?measureInvalidated: System.EventArgs -> unit,
                                    ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                    ?sizeChanged: System.EventArgs -> unit,
                                    ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                    ?classId: string,
                                    ?styleId: string,
                                    ?automationId: string,
                                    ?created: (Xamarin.Forms.TimePicker -> unit),
                                    ?ref: ViewRef<Xamarin.Forms.TimePicker>) =

        ViewBuilders.ConstructTimePicker(?time=time,
                               ?format=format,
                               ?textColor=textColor,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a WebView in the view
    static member inline WebView(?source: Xamarin.Forms.WebViewSource,
                                 ?reload: bool,
                                 ?navigated: Xamarin.Forms.WebNavigatedEventArgs -> unit,
                                 ?navigating: Xamarin.Forms.WebNavigatingEventArgs -> unit,
                                 ?reloadRequested: System.EventArgs -> unit,
                                 ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                 ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                 ?margin: obj,
                                 ?gestureRecognizers: ViewElement list,
                                 ?anchorX: double,
                                 ?anchorY: double,
                                 ?backgroundColor: Xamarin.Forms.Color,
                                 ?heightRequest: double,
                                 ?inputTransparent: bool,
                                 ?isEnabled: bool,
                                 ?isVisible: bool,
                                 ?minimumHeightRequest: double,
                                 ?minimumWidthRequest: double,
                                 ?opacity: double,
                                 ?rotation: double,
                                 ?rotationX: double,
                                 ?rotationY: double,
                                 ?scale: double,
                                 ?style: Xamarin.Forms.Style,
                                 ?styleClass: obj,
                                 ?translationX: double,
                                 ?translationY: double,
                                 ?widthRequest: double,
                                 ?resources: (string * obj) list,
                                 ?styles: Xamarin.Forms.Style list,
                                 ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                 ?isTabStop: bool,
                                 ?scaleX: double,
                                 ?scaleY: double,
                                 ?tabIndex: int,
                                 ?childrenReordered: System.EventArgs -> unit,
                                 ?measureInvalidated: System.EventArgs -> unit,
                                 ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                 ?sizeChanged: System.EventArgs -> unit,
                                 ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                 ?classId: string,
                                 ?styleId: string,
                                 ?automationId: string,
                                 ?created: (Xamarin.Forms.WebView -> unit),
                                 ?ref: ViewRef<Xamarin.Forms.WebView>) =

        ViewBuilders.ConstructWebView(?source=source,
                               ?reload=reload,
                               ?navigated=navigated,
                               ?navigating=navigating,
                               ?reloadRequested=reloadRequested,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a Page in the view
    static member inline Page(?title: string,
                              ?backgroundImage: string,
                              ?icon: string,
                              ?isBusy: bool,
                              ?padding: obj,
                              ?toolbarItems: ViewElement list,
                              ?useSafeArea: bool,
                              ?appearing: unit -> unit,
                              ?disappearing: unit -> unit,
                              ?layoutChanged: unit -> unit,
                              ?anchorX: double,
                              ?anchorY: double,
                              ?backgroundColor: Xamarin.Forms.Color,
                              ?heightRequest: double,
                              ?inputTransparent: bool,
                              ?isEnabled: bool,
                              ?isVisible: bool,
                              ?minimumHeightRequest: double,
                              ?minimumWidthRequest: double,
                              ?opacity: double,
                              ?rotation: double,
                              ?rotationX: double,
                              ?rotationY: double,
                              ?scale: double,
                              ?style: Xamarin.Forms.Style,
                              ?styleClass: obj,
                              ?translationX: double,
                              ?translationY: double,
                              ?widthRequest: double,
                              ?resources: (string * obj) list,
                              ?styles: Xamarin.Forms.Style list,
                              ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                              ?isTabStop: bool,
                              ?scaleX: double,
                              ?scaleY: double,
                              ?tabIndex: int,
                              ?childrenReordered: System.EventArgs -> unit,
                              ?measureInvalidated: System.EventArgs -> unit,
                              ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                              ?sizeChanged: System.EventArgs -> unit,
                              ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                              ?classId: string,
                              ?styleId: string,
                              ?automationId: string,
                              ?created: (Xamarin.Forms.Page -> unit),
                              ?ref: ViewRef<Xamarin.Forms.Page>) =

        ViewBuilders.ConstructPage(?title=title,
                               ?backgroundImage=backgroundImage,
                               ?icon=icon,
                               ?isBusy=isBusy,
                               ?padding=padding,
                               ?toolbarItems=toolbarItems,
                               ?useSafeArea=useSafeArea,
                               ?appearing=appearing,
                               ?disappearing=disappearing,
                               ?layoutChanged=layoutChanged,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a CarouselPage in the view
    static member inline CarouselPage(?children: ViewElement list,
                                      ?currentPage: int,
                                      ?currentPageChanged: int option -> unit,
                                      ?title: string,
                                      ?backgroundImage: string,
                                      ?icon: string,
                                      ?isBusy: bool,
                                      ?padding: obj,
                                      ?toolbarItems: ViewElement list,
                                      ?useSafeArea: bool,
                                      ?appearing: unit -> unit,
                                      ?disappearing: unit -> unit,
                                      ?layoutChanged: unit -> unit,
                                      ?anchorX: double,
                                      ?anchorY: double,
                                      ?backgroundColor: Xamarin.Forms.Color,
                                      ?heightRequest: double,
                                      ?inputTransparent: bool,
                                      ?isEnabled: bool,
                                      ?isVisible: bool,
                                      ?minimumHeightRequest: double,
                                      ?minimumWidthRequest: double,
                                      ?opacity: double,
                                      ?rotation: double,
                                      ?rotationX: double,
                                      ?rotationY: double,
                                      ?scale: double,
                                      ?style: Xamarin.Forms.Style,
                                      ?styleClass: obj,
                                      ?translationX: double,
                                      ?translationY: double,
                                      ?widthRequest: double,
                                      ?resources: (string * obj) list,
                                      ?styles: Xamarin.Forms.Style list,
                                      ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                      ?isTabStop: bool,
                                      ?scaleX: double,
                                      ?scaleY: double,
                                      ?tabIndex: int,
                                      ?childrenReordered: System.EventArgs -> unit,
                                      ?measureInvalidated: System.EventArgs -> unit,
                                      ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                      ?sizeChanged: System.EventArgs -> unit,
                                      ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                      ?classId: string,
                                      ?styleId: string,
                                      ?automationId: string,
                                      ?created: (Xamarin.Forms.CarouselPage -> unit),
                                      ?ref: ViewRef<Xamarin.Forms.CarouselPage>) =

        ViewBuilders.ConstructCarouselPage(?children=children,
                               ?currentPage=currentPage,
                               ?currentPageChanged=currentPageChanged,
                               ?title=title,
                               ?backgroundImage=backgroundImage,
                               ?icon=icon,
                               ?isBusy=isBusy,
                               ?padding=padding,
                               ?toolbarItems=toolbarItems,
                               ?useSafeArea=useSafeArea,
                               ?appearing=appearing,
                               ?disappearing=disappearing,
                               ?layoutChanged=layoutChanged,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a NavigationPage in the view
    static member inline NavigationPage(?pages: ViewElement list,
                                        ?barBackgroundColor: Xamarin.Forms.Color,
                                        ?barTextColor: Xamarin.Forms.Color,
                                        ?popped: Xamarin.Forms.NavigationEventArgs -> unit,
                                        ?poppedToRoot: Xamarin.Forms.NavigationEventArgs -> unit,
                                        ?pushed: Xamarin.Forms.NavigationEventArgs -> unit,
                                        ?title: string,
                                        ?backgroundImage: string,
                                        ?icon: string,
                                        ?isBusy: bool,
                                        ?padding: obj,
                                        ?toolbarItems: ViewElement list,
                                        ?useSafeArea: bool,
                                        ?appearing: unit -> unit,
                                        ?disappearing: unit -> unit,
                                        ?layoutChanged: unit -> unit,
                                        ?anchorX: double,
                                        ?anchorY: double,
                                        ?backgroundColor: Xamarin.Forms.Color,
                                        ?heightRequest: double,
                                        ?inputTransparent: bool,
                                        ?isEnabled: bool,
                                        ?isVisible: bool,
                                        ?minimumHeightRequest: double,
                                        ?minimumWidthRequest: double,
                                        ?opacity: double,
                                        ?rotation: double,
                                        ?rotationX: double,
                                        ?rotationY: double,
                                        ?scale: double,
                                        ?style: Xamarin.Forms.Style,
                                        ?styleClass: obj,
                                        ?translationX: double,
                                        ?translationY: double,
                                        ?widthRequest: double,
                                        ?resources: (string * obj) list,
                                        ?styles: Xamarin.Forms.Style list,
                                        ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                        ?isTabStop: bool,
                                        ?scaleX: double,
                                        ?scaleY: double,
                                        ?tabIndex: int,
                                        ?childrenReordered: System.EventArgs -> unit,
                                        ?measureInvalidated: System.EventArgs -> unit,
                                        ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                        ?sizeChanged: System.EventArgs -> unit,
                                        ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                        ?classId: string,
                                        ?styleId: string,
                                        ?automationId: string,
                                        ?created: (Xamarin.Forms.NavigationPage -> unit),
                                        ?ref: ViewRef<Xamarin.Forms.NavigationPage>) =

        ViewBuilders.ConstructNavigationPage(?pages=pages,
                               ?barBackgroundColor=barBackgroundColor,
                               ?barTextColor=barTextColor,
                               ?popped=popped,
                               ?poppedToRoot=poppedToRoot,
                               ?pushed=pushed,
                               ?title=title,
                               ?backgroundImage=backgroundImage,
                               ?icon=icon,
                               ?isBusy=isBusy,
                               ?padding=padding,
                               ?toolbarItems=toolbarItems,
                               ?useSafeArea=useSafeArea,
                               ?appearing=appearing,
                               ?disappearing=disappearing,
                               ?layoutChanged=layoutChanged,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a TabbedPage in the view
    static member inline TabbedPage(?children: ViewElement list,
                                    ?barBackgroundColor: Xamarin.Forms.Color,
                                    ?barTextColor: Xamarin.Forms.Color,
                                    ?currentPage: int,
                                    ?currentPageChanged: int option -> unit,
                                    ?title: string,
                                    ?backgroundImage: string,
                                    ?icon: string,
                                    ?isBusy: bool,
                                    ?padding: obj,
                                    ?toolbarItems: ViewElement list,
                                    ?useSafeArea: bool,
                                    ?appearing: unit -> unit,
                                    ?disappearing: unit -> unit,
                                    ?layoutChanged: unit -> unit,
                                    ?anchorX: double,
                                    ?anchorY: double,
                                    ?backgroundColor: Xamarin.Forms.Color,
                                    ?heightRequest: double,
                                    ?inputTransparent: bool,
                                    ?isEnabled: bool,
                                    ?isVisible: bool,
                                    ?minimumHeightRequest: double,
                                    ?minimumWidthRequest: double,
                                    ?opacity: double,
                                    ?rotation: double,
                                    ?rotationX: double,
                                    ?rotationY: double,
                                    ?scale: double,
                                    ?style: Xamarin.Forms.Style,
                                    ?styleClass: obj,
                                    ?translationX: double,
                                    ?translationY: double,
                                    ?widthRequest: double,
                                    ?resources: (string * obj) list,
                                    ?styles: Xamarin.Forms.Style list,
                                    ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                    ?isTabStop: bool,
                                    ?scaleX: double,
                                    ?scaleY: double,
                                    ?tabIndex: int,
                                    ?childrenReordered: System.EventArgs -> unit,
                                    ?measureInvalidated: System.EventArgs -> unit,
                                    ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                    ?sizeChanged: System.EventArgs -> unit,
                                    ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                    ?classId: string,
                                    ?styleId: string,
                                    ?automationId: string,
                                    ?created: (Xamarin.Forms.TabbedPage -> unit),
                                    ?ref: ViewRef<Xamarin.Forms.TabbedPage>) =

        ViewBuilders.ConstructTabbedPage(?children=children,
                               ?barBackgroundColor=barBackgroundColor,
                               ?barTextColor=barTextColor,
                               ?currentPage=currentPage,
                               ?currentPageChanged=currentPageChanged,
                               ?title=title,
                               ?backgroundImage=backgroundImage,
                               ?icon=icon,
                               ?isBusy=isBusy,
                               ?padding=padding,
                               ?toolbarItems=toolbarItems,
                               ?useSafeArea=useSafeArea,
                               ?appearing=appearing,
                               ?disappearing=disappearing,
                               ?layoutChanged=layoutChanged,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a ContentPage in the view
    static member inline ContentPage(?content: ViewElement,
                                     ?onSizeAllocated: (double * double) -> unit,
                                     ?title: string,
                                     ?backgroundImage: string,
                                     ?icon: string,
                                     ?isBusy: bool,
                                     ?padding: obj,
                                     ?toolbarItems: ViewElement list,
                                     ?useSafeArea: bool,
                                     ?appearing: unit -> unit,
                                     ?disappearing: unit -> unit,
                                     ?layoutChanged: unit -> unit,
                                     ?anchorX: double,
                                     ?anchorY: double,
                                     ?backgroundColor: Xamarin.Forms.Color,
                                     ?heightRequest: double,
                                     ?inputTransparent: bool,
                                     ?isEnabled: bool,
                                     ?isVisible: bool,
                                     ?minimumHeightRequest: double,
                                     ?minimumWidthRequest: double,
                                     ?opacity: double,
                                     ?rotation: double,
                                     ?rotationX: double,
                                     ?rotationY: double,
                                     ?scale: double,
                                     ?style: Xamarin.Forms.Style,
                                     ?styleClass: obj,
                                     ?translationX: double,
                                     ?translationY: double,
                                     ?widthRequest: double,
                                     ?resources: (string * obj) list,
                                     ?styles: Xamarin.Forms.Style list,
                                     ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                     ?isTabStop: bool,
                                     ?scaleX: double,
                                     ?scaleY: double,
                                     ?tabIndex: int,
                                     ?childrenReordered: System.EventArgs -> unit,
                                     ?measureInvalidated: System.EventArgs -> unit,
                                     ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                     ?sizeChanged: System.EventArgs -> unit,
                                     ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                     ?classId: string,
                                     ?styleId: string,
                                     ?automationId: string,
                                     ?created: (Xamarin.Forms.ContentPage -> unit),
                                     ?ref: ViewRef<Xamarin.Forms.ContentPage>) =

        ViewBuilders.ConstructContentPage(?content=content,
                               ?onSizeAllocated=onSizeAllocated,
                               ?title=title,
                               ?backgroundImage=backgroundImage,
                               ?icon=icon,
                               ?isBusy=isBusy,
                               ?padding=padding,
                               ?toolbarItems=toolbarItems,
                               ?useSafeArea=useSafeArea,
                               ?appearing=appearing,
                               ?disappearing=disappearing,
                               ?layoutChanged=layoutChanged,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a MasterDetailPage in the view
    static member inline MasterDetailPage(?master: ViewElement,
                                          ?detail: ViewElement,
                                          ?isGestureEnabled: bool,
                                          ?isPresented: bool,
                                          ?masterBehavior: Xamarin.Forms.MasterBehavior,
                                          ?isPresentedChanged: bool -> unit,
                                          ?title: string,
                                          ?backgroundImage: string,
                                          ?icon: string,
                                          ?isBusy: bool,
                                          ?padding: obj,
                                          ?toolbarItems: ViewElement list,
                                          ?useSafeArea: bool,
                                          ?appearing: unit -> unit,
                                          ?disappearing: unit -> unit,
                                          ?layoutChanged: unit -> unit,
                                          ?anchorX: double,
                                          ?anchorY: double,
                                          ?backgroundColor: Xamarin.Forms.Color,
                                          ?heightRequest: double,
                                          ?inputTransparent: bool,
                                          ?isEnabled: bool,
                                          ?isVisible: bool,
                                          ?minimumHeightRequest: double,
                                          ?minimumWidthRequest: double,
                                          ?opacity: double,
                                          ?rotation: double,
                                          ?rotationX: double,
                                          ?rotationY: double,
                                          ?scale: double,
                                          ?style: Xamarin.Forms.Style,
                                          ?styleClass: obj,
                                          ?translationX: double,
                                          ?translationY: double,
                                          ?widthRequest: double,
                                          ?resources: (string * obj) list,
                                          ?styles: Xamarin.Forms.Style list,
                                          ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                          ?isTabStop: bool,
                                          ?scaleX: double,
                                          ?scaleY: double,
                                          ?tabIndex: int,
                                          ?childrenReordered: System.EventArgs -> unit,
                                          ?measureInvalidated: System.EventArgs -> unit,
                                          ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                          ?sizeChanged: System.EventArgs -> unit,
                                          ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                          ?classId: string,
                                          ?styleId: string,
                                          ?automationId: string,
                                          ?created: (Xamarin.Forms.MasterDetailPage -> unit),
                                          ?ref: ViewRef<Xamarin.Forms.MasterDetailPage>) =

        ViewBuilders.ConstructMasterDetailPage(?master=master,
                               ?detail=detail,
                               ?isGestureEnabled=isGestureEnabled,
                               ?isPresented=isPresented,
                               ?masterBehavior=masterBehavior,
                               ?isPresentedChanged=isPresentedChanged,
                               ?title=title,
                               ?backgroundImage=backgroundImage,
                               ?icon=icon,
                               ?isBusy=isBusy,
                               ?padding=padding,
                               ?toolbarItems=toolbarItems,
                               ?useSafeArea=useSafeArea,
                               ?appearing=appearing,
                               ?disappearing=disappearing,
                               ?layoutChanged=layoutChanged,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a MenuItem in the view
    static member inline MenuItem(?text: string,
                                  ?command: unit -> unit,
                                  ?commandParameter: System.Object,
                                  ?icon: string,
                                  ?accelerator: string,
                                  ?classId: string,
                                  ?styleId: string,
                                  ?automationId: string,
                                  ?created: (Xamarin.Forms.MenuItem -> unit),
                                  ?ref: ViewRef<Xamarin.Forms.MenuItem>) =

        ViewBuilders.ConstructMenuItem(?text=text,
                               ?command=command,
                               ?commandParameter=commandParameter,
                               ?icon=icon,
                               ?accelerator=accelerator,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a TextCell in the view
    static member inline TextCell(?text: string,
                                  ?detail: string,
                                  ?textColor: Xamarin.Forms.Color,
                                  ?detailColor: Xamarin.Forms.Color,
                                  ?command: unit -> unit,
                                  ?canExecute: bool,
                                  ?commandParameter: System.Object,
                                  ?height: double,
                                  ?isEnabled: bool,
                                  ?classId: string,
                                  ?styleId: string,
                                  ?automationId: string,
                                  ?created: (Xamarin.Forms.TextCell -> unit),
                                  ?ref: ViewRef<Xamarin.Forms.TextCell>) =

        ViewBuilders.ConstructTextCell(?text=text,
                               ?detail=detail,
                               ?textColor=textColor,
                               ?detailColor=detailColor,
                               ?command=command,
                               ?canExecute=canExecute,
                               ?commandParameter=commandParameter,
                               ?height=height,
                               ?isEnabled=isEnabled,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a ToolbarItem in the view
    static member inline ToolbarItem(?order: Xamarin.Forms.ToolbarItemOrder,
                                     ?priority: int,
                                     ?text: string,
                                     ?command: unit -> unit,
                                     ?commandParameter: System.Object,
                                     ?icon: string,
                                     ?accelerator: string,
                                     ?classId: string,
                                     ?styleId: string,
                                     ?automationId: string,
                                     ?created: (Xamarin.Forms.ToolbarItem -> unit),
                                     ?ref: ViewRef<Xamarin.Forms.ToolbarItem>) =

        ViewBuilders.ConstructToolbarItem(?order=order,
                               ?priority=priority,
                               ?text=text,
                               ?command=command,
                               ?commandParameter=commandParameter,
                               ?icon=icon,
                               ?accelerator=accelerator,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a ImageCell in the view
    static member inline ImageCell(?imageSource: obj,
                                   ?text: string,
                                   ?detail: string,
                                   ?textColor: Xamarin.Forms.Color,
                                   ?detailColor: Xamarin.Forms.Color,
                                   ?command: unit -> unit,
                                   ?canExecute: bool,
                                   ?commandParameter: System.Object,
                                   ?height: double,
                                   ?isEnabled: bool,
                                   ?classId: string,
                                   ?styleId: string,
                                   ?automationId: string,
                                   ?created: (Xamarin.Forms.ImageCell -> unit),
                                   ?ref: ViewRef<Xamarin.Forms.ImageCell>) =

        ViewBuilders.ConstructImageCell(?imageSource=imageSource,
                               ?text=text,
                               ?detail=detail,
                               ?textColor=textColor,
                               ?detailColor=detailColor,
                               ?command=command,
                               ?canExecute=canExecute,
                               ?commandParameter=commandParameter,
                               ?height=height,
                               ?isEnabled=isEnabled,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a ViewCell in the view
    static member inline ViewCell(?view: ViewElement,
                                  ?height: double,
                                  ?isEnabled: bool,
                                  ?classId: string,
                                  ?styleId: string,
                                  ?automationId: string,
                                  ?created: (Xamarin.Forms.ViewCell -> unit),
                                  ?ref: ViewRef<Xamarin.Forms.ViewCell>) =

        ViewBuilders.ConstructViewCell(?view=view,
                               ?height=height,
                               ?isEnabled=isEnabled,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a ListView in the view
    static member inline ListView(?items: seq<ViewElement>,
                                  ?footer: System.Object,
                                  ?hasUnevenRows: bool,
                                  ?header: System.Object,
                                  ?headerTemplate: Xamarin.Forms.DataTemplate,
                                  ?isGroupingEnabled: bool,
                                  ?isPullToRefreshEnabled: bool,
                                  ?isRefreshing: bool,
                                  ?refreshCommand: unit -> unit,
                                  ?rowHeight: int,
                                  ?selectedItem: int option,
                                  ?separatorVisibility: Xamarin.Forms.SeparatorVisibility,
                                  ?separatorColor: Xamarin.Forms.Color,
                                  ?itemAppearing: int -> unit,
                                  ?itemDisappearing: int -> unit,
                                  ?itemSelected: int option -> unit,
                                  ?itemTapped: int -> unit,
                                  ?refreshing: unit -> unit,
                                  ?selectionMode: Xamarin.Forms.ListViewSelectionMode,
                                  ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                  ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                  ?margin: obj,
                                  ?gestureRecognizers: ViewElement list,
                                  ?anchorX: double,
                                  ?anchorY: double,
                                  ?backgroundColor: Xamarin.Forms.Color,
                                  ?heightRequest: double,
                                  ?inputTransparent: bool,
                                  ?isEnabled: bool,
                                  ?isVisible: bool,
                                  ?minimumHeightRequest: double,
                                  ?minimumWidthRequest: double,
                                  ?opacity: double,
                                  ?rotation: double,
                                  ?rotationX: double,
                                  ?rotationY: double,
                                  ?scale: double,
                                  ?style: Xamarin.Forms.Style,
                                  ?styleClass: obj,
                                  ?translationX: double,
                                  ?translationY: double,
                                  ?widthRequest: double,
                                  ?resources: (string * obj) list,
                                  ?styles: Xamarin.Forms.Style list,
                                  ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                  ?isTabStop: bool,
                                  ?scaleX: double,
                                  ?scaleY: double,
                                  ?tabIndex: int,
                                  ?childrenReordered: System.EventArgs -> unit,
                                  ?measureInvalidated: System.EventArgs -> unit,
                                  ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                  ?sizeChanged: System.EventArgs -> unit,
                                  ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                  ?classId: string,
                                  ?styleId: string,
                                  ?automationId: string,
                                  ?created: (Xamarin.Forms.ListView -> unit),
                                  ?ref: ViewRef<Xamarin.Forms.ListView>) =

        ViewBuilders.ConstructListView(?items=items,
                               ?footer=footer,
                               ?hasUnevenRows=hasUnevenRows,
                               ?header=header,
                               ?headerTemplate=headerTemplate,
                               ?isGroupingEnabled=isGroupingEnabled,
                               ?isPullToRefreshEnabled=isPullToRefreshEnabled,
                               ?isRefreshing=isRefreshing,
                               ?refreshCommand=refreshCommand,
                               ?rowHeight=rowHeight,
                               ?selectedItem=selectedItem,
                               ?separatorVisibility=separatorVisibility,
                               ?separatorColor=separatorColor,
                               ?itemAppearing=itemAppearing,
                               ?itemDisappearing=itemDisappearing,
                               ?itemSelected=itemSelected,
                               ?itemTapped=itemTapped,
                               ?refreshing=refreshing,
                               ?selectionMode=selectionMode,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)

    /// Describes a ListViewGrouped in the view
    static member inline ListViewGrouped(?items: (string * ViewElement * ViewElement list) list,
                                         ?showJumpList: bool,
                                         ?footer: System.Object,
                                         ?hasUnevenRows: bool,
                                         ?header: System.Object,
                                         ?isPullToRefreshEnabled: bool,
                                         ?isRefreshing: bool,
                                         ?refreshCommand: unit -> unit,
                                         ?rowHeight: int,
                                         ?selectedItem: (int * int) option,
                                         ?separatorVisibility: Xamarin.Forms.SeparatorVisibility,
                                         ?separatorColor: Xamarin.Forms.Color,
                                         ?itemAppearing: int * int option -> unit,
                                         ?itemDisappearing: int * int option -> unit,
                                         ?itemSelected: (int * int) option -> unit,
                                         ?itemTapped: int * int -> unit,
                                         ?refreshing: unit -> unit,
                                         ?selectionMode: Xamarin.Forms.ListViewSelectionMode,
                                         ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                         ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                         ?margin: obj,
                                         ?gestureRecognizers: ViewElement list,
                                         ?anchorX: double,
                                         ?anchorY: double,
                                         ?backgroundColor: Xamarin.Forms.Color,
                                         ?heightRequest: double,
                                         ?inputTransparent: bool,
                                         ?isEnabled: bool,
                                         ?isVisible: bool,
                                         ?minimumHeightRequest: double,
                                         ?minimumWidthRequest: double,
                                         ?opacity: double,
                                         ?rotation: double,
                                         ?rotationX: double,
                                         ?rotationY: double,
                                         ?scale: double,
                                         ?style: Xamarin.Forms.Style,
                                         ?styleClass: obj,
                                         ?translationX: double,
                                         ?translationY: double,
                                         ?widthRequest: double,
                                         ?resources: (string * obj) list,
                                         ?styles: Xamarin.Forms.Style list,
                                         ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                         ?isTabStop: bool,
                                         ?scaleX: double,
                                         ?scaleY: double,
                                         ?tabIndex: int,
                                         ?childrenReordered: System.EventArgs -> unit,
                                         ?measureInvalidated: System.EventArgs -> unit,
                                         ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                         ?sizeChanged: System.EventArgs -> unit,
                                         ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                         ?classId: string,
                                         ?styleId: string,
                                         ?automationId: string,
                                         ?created: (Xamarin.Forms.ListView -> unit),
                                         ?ref: ViewRef<Xamarin.Forms.ListView>) =

        ViewBuilders.ConstructListViewGrouped(?items=items,
                               ?showJumpList=showJumpList,
                               ?footer=footer,
                               ?hasUnevenRows=hasUnevenRows,
                               ?header=header,
                               ?isPullToRefreshEnabled=isPullToRefreshEnabled,
                               ?isRefreshing=isRefreshing,
                               ?refreshCommand=refreshCommand,
                               ?rowHeight=rowHeight,
                               ?selectedItem=selectedItem,
                               ?separatorVisibility=separatorVisibility,
                               ?separatorColor=separatorColor,
                               ?itemAppearing=itemAppearing,
                               ?itemDisappearing=itemDisappearing,
                               ?itemSelected=itemSelected,
                               ?itemTapped=itemTapped,
                               ?refreshing=refreshing,
                               ?selectionMode=selectionMode,
                               ?horizontalOptions=horizontalOptions,
                               ?verticalOptions=verticalOptions,
                               ?margin=margin,
                               ?gestureRecognizers=gestureRecognizers,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?heightRequest=heightRequest,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isVisible=isVisible,
                               ?minimumHeightRequest=minimumHeightRequest,
                               ?minimumWidthRequest=minimumWidthRequest,
                               ?opacity=opacity,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?style=style,
                               ?styleClass=styleClass,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?widthRequest=widthRequest,
                               ?resources=resources,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?isTabStop=isTabStop,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?tabIndex=tabIndex,
                               ?childrenReordered=childrenReordered,
                               ?measureInvalidated=measureInvalidated,
                               ?focused=focused,
                               ?sizeChanged=sizeChanged,
                               ?unfocused=unfocused,
                               ?classId=classId,
                               ?styleId=styleId,
                               ?automationId=automationId,
                               ?created=created,
                               ?ref=ref)


[<AutoOpen>]
module ViewElementExtensions = 

    type ViewElement with

        /// Adjusts the ClassId property in the visual element
        member x.ClassId(value: string) = x.WithAttribute(ViewAttributes.ClassIdAttribKey, (value))

        /// Adjusts the StyleId property in the visual element
        member x.StyleId(value: string) = x.WithAttribute(ViewAttributes.StyleIdAttribKey, (value))

        /// Adjusts the AutomationId property in the visual element
        member x.AutomationId(value: string) = x.WithAttribute(ViewAttributes.AutomationIdAttribKey, (value))

        /// Adjusts the AnchorX property in the visual element
        member x.AnchorX(value: double) = x.WithAttribute(ViewAttributes.AnchorXAttribKey, (value))

        /// Adjusts the AnchorY property in the visual element
        member x.AnchorY(value: double) = x.WithAttribute(ViewAttributes.AnchorYAttribKey, (value))

        /// Adjusts the BackgroundColor property in the visual element
        member x.BackgroundColor(value: Xamarin.Forms.Color) = x.WithAttribute(ViewAttributes.BackgroundColorAttribKey, (value))

        /// Adjusts the HeightRequest property in the visual element
        member x.HeightRequest(value: double) = x.WithAttribute(ViewAttributes.HeightRequestAttribKey, (value))

        /// Adjusts the InputTransparent property in the visual element
        member x.InputTransparent(value: bool) = x.WithAttribute(ViewAttributes.InputTransparentAttribKey, (value))

        /// Adjusts the IsEnabled property in the visual element
        member x.IsEnabled(value: bool) = x.WithAttribute(ViewAttributes.IsEnabledAttribKey, (value))

        /// Adjusts the IsVisible property in the visual element
        member x.IsVisible(value: bool) = x.WithAttribute(ViewAttributes.IsVisibleAttribKey, (value))

        /// Adjusts the MinimumHeightRequest property in the visual element
        member x.MinimumHeightRequest(value: double) = x.WithAttribute(ViewAttributes.MinimumHeightRequestAttribKey, (value))

        /// Adjusts the MinimumWidthRequest property in the visual element
        member x.MinimumWidthRequest(value: double) = x.WithAttribute(ViewAttributes.MinimumWidthRequestAttribKey, (value))

        /// Adjusts the Opacity property in the visual element
        member x.Opacity(value: double) = x.WithAttribute(ViewAttributes.OpacityAttribKey, (value))

        /// Adjusts the Rotation property in the visual element
        member x.Rotation(value: double) = x.WithAttribute(ViewAttributes.RotationAttribKey, (value))

        /// Adjusts the RotationX property in the visual element
        member x.RotationX(value: double) = x.WithAttribute(ViewAttributes.RotationXAttribKey, (value))

        /// Adjusts the RotationY property in the visual element
        member x.RotationY(value: double) = x.WithAttribute(ViewAttributes.RotationYAttribKey, (value))

        /// Adjusts the Scale property in the visual element
        member x.Scale(value: double) = x.WithAttribute(ViewAttributes.ScaleAttribKey, (value))

        /// Adjusts the Style property in the visual element
        member x.Style(value: Xamarin.Forms.Style) = x.WithAttribute(ViewAttributes.StyleAttribKey, (value))

        /// Adjusts the StyleClass property in the visual element
        member x.StyleClass(value: obj) = x.WithAttribute(ViewAttributes.StyleClassAttribKey, makeStyleClass(value))

        /// Adjusts the TranslationX property in the visual element
        member x.TranslationX(value: double) = x.WithAttribute(ViewAttributes.TranslationXAttribKey, (value))

        /// Adjusts the TranslationY property in the visual element
        member x.TranslationY(value: double) = x.WithAttribute(ViewAttributes.TranslationYAttribKey, (value))

        /// Adjusts the WidthRequest property in the visual element
        member x.WidthRequest(value: double) = x.WithAttribute(ViewAttributes.WidthRequestAttribKey, (value))

        /// Adjusts the Resources property in the visual element
        member x.Resources(value: (string * obj) list) = x.WithAttribute(ViewAttributes.ResourcesAttribKey, (value))

        /// Adjusts the Styles property in the visual element
        member x.Styles(value: Xamarin.Forms.Style list) = x.WithAttribute(ViewAttributes.StylesAttribKey, (value))

        /// Adjusts the StyleSheets property in the visual element
        member x.StyleSheets(value: Xamarin.Forms.StyleSheets.StyleSheet list) = x.WithAttribute(ViewAttributes.StyleSheetsAttribKey, (value))

        /// Adjusts the IsTabStop property in the visual element
        member x.IsTabStop(value: bool) = x.WithAttribute(ViewAttributes.IsTabStopAttribKey, (value))

        /// Adjusts the ScaleX property in the visual element
        member x.ScaleX(value: double) = x.WithAttribute(ViewAttributes.ScaleXAttribKey, (value))

        /// Adjusts the ScaleY property in the visual element
        member x.ScaleY(value: double) = x.WithAttribute(ViewAttributes.ScaleYAttribKey, (value))

        /// Adjusts the TabIndex property in the visual element
        member x.TabIndex(value: int) = x.WithAttribute(ViewAttributes.TabIndexAttribKey, (value))

        /// Adjusts the ChildrenReordered property in the visual element
        member x.ChildrenReordered(value: System.EventArgs -> unit) = x.WithAttribute(ViewAttributes.ChildrenReorderedAttribKey, (fun f -> System.EventHandler(fun _sender args -> f args))(value))

        /// Adjusts the MeasureInvalidated property in the visual element
        member x.MeasureInvalidated(value: System.EventArgs -> unit) = x.WithAttribute(ViewAttributes.MeasureInvalidatedAttribKey, (fun f -> System.EventHandler(fun _sender args -> f args))(value))

        /// Adjusts the Focused property in the visual element
        member x.Focused(value: Xamarin.Forms.FocusEventArgs -> unit) = x.WithAttribute(ViewAttributes.FocusedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.FocusEventArgs>(fun _sender args -> f args))(value))

        /// Adjusts the SizeChanged property in the visual element
        member x.SizeChanged(value: System.EventArgs -> unit) = x.WithAttribute(ViewAttributes.SizeChangedAttribKey, (fun f -> System.EventHandler(fun _sender args -> f args))(value))

        /// Adjusts the Unfocused property in the visual element
        member x.Unfocused(value: Xamarin.Forms.FocusEventArgs -> unit) = x.WithAttribute(ViewAttributes.UnfocusedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.FocusEventArgs>(fun _sender args -> f args))(value))

        /// Adjusts the HorizontalOptions property in the visual element
        member x.HorizontalOptions(value: Xamarin.Forms.LayoutOptions) = x.WithAttribute(ViewAttributes.HorizontalOptionsAttribKey, (value))

        /// Adjusts the VerticalOptions property in the visual element
        member x.VerticalOptions(value: Xamarin.Forms.LayoutOptions) = x.WithAttribute(ViewAttributes.VerticalOptionsAttribKey, (value))

        /// Adjusts the Margin property in the visual element
        member x.Margin(value: obj) = x.WithAttribute(ViewAttributes.MarginAttribKey, makeThickness(value))

        /// Adjusts the GestureRecognizers property in the visual element
        member x.GestureRecognizers(value: ViewElement list) = x.WithAttribute(ViewAttributes.GestureRecognizersAttribKey, Array.ofList(value))

        /// Adjusts the TouchPoints property in the visual element
        member x.TouchPoints(value: int) = x.WithAttribute(ViewAttributes.TouchPointsAttribKey, (value))

        /// Adjusts the PanUpdated property in the visual element
        member x.PanUpdated(value: Xamarin.Forms.PanUpdatedEventArgs -> unit) = x.WithAttribute(ViewAttributes.PanUpdatedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.PanUpdatedEventArgs>(fun _sender args -> f args))(value))

        /// Adjusts the Command property in the visual element
        member x.Command(value: unit -> unit) = x.WithAttribute(ViewAttributes.CommandAttribKey, makeCommand(value))

        /// Adjusts the NumberOfTapsRequired property in the visual element
        member x.NumberOfTapsRequired(value: int) = x.WithAttribute(ViewAttributes.NumberOfTapsRequiredAttribKey, (value))

        /// Adjusts the NumberOfClicksRequired property in the visual element
        member x.NumberOfClicksRequired(value: int) = x.WithAttribute(ViewAttributes.NumberOfClicksRequiredAttribKey, (value))

        /// Adjusts the Buttons property in the visual element
        member x.Buttons(value: Xamarin.Forms.ButtonsMask) = x.WithAttribute(ViewAttributes.ButtonsAttribKey, (value))

        /// Adjusts the IsPinching property in the visual element
        member x.IsPinching(value: bool) = x.WithAttribute(ViewAttributes.IsPinchingAttribKey, (value))

        /// Adjusts the PinchUpdated property in the visual element
        member x.PinchUpdated(value: Xamarin.Forms.PinchGestureUpdatedEventArgs -> unit) = x.WithAttribute(ViewAttributes.PinchUpdatedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.PinchGestureUpdatedEventArgs>(fun _sender args -> f args))(value))

        /// Adjusts the SwipeGestureRecognizerDirection property in the visual element
        member x.SwipeGestureRecognizerDirection(value: Xamarin.Forms.SwipeDirection) = x.WithAttribute(ViewAttributes.SwipeGestureRecognizerDirectionAttribKey, (value))

        /// Adjusts the Threshold property in the visual element
        member x.Threshold(value: System.UInt32) = x.WithAttribute(ViewAttributes.ThresholdAttribKey, (value))

        /// Adjusts the Swiped property in the visual element
        member x.Swiped(value: Xamarin.Forms.SwipedEventArgs -> unit) = x.WithAttribute(ViewAttributes.SwipedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.SwipedEventArgs>(fun _sender args -> f args))(value))

        /// Adjusts the Color property in the visual element
        member x.Color(value: Xamarin.Forms.Color) = x.WithAttribute(ViewAttributes.ColorAttribKey, (value))

        /// Adjusts the IsRunning property in the visual element
        member x.IsRunning(value: bool) = x.WithAttribute(ViewAttributes.IsRunningAttribKey, (value))

        /// Adjusts the BoxViewCornerRadius property in the visual element
        member x.BoxViewCornerRadius(value: Xamarin.Forms.CornerRadius) = x.WithAttribute(ViewAttributes.BoxViewCornerRadiusAttribKey, (value))

        /// Adjusts the Progress property in the visual element
        member x.Progress(value: double) = x.WithAttribute(ViewAttributes.ProgressAttribKey, (value))

        /// Adjusts the IsClippedToBounds property in the visual element
        member x.IsClippedToBounds(value: bool) = x.WithAttribute(ViewAttributes.IsClippedToBoundsAttribKey, (value))

        /// Adjusts the Padding property in the visual element
        member x.Padding(value: obj) = x.WithAttribute(ViewAttributes.PaddingAttribKey, makeThickness(value))

        /// Adjusts the Content property in the visual element
        member x.Content(value: ViewElement) = x.WithAttribute(ViewAttributes.ContentAttribKey, (value))

        /// Adjusts the ScrollOrientation property in the visual element
        member x.ScrollOrientation(value: Xamarin.Forms.ScrollOrientation) = x.WithAttribute(ViewAttributes.ScrollOrientationAttribKey, (value))

        /// Adjusts the HorizontalScrollBarVisibility property in the visual element
        member x.HorizontalScrollBarVisibility(value: Xamarin.Forms.ScrollBarVisibility) = x.WithAttribute(ViewAttributes.HorizontalScrollBarVisibilityAttribKey, (value))

        /// Adjusts the VerticalScrollBarVisibility property in the visual element
        member x.VerticalScrollBarVisibility(value: Xamarin.Forms.ScrollBarVisibility) = x.WithAttribute(ViewAttributes.VerticalScrollBarVisibilityAttribKey, (value))

        /// Adjusts the ScrollTo property in the visual element
        member x.ScrollTo(value: float * float * Fabulous.DynamicViews.AnimationKind) = x.WithAttribute(ViewAttributes.ScrollToAttribKey, (value))

        /// Adjusts the Scrolled property in the visual element
        member x.Scrolled(value: Xamarin.Forms.ScrolledEventArgs -> unit) = x.WithAttribute(ViewAttributes.ScrolledAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.ScrolledEventArgs>(fun _sender args -> f args))(value))

        /// Adjusts the CancelButtonColor property in the visual element
        member x.CancelButtonColor(value: Xamarin.Forms.Color) = x.WithAttribute(ViewAttributes.CancelButtonColorAttribKey, (value))

        /// Adjusts the FontFamily property in the visual element
        member x.FontFamily(value: string) = x.WithAttribute(ViewAttributes.FontFamilyAttribKey, (value))

        /// Adjusts the FontAttributes property in the visual element
        member x.FontAttributes(value: Xamarin.Forms.FontAttributes) = x.WithAttribute(ViewAttributes.FontAttributesAttribKey, (value))

        /// Adjusts the FontSize property in the visual element
        member x.FontSize(value: obj) = x.WithAttribute(ViewAttributes.FontSizeAttribKey, makeFontSize(value))

        /// Adjusts the HorizontalTextAlignment property in the visual element
        member x.HorizontalTextAlignment(value: Xamarin.Forms.TextAlignment) = x.WithAttribute(ViewAttributes.HorizontalTextAlignmentAttribKey, (value))

        /// Adjusts the Placeholder property in the visual element
        member x.Placeholder(value: string) = x.WithAttribute(ViewAttributes.PlaceholderAttribKey, (value))

        /// Adjusts the PlaceholderColor property in the visual element
        member x.PlaceholderColor(value: Xamarin.Forms.Color) = x.WithAttribute(ViewAttributes.PlaceholderColorAttribKey, (value))

        /// Adjusts the SearchBarCommand property in the visual element
        member x.SearchBarCommand(value: string -> unit) = x.WithAttribute(ViewAttributes.SearchBarCommandAttribKey, (value))

        /// Adjusts the SearchBarCanExecute property in the visual element
        member x.SearchBarCanExecute(value: bool) = x.WithAttribute(ViewAttributes.SearchBarCanExecuteAttribKey, (value))

        /// Adjusts the Text property in the visual element
        member x.Text(value: string) = x.WithAttribute(ViewAttributes.TextAttribKey, (value))

        /// Adjusts the TextColor property in the visual element
        member x.TextColor(value: Xamarin.Forms.Color) = x.WithAttribute(ViewAttributes.TextColorAttribKey, (value))

        /// Adjusts the SearchBarTextChanged property in the visual element
        member x.SearchBarTextChanged(value: Xamarin.Forms.TextChangedEventArgs -> unit) = x.WithAttribute(ViewAttributes.SearchBarTextChangedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.TextChangedEventArgs>(fun _sender args -> f args))(value))

        /// Adjusts the ButtonCommand property in the visual element
        member x.ButtonCommand(value: unit -> unit) = x.WithAttribute(ViewAttributes.ButtonCommandAttribKey, (value))

        /// Adjusts the ButtonCanExecute property in the visual element
        member x.ButtonCanExecute(value: bool) = x.WithAttribute(ViewAttributes.ButtonCanExecuteAttribKey, (value))

        /// Adjusts the BorderColor property in the visual element
        member x.BorderColor(value: Xamarin.Forms.Color) = x.WithAttribute(ViewAttributes.BorderColorAttribKey, (value))

        /// Adjusts the BorderWidth property in the visual element
        member x.BorderWidth(value: double) = x.WithAttribute(ViewAttributes.BorderWidthAttribKey, (value))

        /// Adjusts the CommandParameter property in the visual element
        member x.CommandParameter(value: System.Object) = x.WithAttribute(ViewAttributes.CommandParameterAttribKey, (value))

        /// Adjusts the ContentLayout property in the visual element
        member x.ContentLayout(value: Xamarin.Forms.Button.ButtonContentLayout) = x.WithAttribute(ViewAttributes.ContentLayoutAttribKey, (value))

        /// Adjusts the ButtonCornerRadius property in the visual element
        member x.ButtonCornerRadius(value: int) = x.WithAttribute(ViewAttributes.ButtonCornerRadiusAttribKey, (value))

        /// Adjusts the ButtonImageSource property in the visual element
        member x.ButtonImageSource(value: string) = x.WithAttribute(ViewAttributes.ButtonImageSourceAttribKey, (value))

        /// Adjusts the MinimumMaximum property in the visual element
        member x.MinimumMaximum(value: float * float) = x.WithAttribute(ViewAttributes.MinimumMaximumAttribKey, (value))

        /// Adjusts the Value property in the visual element
        member x.Value(value: double) = x.WithAttribute(ViewAttributes.ValueAttribKey, (value))

        /// Adjusts the ValueChanged property in the visual element
        member x.ValueChanged(value: Xamarin.Forms.ValueChangedEventArgs -> unit) = x.WithAttribute(ViewAttributes.ValueChangedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.ValueChangedEventArgs>(fun _sender args -> f args))(value))

        /// Adjusts the Increment property in the visual element
        member x.Increment(value: double) = x.WithAttribute(ViewAttributes.IncrementAttribKey, (value))

        /// Adjusts the IsToggled property in the visual element
        member x.IsToggled(value: bool) = x.WithAttribute(ViewAttributes.IsToggledAttribKey, (value))

        /// Adjusts the Toggled property in the visual element
        member x.Toggled(value: Xamarin.Forms.ToggledEventArgs -> unit) = x.WithAttribute(ViewAttributes.ToggledAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.ToggledEventArgs>(fun _sender args -> f args))(value))

        /// Adjusts the OnColor property in the visual element
        member x.OnColor(value: Xamarin.Forms.Color) = x.WithAttribute(ViewAttributes.OnColorAttribKey, (value))

        /// Adjusts the Height property in the visual element
        member x.Height(value: double) = x.WithAttribute(ViewAttributes.HeightAttribKey, (value))

        /// Adjusts the On property in the visual element
        member x.On(value: bool) = x.WithAttribute(ViewAttributes.OnAttribKey, (value))

        /// Adjusts the OnChanged property in the visual element
        member x.OnChanged(value: Xamarin.Forms.ToggledEventArgs -> unit) = x.WithAttribute(ViewAttributes.OnChangedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.ToggledEventArgs>(fun _sender args -> f args))(value))

        /// Adjusts the Intent property in the visual element
        member x.Intent(value: Xamarin.Forms.TableIntent) = x.WithAttribute(ViewAttributes.IntentAttribKey, (value))

        /// Adjusts the HasUnevenRows property in the visual element
        member x.HasUnevenRows(value: bool) = x.WithAttribute(ViewAttributes.HasUnevenRowsAttribKey, (value))

        /// Adjusts the RowHeight property in the visual element
        member x.RowHeight(value: int) = x.WithAttribute(ViewAttributes.RowHeightAttribKey, (value))

        /// Adjusts the TableRoot property in the visual element
        member x.TableRoot(value: (string * ViewElement list) list) = x.WithAttribute(ViewAttributes.TableRootAttribKey, (fun es -> es |> Array.ofList |> Array.map (fun (title, es) -> (title, Array.ofList es)))(value))

        /// Adjusts the RowDefinitionHeight property in the visual element
        member x.RowDefinitionHeight(value: obj) = x.WithAttribute(ViewAttributes.RowDefinitionHeightAttribKey, makeGridLength(value))

        /// Adjusts the ColumnDefinitionWidth property in the visual element
        member x.ColumnDefinitionWidth(value: obj) = x.WithAttribute(ViewAttributes.ColumnDefinitionWidthAttribKey, makeGridLength(value))

        /// Adjusts the GridRowDefinitions property in the visual element
        member x.GridRowDefinitions(value: obj list) = x.WithAttribute(ViewAttributes.GridRowDefinitionsAttribKey, (fun es -> es |> Array.ofList |> Array.map (fun h -> ViewBuilders.ConstructRowDefinition(height=h)))(value))

        /// Adjusts the GridColumnDefinitions property in the visual element
        member x.GridColumnDefinitions(value: obj list) = x.WithAttribute(ViewAttributes.GridColumnDefinitionsAttribKey, (fun es -> es |> Array.ofList |> Array.map (fun h -> ViewBuilders.ConstructColumnDefinition(width=h)))(value))

        /// Adjusts the RowSpacing property in the visual element
        member x.RowSpacing(value: double) = x.WithAttribute(ViewAttributes.RowSpacingAttribKey, (value))

        /// Adjusts the ColumnSpacing property in the visual element
        member x.ColumnSpacing(value: double) = x.WithAttribute(ViewAttributes.ColumnSpacingAttribKey, (value))

        /// Adjusts the Children property in the visual element
        member x.Children(value: ViewElement list) = x.WithAttribute(ViewAttributes.ChildrenAttribKey, Array.ofList(value))

        /// Adjusts the GridRow property in the visual element
        member x.GridRow(value: int) = x.WithAttribute(ViewAttributes.GridRowAttribKey, (value))

        /// Adjusts the GridRowSpan property in the visual element
        member x.GridRowSpan(value: int) = x.WithAttribute(ViewAttributes.GridRowSpanAttribKey, (value))

        /// Adjusts the GridColumn property in the visual element
        member x.GridColumn(value: int) = x.WithAttribute(ViewAttributes.GridColumnAttribKey, (value))

        /// Adjusts the GridColumnSpan property in the visual element
        member x.GridColumnSpan(value: int) = x.WithAttribute(ViewAttributes.GridColumnSpanAttribKey, (value))

        /// Adjusts the LayoutBounds property in the visual element
        member x.LayoutBounds(value: Xamarin.Forms.Rectangle) = x.WithAttribute(ViewAttributes.LayoutBoundsAttribKey, (value))

        /// Adjusts the LayoutFlags property in the visual element
        member x.LayoutFlags(value: Xamarin.Forms.AbsoluteLayoutFlags) = x.WithAttribute(ViewAttributes.LayoutFlagsAttribKey, (value))

        /// Adjusts the BoundsConstraint property in the visual element
        member x.BoundsConstraint(value: Xamarin.Forms.BoundsConstraint) = x.WithAttribute(ViewAttributes.BoundsConstraintAttribKey, (value))

        /// Adjusts the HeightConstraint property in the visual element
        member x.HeightConstraint(value: Xamarin.Forms.Constraint) = x.WithAttribute(ViewAttributes.HeightConstraintAttribKey, (value))

        /// Adjusts the WidthConstraint property in the visual element
        member x.WidthConstraint(value: Xamarin.Forms.Constraint) = x.WithAttribute(ViewAttributes.WidthConstraintAttribKey, (value))

        /// Adjusts the XConstraint property in the visual element
        member x.XConstraint(value: Xamarin.Forms.Constraint) = x.WithAttribute(ViewAttributes.XConstraintAttribKey, (value))

        /// Adjusts the YConstraint property in the visual element
        member x.YConstraint(value: Xamarin.Forms.Constraint) = x.WithAttribute(ViewAttributes.YConstraintAttribKey, (value))

        /// Adjusts the AlignContent property in the visual element
        member x.AlignContent(value: Xamarin.Forms.FlexAlignContent) = x.WithAttribute(ViewAttributes.AlignContentAttribKey, (value))

        /// Adjusts the AlignItems property in the visual element
        member x.AlignItems(value: Xamarin.Forms.FlexAlignItems) = x.WithAttribute(ViewAttributes.AlignItemsAttribKey, (value))

        /// Adjusts the FlexLayoutDirection property in the visual element
        member x.FlexLayoutDirection(value: Xamarin.Forms.FlexDirection) = x.WithAttribute(ViewAttributes.FlexLayoutDirectionAttribKey, (value))

        /// Adjusts the Position property in the visual element
        member x.Position(value: Xamarin.Forms.FlexPosition) = x.WithAttribute(ViewAttributes.PositionAttribKey, (value))

        /// Adjusts the Wrap property in the visual element
        member x.Wrap(value: Xamarin.Forms.FlexWrap) = x.WithAttribute(ViewAttributes.WrapAttribKey, (value))

        /// Adjusts the JustifyContent property in the visual element
        member x.JustifyContent(value: Xamarin.Forms.FlexJustify) = x.WithAttribute(ViewAttributes.JustifyContentAttribKey, (value))

        /// Adjusts the FlexAlignSelf property in the visual element
        member x.FlexAlignSelf(value: Xamarin.Forms.FlexAlignSelf) = x.WithAttribute(ViewAttributes.FlexAlignSelfAttribKey, (value))

        /// Adjusts the FlexOrder property in the visual element
        member x.FlexOrder(value: int) = x.WithAttribute(ViewAttributes.FlexOrderAttribKey, (value))

        /// Adjusts the FlexBasis property in the visual element
        member x.FlexBasis(value: Xamarin.Forms.FlexBasis) = x.WithAttribute(ViewAttributes.FlexBasisAttribKey, (value))

        /// Adjusts the FlexGrow property in the visual element
        member x.FlexGrow(value: double) = x.WithAttribute(ViewAttributes.FlexGrowAttribKey, single(value))

        /// Adjusts the FlexShrink property in the visual element
        member x.FlexShrink(value: double) = x.WithAttribute(ViewAttributes.FlexShrinkAttribKey, single(value))

        /// Adjusts the Date property in the visual element
        member x.Date(value: System.DateTime) = x.WithAttribute(ViewAttributes.DateAttribKey, (value))

        /// Adjusts the Format property in the visual element
        member x.Format(value: string) = x.WithAttribute(ViewAttributes.FormatAttribKey, (value))

        /// Adjusts the MinimumDate property in the visual element
        member x.MinimumDate(value: System.DateTime) = x.WithAttribute(ViewAttributes.MinimumDateAttribKey, (value))

        /// Adjusts the MaximumDate property in the visual element
        member x.MaximumDate(value: System.DateTime) = x.WithAttribute(ViewAttributes.MaximumDateAttribKey, (value))

        /// Adjusts the DateSelected property in the visual element
        member x.DateSelected(value: Xamarin.Forms.DateChangedEventArgs -> unit) = x.WithAttribute(ViewAttributes.DateSelectedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.DateChangedEventArgs>(fun _sender args -> f args))(value))

        /// Adjusts the PickerItemsSource property in the visual element
        member x.PickerItemsSource(value: seq<'T>) = x.WithAttribute(ViewAttributes.PickerItemsSourceAttribKey, seqToIListUntyped(value))

        /// Adjusts the SelectedIndex property in the visual element
        member x.SelectedIndex(value: int) = x.WithAttribute(ViewAttributes.SelectedIndexAttribKey, (value))

        /// Adjusts the Title property in the visual element
        member x.Title(value: string) = x.WithAttribute(ViewAttributes.TitleAttribKey, (value))

        /// Adjusts the SelectedIndexChanged property in the visual element
        member x.SelectedIndexChanged(value: (int * 'T option) -> unit) = x.WithAttribute(ViewAttributes.SelectedIndexChangedAttribKey, (fun f -> System.EventHandler(fun sender args -> let picker = (sender :?> Xamarin.Forms.Picker) in f (picker.SelectedIndex, (picker.SelectedItem |> Option.ofObj |> Option.map unbox<'T>))))(value))

        /// Adjusts the FrameCornerRadius property in the visual element
        member x.FrameCornerRadius(value: double) = x.WithAttribute(ViewAttributes.FrameCornerRadiusAttribKey, single(value))

        /// Adjusts the HasShadow property in the visual element
        member x.HasShadow(value: bool) = x.WithAttribute(ViewAttributes.HasShadowAttribKey, (value))

        /// Adjusts the ImageSource property in the visual element
        member x.ImageSource(value: obj) = x.WithAttribute(ViewAttributes.ImageSourceAttribKey, (value))

        /// Adjusts the Aspect property in the visual element
        member x.Aspect(value: Xamarin.Forms.Aspect) = x.WithAttribute(ViewAttributes.AspectAttribKey, (value))

        /// Adjusts the IsOpaque property in the visual element
        member x.IsOpaque(value: bool) = x.WithAttribute(ViewAttributes.IsOpaqueAttribKey, (value))

        /// Adjusts the ImageButtonCommand property in the visual element
        member x.ImageButtonCommand(value: unit -> unit) = x.WithAttribute(ViewAttributes.ImageButtonCommandAttribKey, (value))

        /// Adjusts the ImageButtonCornerRadius property in the visual element
        member x.ImageButtonCornerRadius(value: int) = x.WithAttribute(ViewAttributes.ImageButtonCornerRadiusAttribKey, (value))

        /// Adjusts the Clicked property in the visual element
        member x.Clicked(value: System.EventArgs -> unit) = x.WithAttribute(ViewAttributes.ClickedAttribKey, (fun f -> System.EventHandler(fun _sender args -> f args))(value))

        /// Adjusts the Pressed property in the visual element
        member x.Pressed(value: System.EventArgs -> unit) = x.WithAttribute(ViewAttributes.PressedAttribKey, (fun f -> System.EventHandler(fun _sender args -> f args))(value))

        /// Adjusts the Released property in the visual element
        member x.Released(value: System.EventArgs -> unit) = x.WithAttribute(ViewAttributes.ReleasedAttribKey, (fun f -> System.EventHandler(fun _sender args -> f args))(value))

        /// Adjusts the Keyboard property in the visual element
        member x.Keyboard(value: Xamarin.Forms.Keyboard) = x.WithAttribute(ViewAttributes.KeyboardAttribKey, (value))

        /// Adjusts the EditorCompleted property in the visual element
        member x.EditorCompleted(value: string -> unit) = x.WithAttribute(ViewAttributes.EditorCompletedAttribKey, (fun f -> System.EventHandler(fun sender args -> f (sender :?> Xamarin.Forms.Editor).Text))(value))

        /// Adjusts the TextChanged property in the visual element
        member x.TextChanged(value: Xamarin.Forms.TextChangedEventArgs -> unit) = x.WithAttribute(ViewAttributes.TextChangedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.TextChangedEventArgs>(fun _sender args -> f args))(value))

        /// Adjusts the AutoSize property in the visual element
        member x.AutoSize(value: Xamarin.Forms.EditorAutoSizeOption) = x.WithAttribute(ViewAttributes.AutoSizeAttribKey, (value))

        /// Adjusts the IsPassword property in the visual element
        member x.IsPassword(value: bool) = x.WithAttribute(ViewAttributes.IsPasswordAttribKey, (value))

        /// Adjusts the EntryCompleted property in the visual element
        member x.EntryCompleted(value: string -> unit) = x.WithAttribute(ViewAttributes.EntryCompletedAttribKey, (fun f -> System.EventHandler(fun sender args -> f (sender :?> Xamarin.Forms.Entry).Text))(value))

        /// Adjusts the IsTextPredictionEnabled property in the visual element
        member x.IsTextPredictionEnabled(value: bool) = x.WithAttribute(ViewAttributes.IsTextPredictionEnabledAttribKey, (value))

        /// Adjusts the ReturnType property in the visual element
        member x.ReturnType(value: Xamarin.Forms.ReturnType) = x.WithAttribute(ViewAttributes.ReturnTypeAttribKey, (value))

        /// Adjusts the ReturnCommand property in the visual element
        member x.ReturnCommand(value: unit -> unit) = x.WithAttribute(ViewAttributes.ReturnCommandAttribKey, makeCommand(value))

        /// Adjusts the CursorPosition property in the visual element
        member x.CursorPosition(value: int) = x.WithAttribute(ViewAttributes.CursorPositionAttribKey, (value))

        /// Adjusts the SelectionLength property in the visual element
        member x.SelectionLength(value: int) = x.WithAttribute(ViewAttributes.SelectionLengthAttribKey, (value))

        /// Adjusts the Label property in the visual element
        member x.Label(value: string) = x.WithAttribute(ViewAttributes.LabelAttribKey, (value))

        /// Adjusts the EntryCellTextChanged property in the visual element
        member x.EntryCellTextChanged(value: Xamarin.Forms.TextChangedEventArgs -> unit) = x.WithAttribute(ViewAttributes.EntryCellTextChangedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.TextChangedEventArgs>(fun _sender args -> f args))(value))

        /// Adjusts the VerticalTextAlignment property in the visual element
        member x.VerticalTextAlignment(value: Xamarin.Forms.TextAlignment) = x.WithAttribute(ViewAttributes.VerticalTextAlignmentAttribKey, (value))

        /// Adjusts the FormattedText property in the visual element
        member x.FormattedText(value: ViewElement) = x.WithAttribute(ViewAttributes.FormattedTextAttribKey, (value))

        /// Adjusts the LineBreakMode property in the visual element
        member x.LineBreakMode(value: Xamarin.Forms.LineBreakMode) = x.WithAttribute(ViewAttributes.LineBreakModeAttribKey, (value))

        /// Adjusts the LineHeight property in the visual element
        member x.LineHeight(value: double) = x.WithAttribute(ViewAttributes.LineHeightAttribKey, (value))

        /// Adjusts the MaxLines property in the visual element
        member x.MaxLines(value: int) = x.WithAttribute(ViewAttributes.MaxLinesAttribKey, (value))

        /// Adjusts the TextDecorations property in the visual element
        member x.TextDecorations(value: Xamarin.Forms.TextDecorations) = x.WithAttribute(ViewAttributes.TextDecorationsAttribKey, (value))

        /// Adjusts the StackOrientation property in the visual element
        member x.StackOrientation(value: Xamarin.Forms.StackOrientation) = x.WithAttribute(ViewAttributes.StackOrientationAttribKey, (value))

        /// Adjusts the Spacing property in the visual element
        member x.Spacing(value: double) = x.WithAttribute(ViewAttributes.SpacingAttribKey, (value))

        /// Adjusts the ForegroundColor property in the visual element
        member x.ForegroundColor(value: Xamarin.Forms.Color) = x.WithAttribute(ViewAttributes.ForegroundColorAttribKey, (value))

        /// Adjusts the PropertyChanged property in the visual element
        member x.PropertyChanged(value: System.ComponentModel.PropertyChangedEventArgs -> unit) = x.WithAttribute(ViewAttributes.PropertyChangedAttribKey, (fun f -> System.EventHandler<System.ComponentModel.PropertyChangedEventArgs>(fun _sender args -> f args))(value))

        /// Adjusts the Spans property in the visual element
        member x.Spans(value: ViewElement[]) = x.WithAttribute(ViewAttributes.SpansAttribKey, (value))

        /// Adjusts the Time property in the visual element
        member x.Time(value: System.TimeSpan) = x.WithAttribute(ViewAttributes.TimeAttribKey, (value))

        /// Adjusts the WebSource property in the visual element
        member x.WebSource(value: Xamarin.Forms.WebViewSource) = x.WithAttribute(ViewAttributes.WebSourceAttribKey, (value))

        /// Adjusts the Reload property in the visual element
        member x.Reload(value: bool) = x.WithAttribute(ViewAttributes.ReloadAttribKey, (value))

        /// Adjusts the Navigated property in the visual element
        member x.Navigated(value: Xamarin.Forms.WebNavigatedEventArgs -> unit) = x.WithAttribute(ViewAttributes.NavigatedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.WebNavigatedEventArgs>(fun _sender args -> f args))(value))

        /// Adjusts the Navigating property in the visual element
        member x.Navigating(value: Xamarin.Forms.WebNavigatingEventArgs -> unit) = x.WithAttribute(ViewAttributes.NavigatingAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.WebNavigatingEventArgs>(fun _sender args -> f args))(value))

        /// Adjusts the ReloadRequested property in the visual element
        member x.ReloadRequested(value: System.EventArgs -> unit) = x.WithAttribute(ViewAttributes.ReloadRequestedAttribKey, (fun f -> System.EventHandler(fun _sender args -> f args))(value))

        /// Adjusts the BackgroundImage property in the visual element
        member x.BackgroundImage(value: string) = x.WithAttribute(ViewAttributes.BackgroundImageAttribKey, (value))

        /// Adjusts the Icon property in the visual element
        member x.Icon(value: string) = x.WithAttribute(ViewAttributes.IconAttribKey, (value))

        /// Adjusts the IsBusy property in the visual element
        member x.IsBusy(value: bool) = x.WithAttribute(ViewAttributes.IsBusyAttribKey, (value))

        /// Adjusts the ToolbarItems property in the visual element
        member x.ToolbarItems(value: ViewElement list) = x.WithAttribute(ViewAttributes.ToolbarItemsAttribKey, Array.ofList(value))

        /// Adjusts the UseSafeArea property in the visual element
        member x.UseSafeArea(value: bool) = x.WithAttribute(ViewAttributes.UseSafeAreaAttribKey, (value))

        /// Adjusts the Page_Appearing property in the visual element
        member x.Page_Appearing(value: unit -> unit) = x.WithAttribute(ViewAttributes.Page_AppearingAttribKey, (fun f -> System.EventHandler(fun _sender _args -> f ()))(value))

        /// Adjusts the Page_Disappearing property in the visual element
        member x.Page_Disappearing(value: unit -> unit) = x.WithAttribute(ViewAttributes.Page_DisappearingAttribKey, (fun f -> System.EventHandler(fun _sender _args -> f ()))(value))

        /// Adjusts the Page_LayoutChanged property in the visual element
        member x.Page_LayoutChanged(value: unit -> unit) = x.WithAttribute(ViewAttributes.Page_LayoutChangedAttribKey, (fun f -> System.EventHandler(fun _sender _args -> f ()))(value))

        /// Adjusts the CarouselPage_CurrentPage property in the visual element
        member x.CarouselPage_CurrentPage(value: int) = x.WithAttribute(ViewAttributes.CarouselPage_CurrentPageAttribKey, (value))

        /// Adjusts the CarouselPage_CurrentPageChanged property in the visual element
        member x.CarouselPage_CurrentPageChanged(value: int option -> unit) = x.WithAttribute(ViewAttributes.CarouselPage_CurrentPageChangedAttribKey, makeCurrentPageChanged<Xamarin.Forms.ContentPage>(value))

        /// Adjusts the Pages property in the visual element
        member x.Pages(value: ViewElement list) = x.WithAttribute(ViewAttributes.PagesAttribKey, Array.ofList(value))

        /// Adjusts the BackButtonTitle property in the visual element
        member x.BackButtonTitle(value: string) = x.WithAttribute(ViewAttributes.BackButtonTitleAttribKey, (value))

        /// Adjusts the HasBackButton property in the visual element
        member x.HasBackButton(value: bool) = x.WithAttribute(ViewAttributes.HasBackButtonAttribKey, (value))

        /// Adjusts the HasNavigationBar property in the visual element
        member x.HasNavigationBar(value: bool) = x.WithAttribute(ViewAttributes.HasNavigationBarAttribKey, (value))

        /// Adjusts the TitleIcon property in the visual element
        member x.TitleIcon(value: string) = x.WithAttribute(ViewAttributes.TitleIconAttribKey, (value))

        /// Adjusts the TitleView property in the visual element
        member x.TitleView(value: ViewElement) = x.WithAttribute(ViewAttributes.TitleViewAttribKey, (value))

        /// Adjusts the BarBackgroundColor property in the visual element
        member x.BarBackgroundColor(value: Xamarin.Forms.Color) = x.WithAttribute(ViewAttributes.BarBackgroundColorAttribKey, (value))

        /// Adjusts the BarTextColor property in the visual element
        member x.BarTextColor(value: Xamarin.Forms.Color) = x.WithAttribute(ViewAttributes.BarTextColorAttribKey, (value))

        /// Adjusts the Popped property in the visual element
        member x.Popped(value: Xamarin.Forms.NavigationEventArgs -> unit) = x.WithAttribute(ViewAttributes.PoppedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.NavigationEventArgs>(fun sender args -> f args))(value))

        /// Adjusts the PoppedToRoot property in the visual element
        member x.PoppedToRoot(value: Xamarin.Forms.NavigationEventArgs -> unit) = x.WithAttribute(ViewAttributes.PoppedToRootAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.NavigationEventArgs>(fun sender args -> f args))(value))

        /// Adjusts the Pushed property in the visual element
        member x.Pushed(value: Xamarin.Forms.NavigationEventArgs -> unit) = x.WithAttribute(ViewAttributes.PushedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.NavigationEventArgs>(fun sender args -> f args))(value))

        /// Adjusts the TabbedPage_CurrentPage property in the visual element
        member x.TabbedPage_CurrentPage(value: int) = x.WithAttribute(ViewAttributes.TabbedPage_CurrentPageAttribKey, (value))

        /// Adjusts the TabbedPage_CurrentPageChanged property in the visual element
        member x.TabbedPage_CurrentPageChanged(value: int option -> unit) = x.WithAttribute(ViewAttributes.TabbedPage_CurrentPageChangedAttribKey, makeCurrentPageChanged<Xamarin.Forms.Page>(value))

        /// Adjusts the OnSizeAllocatedCallback property in the visual element
        member x.OnSizeAllocatedCallback(value: (double * double) -> unit) = x.WithAttribute(ViewAttributes.OnSizeAllocatedCallbackAttribKey, (fun f -> FSharp.Control.Handler<_>(fun _sender args -> f args))(value))

        /// Adjusts the Master property in the visual element
        member x.Master(value: ViewElement) = x.WithAttribute(ViewAttributes.MasterAttribKey, (value))

        /// Adjusts the Detail property in the visual element
        member x.Detail(value: ViewElement) = x.WithAttribute(ViewAttributes.DetailAttribKey, (value))

        /// Adjusts the IsGestureEnabled property in the visual element
        member x.IsGestureEnabled(value: bool) = x.WithAttribute(ViewAttributes.IsGestureEnabledAttribKey, (value))

        /// Adjusts the IsPresented property in the visual element
        member x.IsPresented(value: bool) = x.WithAttribute(ViewAttributes.IsPresentedAttribKey, (value))

        /// Adjusts the MasterBehavior property in the visual element
        member x.MasterBehavior(value: Xamarin.Forms.MasterBehavior) = x.WithAttribute(ViewAttributes.MasterBehaviorAttribKey, (value))

        /// Adjusts the IsPresentedChanged property in the visual element
        member x.IsPresentedChanged(value: bool -> unit) = x.WithAttribute(ViewAttributes.IsPresentedChangedAttribKey, (fun f -> System.EventHandler(fun sender args -> f (sender :?> Xamarin.Forms.MasterDetailPage).IsPresented))(value))

        /// Adjusts the Accelerator property in the visual element
        member x.Accelerator(value: string) = x.WithAttribute(ViewAttributes.AcceleratorAttribKey, (value))

        /// Adjusts the Items property in the visual element
        member x.Items(value: ViewElement list) = x.WithAttribute(View._ItemsAttribKey, Array.ofList(value))

        /// Adjusts the TextDetail property in the visual element
        member x.TextDetail(value: string) = x.WithAttribute(ViewAttributes.TextDetailAttribKey, (value))

        /// Adjusts the TextDetailColor property in the visual element
        member x.TextDetailColor(value: Xamarin.Forms.Color) = x.WithAttribute(ViewAttributes.TextDetailColorAttribKey, (value))

        /// Adjusts the TextCellCommand property in the visual element
        member x.TextCellCommand(value: unit -> unit) = x.WithAttribute(ViewAttributes.TextCellCommandAttribKey, (value))

        /// Adjusts the TextCellCanExecute property in the visual element
        member x.TextCellCanExecute(value: bool) = x.WithAttribute(ViewAttributes.TextCellCanExecuteAttribKey, (value))

        /// Adjusts the Order property in the visual element
        member x.Order(value: Xamarin.Forms.ToolbarItemOrder) = x.WithAttribute(ViewAttributes.OrderAttribKey, (value))

        /// Adjusts the Priority property in the visual element
        member x.Priority(value: int) = x.WithAttribute(ViewAttributes.PriorityAttribKey, (value))

        /// Adjusts the View property in the visual element
        member x.View(value: ViewElement) = x.WithAttribute(ViewAttributes.ViewAttribKey, (value))

        /// Adjusts the ListViewItems property in the visual element
        member x.ListViewItems(value: seq<ViewElement>) = x.WithAttribute(ViewAttributes.ListViewItemsAttribKey, (value))

        /// Adjusts the Footer property in the visual element
        member x.Footer(value: System.Object) = x.WithAttribute(ViewAttributes.FooterAttribKey, (value))

        /// Adjusts the Header property in the visual element
        member x.Header(value: System.Object) = x.WithAttribute(ViewAttributes.HeaderAttribKey, (value))

        /// Adjusts the HeaderTemplate property in the visual element
        member x.HeaderTemplate(value: Xamarin.Forms.DataTemplate) = x.WithAttribute(ViewAttributes.HeaderTemplateAttribKey, (value))

        /// Adjusts the IsGroupingEnabled property in the visual element
        member x.IsGroupingEnabled(value: bool) = x.WithAttribute(ViewAttributes.IsGroupingEnabledAttribKey, (value))

        /// Adjusts the IsPullToRefreshEnabled property in the visual element
        member x.IsPullToRefreshEnabled(value: bool) = x.WithAttribute(ViewAttributes.IsPullToRefreshEnabledAttribKey, (value))

        /// Adjusts the IsRefreshing property in the visual element
        member x.IsRefreshing(value: bool) = x.WithAttribute(ViewAttributes.IsRefreshingAttribKey, (value))

        /// Adjusts the RefreshCommand property in the visual element
        member x.RefreshCommand(value: unit -> unit) = x.WithAttribute(ViewAttributes.RefreshCommandAttribKey, makeCommand(value))

        /// Adjusts the ListView_SelectedItem property in the visual element
        member x.ListView_SelectedItem(value: int option) = x.WithAttribute(ViewAttributes.ListView_SelectedItemAttribKey, (value))

        /// Adjusts the ListView_SeparatorVisibility property in the visual element
        member x.ListView_SeparatorVisibility(value: Xamarin.Forms.SeparatorVisibility) = x.WithAttribute(ViewAttributes.ListView_SeparatorVisibilityAttribKey, (value))

        /// Adjusts the ListView_SeparatorColor property in the visual element
        member x.ListView_SeparatorColor(value: Xamarin.Forms.Color) = x.WithAttribute(ViewAttributes.ListView_SeparatorColorAttribKey, (value))

        /// Adjusts the ListView_ItemAppearing property in the visual element
        member x.ListView_ItemAppearing(value: int -> unit) = x.WithAttribute(ViewAttributes.ListView_ItemAppearingAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.ItemVisibilityEventArgs>(fun sender args -> f (tryFindListViewItem sender args.Item).Value))(value))

        /// Adjusts the ListView_ItemDisappearing property in the visual element
        member x.ListView_ItemDisappearing(value: int -> unit) = x.WithAttribute(ViewAttributes.ListView_ItemDisappearingAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.ItemVisibilityEventArgs>(fun sender args -> f (tryFindListViewItem sender args.Item).Value))(value))

        /// Adjusts the ListView_ItemSelected property in the visual element
        member x.ListView_ItemSelected(value: int option -> unit) = x.WithAttribute(ViewAttributes.ListView_ItemSelectedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.SelectedItemChangedEventArgs>(fun sender args -> f (tryFindListViewItem sender args.SelectedItem)))(value))

        /// Adjusts the ListView_ItemTapped property in the visual element
        member x.ListView_ItemTapped(value: int -> unit) = x.WithAttribute(ViewAttributes.ListView_ItemTappedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.ItemTappedEventArgs>(fun sender args -> f (tryFindListViewItem sender args.Item).Value))(value))

        /// Adjusts the ListView_Refreshing property in the visual element
        member x.ListView_Refreshing(value: unit -> unit) = x.WithAttribute(ViewAttributes.ListView_RefreshingAttribKey, (fun f -> System.EventHandler(fun sender args -> f ()))(value))

        /// Adjusts the SelectionMode property in the visual element
        member x.SelectionMode(value: Xamarin.Forms.ListViewSelectionMode) = x.WithAttribute(ViewAttributes.SelectionModeAttribKey, (value))

        /// Adjusts the ListViewGrouped_ItemsSource property in the visual element
        member x.ListViewGrouped_ItemsSource(value: (string * ViewElement * ViewElement list) list) = x.WithAttribute(ViewAttributes.ListViewGrouped_ItemsSourceAttribKey, (fun es -> es |> Array.ofList |> Array.map (fun (g, e, l) -> (g, e, Array.ofList l)))(value))

        /// Adjusts the ListViewGrouped_ShowJumpList property in the visual element
        member x.ListViewGrouped_ShowJumpList(value: bool) = x.WithAttribute(ViewAttributes.ListViewGrouped_ShowJumpListAttribKey, (value))

        /// Adjusts the ListViewGrouped_SelectedItem property in the visual element
        member x.ListViewGrouped_SelectedItem(value: (int * int) option) = x.WithAttribute(ViewAttributes.ListViewGrouped_SelectedItemAttribKey, (value))

        /// Adjusts the SeparatorVisibility property in the visual element
        member x.SeparatorVisibility(value: Xamarin.Forms.SeparatorVisibility) = x.WithAttribute(ViewAttributes.SeparatorVisibilityAttribKey, (value))

        /// Adjusts the SeparatorColor property in the visual element
        member x.SeparatorColor(value: Xamarin.Forms.Color) = x.WithAttribute(ViewAttributes.SeparatorColorAttribKey, (value))

        /// Adjusts the ListViewGrouped_ItemAppearing property in the visual element
        member x.ListViewGrouped_ItemAppearing(value: int * int option -> unit) = x.WithAttribute(ViewAttributes.ListViewGrouped_ItemAppearingAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.ItemVisibilityEventArgs>(fun sender args -> f (tryFindGroupedListViewItemOrGroupItem sender args.Item).Value))(value))

        /// Adjusts the ListViewGrouped_ItemDisappearing property in the visual element
        member x.ListViewGrouped_ItemDisappearing(value: int * int option -> unit) = x.WithAttribute(ViewAttributes.ListViewGrouped_ItemDisappearingAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.ItemVisibilityEventArgs>(fun sender args -> f (tryFindGroupedListViewItemOrGroupItem sender args.Item).Value))(value))

        /// Adjusts the ListViewGrouped_ItemSelected property in the visual element
        member x.ListViewGrouped_ItemSelected(value: (int * int) option -> unit) = x.WithAttribute(ViewAttributes.ListViewGrouped_ItemSelectedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.SelectedItemChangedEventArgs>(fun sender args -> f (tryFindGroupedListViewItem sender args.SelectedItem)))(value))

        /// Adjusts the ListViewGrouped_ItemTapped property in the visual element
        member x.ListViewGrouped_ItemTapped(value: int * int -> unit) = x.WithAttribute(ViewAttributes.ListViewGrouped_ItemTappedAttribKey, (fun f -> System.EventHandler<Xamarin.Forms.ItemTappedEventArgs>(fun sender args -> f (tryFindGroupedListViewItem sender args.Item).Value))(value))

        /// Adjusts the Refreshing property in the visual element
        member x.Refreshing(value: unit -> unit) = x.WithAttribute(ViewAttributes.RefreshingAttribKey, (fun f -> System.EventHandler(fun sender args -> f ()))(value))

        member x.With(?classId: string, ?styleId: string, ?automationId: string, ?anchorX: double, ?anchorY: double, 
                      ?backgroundColor: Xamarin.Forms.Color, ?heightRequest: double, ?inputTransparent: bool, ?isEnabled: bool, ?isVisible: bool, 
                      ?minimumHeightRequest: double, ?minimumWidthRequest: double, ?opacity: double, ?rotation: double, ?rotationX: double, 
                      ?rotationY: double, ?scale: double, ?style: Xamarin.Forms.Style, ?styleClass: obj, ?translationX: double, 
                      ?translationY: double, ?widthRequest: double, ?resources: (string * obj) list, ?styles: Xamarin.Forms.Style list, ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list, 
                      ?isTabStop: bool, ?scaleX: double, ?scaleY: double, ?tabIndex: int, ?childrenReordered: System.EventArgs -> unit, 
                      ?measureInvalidated: System.EventArgs -> unit, ?focused: Xamarin.Forms.FocusEventArgs -> unit, ?sizeChanged: System.EventArgs -> unit, ?unfocused: Xamarin.Forms.FocusEventArgs -> unit, ?horizontalOptions: Xamarin.Forms.LayoutOptions, 
                      ?verticalOptions: Xamarin.Forms.LayoutOptions, ?margin: obj, ?gestureRecognizers: ViewElement list, ?touchPoints: int, ?panUpdated: Xamarin.Forms.PanUpdatedEventArgs -> unit, 
                      ?command: unit -> unit, ?numberOfTapsRequired: int, ?numberOfClicksRequired: int, ?buttons: Xamarin.Forms.ButtonsMask, ?isPinching: bool, 
                      ?pinchUpdated: Xamarin.Forms.PinchGestureUpdatedEventArgs -> unit, ?swipeGestureRecognizerDirection: Xamarin.Forms.SwipeDirection, ?threshold: System.UInt32, ?swiped: Xamarin.Forms.SwipedEventArgs -> unit, ?color: Xamarin.Forms.Color, 
                      ?isRunning: bool, ?boxViewCornerRadius: Xamarin.Forms.CornerRadius, ?progress: double, ?isClippedToBounds: bool, ?padding: obj, 
                      ?content: ViewElement, ?scrollOrientation: Xamarin.Forms.ScrollOrientation, ?horizontalScrollBarVisibility: Xamarin.Forms.ScrollBarVisibility, ?verticalScrollBarVisibility: Xamarin.Forms.ScrollBarVisibility, ?scrollTo: float * float * Fabulous.DynamicViews.AnimationKind, 
                      ?scrolled: Xamarin.Forms.ScrolledEventArgs -> unit, ?cancelButtonColor: Xamarin.Forms.Color, ?fontFamily: string, ?fontAttributes: Xamarin.Forms.FontAttributes, ?fontSize: obj, 
                      ?horizontalTextAlignment: Xamarin.Forms.TextAlignment, ?placeholder: string, ?placeholderColor: Xamarin.Forms.Color, ?searchBarCommand: string -> unit, ?searchBarCanExecute: bool, 
                      ?text: string, ?textColor: Xamarin.Forms.Color, ?searchBarTextChanged: Xamarin.Forms.TextChangedEventArgs -> unit, ?buttonCommand: unit -> unit, ?buttonCanExecute: bool, 
                      ?borderColor: Xamarin.Forms.Color, ?borderWidth: double, ?commandParameter: System.Object, ?contentLayout: Xamarin.Forms.Button.ButtonContentLayout, ?buttonCornerRadius: int, 
                      ?buttonImageSource: string, ?minimumMaximum: float * float, ?value: double, ?valueChanged: Xamarin.Forms.ValueChangedEventArgs -> unit, ?increment: double, 
                      ?isToggled: bool, ?toggled: Xamarin.Forms.ToggledEventArgs -> unit, ?onColor: Xamarin.Forms.Color, ?height: double, ?on: bool, 
                      ?onChanged: Xamarin.Forms.ToggledEventArgs -> unit, ?intent: Xamarin.Forms.TableIntent, ?hasUnevenRows: bool, ?rowHeight: int, ?tableRoot: (string * ViewElement list) list, 
                      ?rowDefinitionHeight: obj, ?columnDefinitionWidth: obj, ?gridRowDefinitions: obj list, ?gridColumnDefinitions: obj list, ?rowSpacing: double, 
                      ?columnSpacing: double, ?children: ViewElement list, ?gridRow: int, ?gridRowSpan: int, ?gridColumn: int, 
                      ?gridColumnSpan: int, ?layoutBounds: Xamarin.Forms.Rectangle, ?layoutFlags: Xamarin.Forms.AbsoluteLayoutFlags, ?boundsConstraint: Xamarin.Forms.BoundsConstraint, ?heightConstraint: Xamarin.Forms.Constraint, 
                      ?widthConstraint: Xamarin.Forms.Constraint, ?xConstraint: Xamarin.Forms.Constraint, ?yConstraint: Xamarin.Forms.Constraint, ?alignContent: Xamarin.Forms.FlexAlignContent, ?alignItems: Xamarin.Forms.FlexAlignItems, 
                      ?flexLayoutDirection: Xamarin.Forms.FlexDirection, ?position: Xamarin.Forms.FlexPosition, ?wrap: Xamarin.Forms.FlexWrap, ?justifyContent: Xamarin.Forms.FlexJustify, ?flexAlignSelf: Xamarin.Forms.FlexAlignSelf, 
                      ?flexOrder: int, ?flexBasis: Xamarin.Forms.FlexBasis, ?flexGrow: double, ?flexShrink: double, ?date: System.DateTime, 
                      ?format: string, ?minimumDate: System.DateTime, ?maximumDate: System.DateTime, ?dateSelected: Xamarin.Forms.DateChangedEventArgs -> unit, ?pickerItemsSource: seq<'T>, 
                      ?selectedIndex: int, ?title: string, ?selectedIndexChanged: (int * 'T option) -> unit, ?frameCornerRadius: double, ?hasShadow: bool, 
                      ?imageSource: obj, ?aspect: Xamarin.Forms.Aspect, ?isOpaque: bool, ?imageButtonCommand: unit -> unit, ?imageButtonCornerRadius: int, 
                      ?clicked: System.EventArgs -> unit, ?pressed: System.EventArgs -> unit, ?released: System.EventArgs -> unit, ?keyboard: Xamarin.Forms.Keyboard, ?editorCompleted: string -> unit, 
                      ?textChanged: Xamarin.Forms.TextChangedEventArgs -> unit, ?autoSize: Xamarin.Forms.EditorAutoSizeOption, ?isPassword: bool, ?entryCompleted: string -> unit, ?isTextPredictionEnabled: bool, 
                      ?returnType: Xamarin.Forms.ReturnType, ?returnCommand: unit -> unit, ?cursorPosition: int, ?selectionLength: int, ?label: string, 
                      ?entryCellTextChanged: Xamarin.Forms.TextChangedEventArgs -> unit, ?verticalTextAlignment: Xamarin.Forms.TextAlignment, ?formattedText: ViewElement, ?lineBreakMode: Xamarin.Forms.LineBreakMode, ?lineHeight: double, 
                      ?maxLines: int, ?textDecorations: Xamarin.Forms.TextDecorations, ?stackOrientation: Xamarin.Forms.StackOrientation, ?spacing: double, ?foregroundColor: Xamarin.Forms.Color, 
                      ?propertyChanged: System.ComponentModel.PropertyChangedEventArgs -> unit, ?spans: ViewElement[], ?time: System.TimeSpan, ?webSource: Xamarin.Forms.WebViewSource, ?reload: bool, 
                      ?navigated: Xamarin.Forms.WebNavigatedEventArgs -> unit, ?navigating: Xamarin.Forms.WebNavigatingEventArgs -> unit, ?reloadRequested: System.EventArgs -> unit, ?backgroundImage: string, ?icon: string, 
                      ?isBusy: bool, ?toolbarItems: ViewElement list, ?useSafeArea: bool, ?page_Appearing: unit -> unit, ?page_Disappearing: unit -> unit, 
                      ?page_LayoutChanged: unit -> unit, ?carouselPage_CurrentPage: int, ?carouselPage_CurrentPageChanged: int option -> unit, ?pages: ViewElement list, ?backButtonTitle: string, 
                      ?hasBackButton: bool, ?hasNavigationBar: bool, ?titleIcon: string, ?titleView: ViewElement, ?barBackgroundColor: Xamarin.Forms.Color, 
                      ?barTextColor: Xamarin.Forms.Color, ?popped: Xamarin.Forms.NavigationEventArgs -> unit, ?poppedToRoot: Xamarin.Forms.NavigationEventArgs -> unit, ?pushed: Xamarin.Forms.NavigationEventArgs -> unit, ?tabbedPage_CurrentPage: int, 
                      ?tabbedPage_CurrentPageChanged: int option -> unit, ?onSizeAllocatedCallback: (double * double) -> unit, ?master: ViewElement, ?detail: ViewElement, ?isGestureEnabled: bool, 
                      ?isPresented: bool, ?masterBehavior: Xamarin.Forms.MasterBehavior, ?isPresentedChanged: bool -> unit, ?accelerator: string, ?textDetail: string, 
                      ?textDetailColor: Xamarin.Forms.Color, ?textCellCommand: unit -> unit, ?textCellCanExecute: bool, ?order: Xamarin.Forms.ToolbarItemOrder, ?priority: int, 
                      ?view: ViewElement, ?listViewItems: seq<ViewElement>, ?footer: System.Object, ?header: System.Object, ?headerTemplate: Xamarin.Forms.DataTemplate, 
                      ?isGroupingEnabled: bool, ?isPullToRefreshEnabled: bool, ?isRefreshing: bool, ?refreshCommand: unit -> unit, ?listView_SelectedItem: int option, 
                      ?listView_SeparatorVisibility: Xamarin.Forms.SeparatorVisibility, ?listView_SeparatorColor: Xamarin.Forms.Color, ?listView_ItemAppearing: int -> unit, ?listView_ItemDisappearing: int -> unit, ?listView_ItemSelected: int option -> unit, 
                      ?listView_ItemTapped: int -> unit, ?listView_Refreshing: unit -> unit, ?selectionMode: Xamarin.Forms.ListViewSelectionMode, ?listViewGrouped_ItemsSource: (string * ViewElement * ViewElement list) list, ?listViewGrouped_ShowJumpList: bool, 
                      ?listViewGrouped_SelectedItem: (int * int) option, ?separatorVisibility: Xamarin.Forms.SeparatorVisibility, ?separatorColor: Xamarin.Forms.Color, ?listViewGrouped_ItemAppearing: int * int option -> unit, ?listViewGrouped_ItemDisappearing: int * int option -> unit, 
                      ?listViewGrouped_ItemSelected: (int * int) option -> unit, ?listViewGrouped_ItemTapped: int * int -> unit, ?refreshing: unit -> unit) =
            let x = match classId with None -> x | Some opt -> x.ClassId(opt)
            let x = match styleId with None -> x | Some opt -> x.StyleId(opt)
            let x = match automationId with None -> x | Some opt -> x.AutomationId(opt)
            let x = match anchorX with None -> x | Some opt -> x.AnchorX(opt)
            let x = match anchorY with None -> x | Some opt -> x.AnchorY(opt)
            let x = match backgroundColor with None -> x | Some opt -> x.BackgroundColor(opt)
            let x = match heightRequest with None -> x | Some opt -> x.HeightRequest(opt)
            let x = match inputTransparent with None -> x | Some opt -> x.InputTransparent(opt)
            let x = match isEnabled with None -> x | Some opt -> x.IsEnabled(opt)
            let x = match isVisible with None -> x | Some opt -> x.IsVisible(opt)
            let x = match minimumHeightRequest with None -> x | Some opt -> x.MinimumHeightRequest(opt)
            let x = match minimumWidthRequest with None -> x | Some opt -> x.MinimumWidthRequest(opt)
            let x = match opacity with None -> x | Some opt -> x.Opacity(opt)
            let x = match rotation with None -> x | Some opt -> x.Rotation(opt)
            let x = match rotationX with None -> x | Some opt -> x.RotationX(opt)
            let x = match rotationY with None -> x | Some opt -> x.RotationY(opt)
            let x = match scale with None -> x | Some opt -> x.Scale(opt)
            let x = match style with None -> x | Some opt -> x.Style(opt)
            let x = match styleClass with None -> x | Some opt -> x.StyleClass(opt)
            let x = match translationX with None -> x | Some opt -> x.TranslationX(opt)
            let x = match translationY with None -> x | Some opt -> x.TranslationY(opt)
            let x = match widthRequest with None -> x | Some opt -> x.WidthRequest(opt)
            let x = match resources with None -> x | Some opt -> x.Resources(opt)
            let x = match styles with None -> x | Some opt -> x.Styles(opt)
            let x = match styleSheets with None -> x | Some opt -> x.StyleSheets(opt)
            let x = match isTabStop with None -> x | Some opt -> x.IsTabStop(opt)
            let x = match scaleX with None -> x | Some opt -> x.ScaleX(opt)
            let x = match scaleY with None -> x | Some opt -> x.ScaleY(opt)
            let x = match tabIndex with None -> x | Some opt -> x.TabIndex(opt)
            let x = match childrenReordered with None -> x | Some opt -> x.ChildrenReordered(opt)
            let x = match measureInvalidated with None -> x | Some opt -> x.MeasureInvalidated(opt)
            let x = match focused with None -> x | Some opt -> x.Focused(opt)
            let x = match sizeChanged with None -> x | Some opt -> x.SizeChanged(opt)
            let x = match unfocused with None -> x | Some opt -> x.Unfocused(opt)
            let x = match horizontalOptions with None -> x | Some opt -> x.HorizontalOptions(opt)
            let x = match verticalOptions with None -> x | Some opt -> x.VerticalOptions(opt)
            let x = match margin with None -> x | Some opt -> x.Margin(opt)
            let x = match gestureRecognizers with None -> x | Some opt -> x.GestureRecognizers(opt)
            let x = match touchPoints with None -> x | Some opt -> x.TouchPoints(opt)
            let x = match panUpdated with None -> x | Some opt -> x.PanUpdated(opt)
            let x = match command with None -> x | Some opt -> x.Command(opt)
            let x = match numberOfTapsRequired with None -> x | Some opt -> x.NumberOfTapsRequired(opt)
            let x = match numberOfClicksRequired with None -> x | Some opt -> x.NumberOfClicksRequired(opt)
            let x = match buttons with None -> x | Some opt -> x.Buttons(opt)
            let x = match isPinching with None -> x | Some opt -> x.IsPinching(opt)
            let x = match pinchUpdated with None -> x | Some opt -> x.PinchUpdated(opt)
            let x = match swipeGestureRecognizerDirection with None -> x | Some opt -> x.SwipeGestureRecognizerDirection(opt)
            let x = match threshold with None -> x | Some opt -> x.Threshold(opt)
            let x = match swiped with None -> x | Some opt -> x.Swiped(opt)
            let x = match color with None -> x | Some opt -> x.Color(opt)
            let x = match isRunning with None -> x | Some opt -> x.IsRunning(opt)
            let x = match boxViewCornerRadius with None -> x | Some opt -> x.BoxViewCornerRadius(opt)
            let x = match progress with None -> x | Some opt -> x.Progress(opt)
            let x = match isClippedToBounds with None -> x | Some opt -> x.IsClippedToBounds(opt)
            let x = match padding with None -> x | Some opt -> x.Padding(opt)
            let x = match content with None -> x | Some opt -> x.Content(opt)
            let x = match scrollOrientation with None -> x | Some opt -> x.ScrollOrientation(opt)
            let x = match horizontalScrollBarVisibility with None -> x | Some opt -> x.HorizontalScrollBarVisibility(opt)
            let x = match verticalScrollBarVisibility with None -> x | Some opt -> x.VerticalScrollBarVisibility(opt)
            let x = match scrollTo with None -> x | Some opt -> x.ScrollTo(opt)
            let x = match scrolled with None -> x | Some opt -> x.Scrolled(opt)
            let x = match cancelButtonColor with None -> x | Some opt -> x.CancelButtonColor(opt)
            let x = match fontFamily with None -> x | Some opt -> x.FontFamily(opt)
            let x = match fontAttributes with None -> x | Some opt -> x.FontAttributes(opt)
            let x = match fontSize with None -> x | Some opt -> x.FontSize(opt)
            let x = match horizontalTextAlignment with None -> x | Some opt -> x.HorizontalTextAlignment(opt)
            let x = match placeholder with None -> x | Some opt -> x.Placeholder(opt)
            let x = match placeholderColor with None -> x | Some opt -> x.PlaceholderColor(opt)
            let x = match searchBarCommand with None -> x | Some opt -> x.SearchBarCommand(opt)
            let x = match searchBarCanExecute with None -> x | Some opt -> x.SearchBarCanExecute(opt)
            let x = match text with None -> x | Some opt -> x.Text(opt)
            let x = match textColor with None -> x | Some opt -> x.TextColor(opt)
            let x = match searchBarTextChanged with None -> x | Some opt -> x.SearchBarTextChanged(opt)
            let x = match buttonCommand with None -> x | Some opt -> x.ButtonCommand(opt)
            let x = match buttonCanExecute with None -> x | Some opt -> x.ButtonCanExecute(opt)
            let x = match borderColor with None -> x | Some opt -> x.BorderColor(opt)
            let x = match borderWidth with None -> x | Some opt -> x.BorderWidth(opt)
            let x = match commandParameter with None -> x | Some opt -> x.CommandParameter(opt)
            let x = match contentLayout with None -> x | Some opt -> x.ContentLayout(opt)
            let x = match buttonCornerRadius with None -> x | Some opt -> x.ButtonCornerRadius(opt)
            let x = match buttonImageSource with None -> x | Some opt -> x.ButtonImageSource(opt)
            let x = match minimumMaximum with None -> x | Some opt -> x.MinimumMaximum(opt)
            let x = match value with None -> x | Some opt -> x.Value(opt)
            let x = match valueChanged with None -> x | Some opt -> x.ValueChanged(opt)
            let x = match increment with None -> x | Some opt -> x.Increment(opt)
            let x = match isToggled with None -> x | Some opt -> x.IsToggled(opt)
            let x = match toggled with None -> x | Some opt -> x.Toggled(opt)
            let x = match onColor with None -> x | Some opt -> x.OnColor(opt)
            let x = match height with None -> x | Some opt -> x.Height(opt)
            let x = match on with None -> x | Some opt -> x.On(opt)
            let x = match onChanged with None -> x | Some opt -> x.OnChanged(opt)
            let x = match intent with None -> x | Some opt -> x.Intent(opt)
            let x = match hasUnevenRows with None -> x | Some opt -> x.HasUnevenRows(opt)
            let x = match rowHeight with None -> x | Some opt -> x.RowHeight(opt)
            let x = match tableRoot with None -> x | Some opt -> x.TableRoot(opt)
            let x = match rowDefinitionHeight with None -> x | Some opt -> x.RowDefinitionHeight(opt)
            let x = match columnDefinitionWidth with None -> x | Some opt -> x.ColumnDefinitionWidth(opt)
            let x = match gridRowDefinitions with None -> x | Some opt -> x.GridRowDefinitions(opt)
            let x = match gridColumnDefinitions with None -> x | Some opt -> x.GridColumnDefinitions(opt)
            let x = match rowSpacing with None -> x | Some opt -> x.RowSpacing(opt)
            let x = match columnSpacing with None -> x | Some opt -> x.ColumnSpacing(opt)
            let x = match children with None -> x | Some opt -> x.Children(opt)
            let x = match gridRow with None -> x | Some opt -> x.GridRow(opt)
            let x = match gridRowSpan with None -> x | Some opt -> x.GridRowSpan(opt)
            let x = match gridColumn with None -> x | Some opt -> x.GridColumn(opt)
            let x = match gridColumnSpan with None -> x | Some opt -> x.GridColumnSpan(opt)
            let x = match layoutBounds with None -> x | Some opt -> x.LayoutBounds(opt)
            let x = match layoutFlags with None -> x | Some opt -> x.LayoutFlags(opt)
            let x = match boundsConstraint with None -> x | Some opt -> x.BoundsConstraint(opt)
            let x = match heightConstraint with None -> x | Some opt -> x.HeightConstraint(opt)
            let x = match widthConstraint with None -> x | Some opt -> x.WidthConstraint(opt)
            let x = match xConstraint with None -> x | Some opt -> x.XConstraint(opt)
            let x = match yConstraint with None -> x | Some opt -> x.YConstraint(opt)
            let x = match alignContent with None -> x | Some opt -> x.AlignContent(opt)
            let x = match alignItems with None -> x | Some opt -> x.AlignItems(opt)
            let x = match flexLayoutDirection with None -> x | Some opt -> x.FlexLayoutDirection(opt)
            let x = match position with None -> x | Some opt -> x.Position(opt)
            let x = match wrap with None -> x | Some opt -> x.Wrap(opt)
            let x = match justifyContent with None -> x | Some opt -> x.JustifyContent(opt)
            let x = match flexAlignSelf with None -> x | Some opt -> x.FlexAlignSelf(opt)
            let x = match flexOrder with None -> x | Some opt -> x.FlexOrder(opt)
            let x = match flexBasis with None -> x | Some opt -> x.FlexBasis(opt)
            let x = match flexGrow with None -> x | Some opt -> x.FlexGrow(opt)
            let x = match flexShrink with None -> x | Some opt -> x.FlexShrink(opt)
            let x = match date with None -> x | Some opt -> x.Date(opt)
            let x = match format with None -> x | Some opt -> x.Format(opt)
            let x = match minimumDate with None -> x | Some opt -> x.MinimumDate(opt)
            let x = match maximumDate with None -> x | Some opt -> x.MaximumDate(opt)
            let x = match dateSelected with None -> x | Some opt -> x.DateSelected(opt)
            let x = match pickerItemsSource with None -> x | Some opt -> x.PickerItemsSource(opt)
            let x = match selectedIndex with None -> x | Some opt -> x.SelectedIndex(opt)
            let x = match title with None -> x | Some opt -> x.Title(opt)
            let x = match selectedIndexChanged with None -> x | Some opt -> x.SelectedIndexChanged(opt)
            let x = match frameCornerRadius with None -> x | Some opt -> x.FrameCornerRadius(opt)
            let x = match hasShadow with None -> x | Some opt -> x.HasShadow(opt)
            let x = match imageSource with None -> x | Some opt -> x.ImageSource(opt)
            let x = match aspect with None -> x | Some opt -> x.Aspect(opt)
            let x = match isOpaque with None -> x | Some opt -> x.IsOpaque(opt)
            let x = match imageButtonCommand with None -> x | Some opt -> x.ImageButtonCommand(opt)
            let x = match imageButtonCornerRadius with None -> x | Some opt -> x.ImageButtonCornerRadius(opt)
            let x = match clicked with None -> x | Some opt -> x.Clicked(opt)
            let x = match pressed with None -> x | Some opt -> x.Pressed(opt)
            let x = match released with None -> x | Some opt -> x.Released(opt)
            let x = match keyboard with None -> x | Some opt -> x.Keyboard(opt)
            let x = match editorCompleted with None -> x | Some opt -> x.EditorCompleted(opt)
            let x = match textChanged with None -> x | Some opt -> x.TextChanged(opt)
            let x = match autoSize with None -> x | Some opt -> x.AutoSize(opt)
            let x = match isPassword with None -> x | Some opt -> x.IsPassword(opt)
            let x = match entryCompleted with None -> x | Some opt -> x.EntryCompleted(opt)
            let x = match isTextPredictionEnabled with None -> x | Some opt -> x.IsTextPredictionEnabled(opt)
            let x = match returnType with None -> x | Some opt -> x.ReturnType(opt)
            let x = match returnCommand with None -> x | Some opt -> x.ReturnCommand(opt)
            let x = match cursorPosition with None -> x | Some opt -> x.CursorPosition(opt)
            let x = match selectionLength with None -> x | Some opt -> x.SelectionLength(opt)
            let x = match label with None -> x | Some opt -> x.Label(opt)
            let x = match entryCellTextChanged with None -> x | Some opt -> x.EntryCellTextChanged(opt)
            let x = match verticalTextAlignment with None -> x | Some opt -> x.VerticalTextAlignment(opt)
            let x = match formattedText with None -> x | Some opt -> x.FormattedText(opt)
            let x = match lineBreakMode with None -> x | Some opt -> x.LineBreakMode(opt)
            let x = match lineHeight with None -> x | Some opt -> x.LineHeight(opt)
            let x = match maxLines with None -> x | Some opt -> x.MaxLines(opt)
            let x = match textDecorations with None -> x | Some opt -> x.TextDecorations(opt)
            let x = match stackOrientation with None -> x | Some opt -> x.StackOrientation(opt)
            let x = match spacing with None -> x | Some opt -> x.Spacing(opt)
            let x = match foregroundColor with None -> x | Some opt -> x.ForegroundColor(opt)
            let x = match propertyChanged with None -> x | Some opt -> x.PropertyChanged(opt)
            let x = match spans with None -> x | Some opt -> x.Spans(opt)
            let x = match time with None -> x | Some opt -> x.Time(opt)
            let x = match webSource with None -> x | Some opt -> x.WebSource(opt)
            let x = match reload with None -> x | Some opt -> x.Reload(opt)
            let x = match navigated with None -> x | Some opt -> x.Navigated(opt)
            let x = match navigating with None -> x | Some opt -> x.Navigating(opt)
            let x = match reloadRequested with None -> x | Some opt -> x.ReloadRequested(opt)
            let x = match backgroundImage with None -> x | Some opt -> x.BackgroundImage(opt)
            let x = match icon with None -> x | Some opt -> x.Icon(opt)
            let x = match isBusy with None -> x | Some opt -> x.IsBusy(opt)
            let x = match toolbarItems with None -> x | Some opt -> x.ToolbarItems(opt)
            let x = match useSafeArea with None -> x | Some opt -> x.UseSafeArea(opt)
            let x = match page_Appearing with None -> x | Some opt -> x.Page_Appearing(opt)
            let x = match page_Disappearing with None -> x | Some opt -> x.Page_Disappearing(opt)
            let x = match page_LayoutChanged with None -> x | Some opt -> x.Page_LayoutChanged(opt)
            let x = match carouselPage_CurrentPage with None -> x | Some opt -> x.CarouselPage_CurrentPage(opt)
            let x = match carouselPage_CurrentPageChanged with None -> x | Some opt -> x.CarouselPage_CurrentPageChanged(opt)
            let x = match pages with None -> x | Some opt -> x.Pages(opt)
            let x = match backButtonTitle with None -> x | Some opt -> x.BackButtonTitle(opt)
            let x = match hasBackButton with None -> x | Some opt -> x.HasBackButton(opt)
            let x = match hasNavigationBar with None -> x | Some opt -> x.HasNavigationBar(opt)
            let x = match titleIcon with None -> x | Some opt -> x.TitleIcon(opt)
            let x = match titleView with None -> x | Some opt -> x.TitleView(opt)
            let x = match barBackgroundColor with None -> x | Some opt -> x.BarBackgroundColor(opt)
            let x = match barTextColor with None -> x | Some opt -> x.BarTextColor(opt)
            let x = match popped with None -> x | Some opt -> x.Popped(opt)
            let x = match poppedToRoot with None -> x | Some opt -> x.PoppedToRoot(opt)
            let x = match pushed with None -> x | Some opt -> x.Pushed(opt)
            let x = match tabbedPage_CurrentPage with None -> x | Some opt -> x.TabbedPage_CurrentPage(opt)
            let x = match tabbedPage_CurrentPageChanged with None -> x | Some opt -> x.TabbedPage_CurrentPageChanged(opt)
            let x = match onSizeAllocatedCallback with None -> x | Some opt -> x.OnSizeAllocatedCallback(opt)
            let x = match master with None -> x | Some opt -> x.Master(opt)
            let x = match detail with None -> x | Some opt -> x.Detail(opt)
            let x = match isGestureEnabled with None -> x | Some opt -> x.IsGestureEnabled(opt)
            let x = match isPresented with None -> x | Some opt -> x.IsPresented(opt)
            let x = match masterBehavior with None -> x | Some opt -> x.MasterBehavior(opt)
            let x = match isPresentedChanged with None -> x | Some opt -> x.IsPresentedChanged(opt)
            let x = match accelerator with None -> x | Some opt -> x.Accelerator(opt)
            let x = match textDetail with None -> x | Some opt -> x.TextDetail(opt)
            let x = match textDetailColor with None -> x | Some opt -> x.TextDetailColor(opt)
            let x = match textCellCommand with None -> x | Some opt -> x.TextCellCommand(opt)
            let x = match textCellCanExecute with None -> x | Some opt -> x.TextCellCanExecute(opt)
            let x = match order with None -> x | Some opt -> x.Order(opt)
            let x = match priority with None -> x | Some opt -> x.Priority(opt)
            let x = match view with None -> x | Some opt -> x.View(opt)
            let x = match listViewItems with None -> x | Some opt -> x.ListViewItems(opt)
            let x = match footer with None -> x | Some opt -> x.Footer(opt)
            let x = match header with None -> x | Some opt -> x.Header(opt)
            let x = match headerTemplate with None -> x | Some opt -> x.HeaderTemplate(opt)
            let x = match isGroupingEnabled with None -> x | Some opt -> x.IsGroupingEnabled(opt)
            let x = match isPullToRefreshEnabled with None -> x | Some opt -> x.IsPullToRefreshEnabled(opt)
            let x = match isRefreshing with None -> x | Some opt -> x.IsRefreshing(opt)
            let x = match refreshCommand with None -> x | Some opt -> x.RefreshCommand(opt)
            let x = match listView_SelectedItem with None -> x | Some opt -> x.ListView_SelectedItem(opt)
            let x = match listView_SeparatorVisibility with None -> x | Some opt -> x.ListView_SeparatorVisibility(opt)
            let x = match listView_SeparatorColor with None -> x | Some opt -> x.ListView_SeparatorColor(opt)
            let x = match listView_ItemAppearing with None -> x | Some opt -> x.ListView_ItemAppearing(opt)
            let x = match listView_ItemDisappearing with None -> x | Some opt -> x.ListView_ItemDisappearing(opt)
            let x = match listView_ItemSelected with None -> x | Some opt -> x.ListView_ItemSelected(opt)
            let x = match listView_ItemTapped with None -> x | Some opt -> x.ListView_ItemTapped(opt)
            let x = match listView_Refreshing with None -> x | Some opt -> x.ListView_Refreshing(opt)
            let x = match selectionMode with None -> x | Some opt -> x.SelectionMode(opt)
            let x = match listViewGrouped_ItemsSource with None -> x | Some opt -> x.ListViewGrouped_ItemsSource(opt)
            let x = match listViewGrouped_ShowJumpList with None -> x | Some opt -> x.ListViewGrouped_ShowJumpList(opt)
            let x = match listViewGrouped_SelectedItem with None -> x | Some opt -> x.ListViewGrouped_SelectedItem(opt)
            let x = match separatorVisibility with None -> x | Some opt -> x.SeparatorVisibility(opt)
            let x = match separatorColor with None -> x | Some opt -> x.SeparatorColor(opt)
            let x = match listViewGrouped_ItemAppearing with None -> x | Some opt -> x.ListViewGrouped_ItemAppearing(opt)
            let x = match listViewGrouped_ItemDisappearing with None -> x | Some opt -> x.ListViewGrouped_ItemDisappearing(opt)
            let x = match listViewGrouped_ItemSelected with None -> x | Some opt -> x.ListViewGrouped_ItemSelected(opt)
            let x = match listViewGrouped_ItemTapped with None -> x | Some opt -> x.ListViewGrouped_ItemTapped(opt)
            let x = match refreshing with None -> x | Some opt -> x.Refreshing(opt)
            x

    /// Adjusts the ClassId property in the visual element
    let classId (value: string) (x: ViewElement) = x.ClassId(value)
    /// Adjusts the StyleId property in the visual element
    let styleId (value: string) (x: ViewElement) = x.StyleId(value)
    /// Adjusts the AutomationId property in the visual element
    let automationId (value: string) (x: ViewElement) = x.AutomationId(value)
    /// Adjusts the AnchorX property in the visual element
    let anchorX (value: double) (x: ViewElement) = x.AnchorX(value)
    /// Adjusts the AnchorY property in the visual element
    let anchorY (value: double) (x: ViewElement) = x.AnchorY(value)
    /// Adjusts the BackgroundColor property in the visual element
    let backgroundColor (value: Xamarin.Forms.Color) (x: ViewElement) = x.BackgroundColor(value)
    /// Adjusts the HeightRequest property in the visual element
    let heightRequest (value: double) (x: ViewElement) = x.HeightRequest(value)
    /// Adjusts the InputTransparent property in the visual element
    let inputTransparent (value: bool) (x: ViewElement) = x.InputTransparent(value)
    /// Adjusts the IsEnabled property in the visual element
    let isEnabled (value: bool) (x: ViewElement) = x.IsEnabled(value)
    /// Adjusts the IsVisible property in the visual element
    let isVisible (value: bool) (x: ViewElement) = x.IsVisible(value)
    /// Adjusts the MinimumHeightRequest property in the visual element
    let minimumHeightRequest (value: double) (x: ViewElement) = x.MinimumHeightRequest(value)
    /// Adjusts the MinimumWidthRequest property in the visual element
    let minimumWidthRequest (value: double) (x: ViewElement) = x.MinimumWidthRequest(value)
    /// Adjusts the Opacity property in the visual element
    let opacity (value: double) (x: ViewElement) = x.Opacity(value)
    /// Adjusts the Rotation property in the visual element
    let rotation (value: double) (x: ViewElement) = x.Rotation(value)
    /// Adjusts the RotationX property in the visual element
    let rotationX (value: double) (x: ViewElement) = x.RotationX(value)
    /// Adjusts the RotationY property in the visual element
    let rotationY (value: double) (x: ViewElement) = x.RotationY(value)
    /// Adjusts the Scale property in the visual element
    let scale (value: double) (x: ViewElement) = x.Scale(value)
    /// Adjusts the Style property in the visual element
    let style (value: Xamarin.Forms.Style) (x: ViewElement) = x.Style(value)
    /// Adjusts the StyleClass property in the visual element
    let styleClass (value: obj) (x: ViewElement) = x.StyleClass(value)
    /// Adjusts the TranslationX property in the visual element
    let translationX (value: double) (x: ViewElement) = x.TranslationX(value)
    /// Adjusts the TranslationY property in the visual element
    let translationY (value: double) (x: ViewElement) = x.TranslationY(value)
    /// Adjusts the WidthRequest property in the visual element
    let widthRequest (value: double) (x: ViewElement) = x.WidthRequest(value)
    /// Adjusts the Resources property in the visual element
    let resources (value: (string * obj) list) (x: ViewElement) = x.Resources(value)
    /// Adjusts the Styles property in the visual element
    let styles (value: Xamarin.Forms.Style list) (x: ViewElement) = x.Styles(value)
    /// Adjusts the StyleSheets property in the visual element
    let styleSheets (value: Xamarin.Forms.StyleSheets.StyleSheet list) (x: ViewElement) = x.StyleSheets(value)
    /// Adjusts the IsTabStop property in the visual element
    let isTabStop (value: bool) (x: ViewElement) = x.IsTabStop(value)
    /// Adjusts the ScaleX property in the visual element
    let scaleX (value: double) (x: ViewElement) = x.ScaleX(value)
    /// Adjusts the ScaleY property in the visual element
    let scaleY (value: double) (x: ViewElement) = x.ScaleY(value)
    /// Adjusts the TabIndex property in the visual element
    let tabIndex (value: int) (x: ViewElement) = x.TabIndex(value)
    /// Adjusts the ChildrenReordered property in the visual element
    let childrenReordered (value: System.EventArgs -> unit) (x: ViewElement) = x.ChildrenReordered(value)
    /// Adjusts the MeasureInvalidated property in the visual element
    let measureInvalidated (value: System.EventArgs -> unit) (x: ViewElement) = x.MeasureInvalidated(value)
    /// Adjusts the Focused property in the visual element
    let focused (value: Xamarin.Forms.FocusEventArgs -> unit) (x: ViewElement) = x.Focused(value)
    /// Adjusts the SizeChanged property in the visual element
    let sizeChanged (value: System.EventArgs -> unit) (x: ViewElement) = x.SizeChanged(value)
    /// Adjusts the Unfocused property in the visual element
    let unfocused (value: Xamarin.Forms.FocusEventArgs -> unit) (x: ViewElement) = x.Unfocused(value)
    /// Adjusts the HorizontalOptions property in the visual element
    let horizontalOptions (value: Xamarin.Forms.LayoutOptions) (x: ViewElement) = x.HorizontalOptions(value)
    /// Adjusts the VerticalOptions property in the visual element
    let verticalOptions (value: Xamarin.Forms.LayoutOptions) (x: ViewElement) = x.VerticalOptions(value)
    /// Adjusts the Margin property in the visual element
    let margin (value: obj) (x: ViewElement) = x.Margin(value)
    /// Adjusts the GestureRecognizers property in the visual element
    let gestureRecognizers (value: ViewElement list) (x: ViewElement) = x.GestureRecognizers(value)
    /// Adjusts the TouchPoints property in the visual element
    let touchPoints (value: int) (x: ViewElement) = x.TouchPoints(value)
    /// Adjusts the PanUpdated property in the visual element
    let panUpdated (value: Xamarin.Forms.PanUpdatedEventArgs -> unit) (x: ViewElement) = x.PanUpdated(value)
    /// Adjusts the Command property in the visual element
    let command (value: unit -> unit) (x: ViewElement) = x.Command(value)
    /// Adjusts the NumberOfTapsRequired property in the visual element
    let numberOfTapsRequired (value: int) (x: ViewElement) = x.NumberOfTapsRequired(value)
    /// Adjusts the NumberOfClicksRequired property in the visual element
    let numberOfClicksRequired (value: int) (x: ViewElement) = x.NumberOfClicksRequired(value)
    /// Adjusts the Buttons property in the visual element
    let buttons (value: Xamarin.Forms.ButtonsMask) (x: ViewElement) = x.Buttons(value)
    /// Adjusts the IsPinching property in the visual element
    let isPinching (value: bool) (x: ViewElement) = x.IsPinching(value)
    /// Adjusts the PinchUpdated property in the visual element
    let pinchUpdated (value: Xamarin.Forms.PinchGestureUpdatedEventArgs -> unit) (x: ViewElement) = x.PinchUpdated(value)
    /// Adjusts the SwipeGestureRecognizerDirection property in the visual element
    let swipeGestureRecognizerDirection (value: Xamarin.Forms.SwipeDirection) (x: ViewElement) = x.SwipeGestureRecognizerDirection(value)
    /// Adjusts the Threshold property in the visual element
    let threshold (value: System.UInt32) (x: ViewElement) = x.Threshold(value)
    /// Adjusts the Swiped property in the visual element
    let swiped (value: Xamarin.Forms.SwipedEventArgs -> unit) (x: ViewElement) = x.Swiped(value)
    /// Adjusts the Color property in the visual element
    let color (value: Xamarin.Forms.Color) (x: ViewElement) = x.Color(value)
    /// Adjusts the IsRunning property in the visual element
    let isRunning (value: bool) (x: ViewElement) = x.IsRunning(value)
    /// Adjusts the BoxViewCornerRadius property in the visual element
    let boxViewCornerRadius (value: Xamarin.Forms.CornerRadius) (x: ViewElement) = x.BoxViewCornerRadius(value)
    /// Adjusts the Progress property in the visual element
    let progress (value: double) (x: ViewElement) = x.Progress(value)
    /// Adjusts the IsClippedToBounds property in the visual element
    let isClippedToBounds (value: bool) (x: ViewElement) = x.IsClippedToBounds(value)
    /// Adjusts the Padding property in the visual element
    let padding (value: obj) (x: ViewElement) = x.Padding(value)
    /// Adjusts the Content property in the visual element
    let content (value: ViewElement) (x: ViewElement) = x.Content(value)
    /// Adjusts the ScrollOrientation property in the visual element
    let scrollOrientation (value: Xamarin.Forms.ScrollOrientation) (x: ViewElement) = x.ScrollOrientation(value)
    /// Adjusts the HorizontalScrollBarVisibility property in the visual element
    let horizontalScrollBarVisibility (value: Xamarin.Forms.ScrollBarVisibility) (x: ViewElement) = x.HorizontalScrollBarVisibility(value)
    /// Adjusts the VerticalScrollBarVisibility property in the visual element
    let verticalScrollBarVisibility (value: Xamarin.Forms.ScrollBarVisibility) (x: ViewElement) = x.VerticalScrollBarVisibility(value)
    /// Adjusts the ScrollTo property in the visual element
    let scrollTo (value: float * float * Fabulous.DynamicViews.AnimationKind) (x: ViewElement) = x.ScrollTo(value)
    /// Adjusts the Scrolled property in the visual element
    let scrolled (value: Xamarin.Forms.ScrolledEventArgs -> unit) (x: ViewElement) = x.Scrolled(value)
    /// Adjusts the CancelButtonColor property in the visual element
    let cancelButtonColor (value: Xamarin.Forms.Color) (x: ViewElement) = x.CancelButtonColor(value)
    /// Adjusts the FontFamily property in the visual element
    let fontFamily (value: string) (x: ViewElement) = x.FontFamily(value)
    /// Adjusts the FontAttributes property in the visual element
    let fontAttributes (value: Xamarin.Forms.FontAttributes) (x: ViewElement) = x.FontAttributes(value)
    /// Adjusts the FontSize property in the visual element
    let fontSize (value: obj) (x: ViewElement) = x.FontSize(value)
    /// Adjusts the HorizontalTextAlignment property in the visual element
    let horizontalTextAlignment (value: Xamarin.Forms.TextAlignment) (x: ViewElement) = x.HorizontalTextAlignment(value)
    /// Adjusts the Placeholder property in the visual element
    let placeholder (value: string) (x: ViewElement) = x.Placeholder(value)
    /// Adjusts the PlaceholderColor property in the visual element
    let placeholderColor (value: Xamarin.Forms.Color) (x: ViewElement) = x.PlaceholderColor(value)
    /// Adjusts the SearchBarCommand property in the visual element
    let searchBarCommand (value: string -> unit) (x: ViewElement) = x.SearchBarCommand(value)
    /// Adjusts the SearchBarCanExecute property in the visual element
    let searchBarCanExecute (value: bool) (x: ViewElement) = x.SearchBarCanExecute(value)
    /// Adjusts the Text property in the visual element
    let text (value: string) (x: ViewElement) = x.Text(value)
    /// Adjusts the TextColor property in the visual element
    let textColor (value: Xamarin.Forms.Color) (x: ViewElement) = x.TextColor(value)
    /// Adjusts the SearchBarTextChanged property in the visual element
    let searchBarTextChanged (value: Xamarin.Forms.TextChangedEventArgs -> unit) (x: ViewElement) = x.SearchBarTextChanged(value)
    /// Adjusts the ButtonCommand property in the visual element
    let buttonCommand (value: unit -> unit) (x: ViewElement) = x.ButtonCommand(value)
    /// Adjusts the ButtonCanExecute property in the visual element
    let buttonCanExecute (value: bool) (x: ViewElement) = x.ButtonCanExecute(value)
    /// Adjusts the BorderColor property in the visual element
    let borderColor (value: Xamarin.Forms.Color) (x: ViewElement) = x.BorderColor(value)
    /// Adjusts the BorderWidth property in the visual element
    let borderWidth (value: double) (x: ViewElement) = x.BorderWidth(value)
    /// Adjusts the CommandParameter property in the visual element
    let commandParameter (value: System.Object) (x: ViewElement) = x.CommandParameter(value)
    /// Adjusts the ContentLayout property in the visual element
    let contentLayout (value: Xamarin.Forms.Button.ButtonContentLayout) (x: ViewElement) = x.ContentLayout(value)
    /// Adjusts the ButtonCornerRadius property in the visual element
    let buttonCornerRadius (value: int) (x: ViewElement) = x.ButtonCornerRadius(value)
    /// Adjusts the ButtonImageSource property in the visual element
    let buttonImageSource (value: string) (x: ViewElement) = x.ButtonImageSource(value)
    /// Adjusts the MinimumMaximum property in the visual element
    let minimumMaximum (value: float * float) (x: ViewElement) = x.MinimumMaximum(value)
    /// Adjusts the Value property in the visual element
    let value (value: double) (x: ViewElement) = x.Value(value)
    /// Adjusts the ValueChanged property in the visual element
    let valueChanged (value: Xamarin.Forms.ValueChangedEventArgs -> unit) (x: ViewElement) = x.ValueChanged(value)
    /// Adjusts the Increment property in the visual element
    let increment (value: double) (x: ViewElement) = x.Increment(value)
    /// Adjusts the IsToggled property in the visual element
    let isToggled (value: bool) (x: ViewElement) = x.IsToggled(value)
    /// Adjusts the Toggled property in the visual element
    let toggled (value: Xamarin.Forms.ToggledEventArgs -> unit) (x: ViewElement) = x.Toggled(value)
    /// Adjusts the OnColor property in the visual element
    let onColor (value: Xamarin.Forms.Color) (x: ViewElement) = x.OnColor(value)
    /// Adjusts the Height property in the visual element
    let height (value: double) (x: ViewElement) = x.Height(value)
    /// Adjusts the On property in the visual element
    let on (value: bool) (x: ViewElement) = x.On(value)
    /// Adjusts the OnChanged property in the visual element
    let onChanged (value: Xamarin.Forms.ToggledEventArgs -> unit) (x: ViewElement) = x.OnChanged(value)
    /// Adjusts the Intent property in the visual element
    let intent (value: Xamarin.Forms.TableIntent) (x: ViewElement) = x.Intent(value)
    /// Adjusts the HasUnevenRows property in the visual element
    let hasUnevenRows (value: bool) (x: ViewElement) = x.HasUnevenRows(value)
    /// Adjusts the RowHeight property in the visual element
    let rowHeight (value: int) (x: ViewElement) = x.RowHeight(value)
    /// Adjusts the TableRoot property in the visual element
    let tableRoot (value: (string * ViewElement list) list) (x: ViewElement) = x.TableRoot(value)
    /// Adjusts the RowDefinitionHeight property in the visual element
    let rowDefinitionHeight (value: obj) (x: ViewElement) = x.RowDefinitionHeight(value)
    /// Adjusts the ColumnDefinitionWidth property in the visual element
    let columnDefinitionWidth (value: obj) (x: ViewElement) = x.ColumnDefinitionWidth(value)
    /// Adjusts the GridRowDefinitions property in the visual element
    let gridRowDefinitions (value: obj list) (x: ViewElement) = x.GridRowDefinitions(value)
    /// Adjusts the GridColumnDefinitions property in the visual element
    let gridColumnDefinitions (value: obj list) (x: ViewElement) = x.GridColumnDefinitions(value)
    /// Adjusts the RowSpacing property in the visual element
    let rowSpacing (value: double) (x: ViewElement) = x.RowSpacing(value)
    /// Adjusts the ColumnSpacing property in the visual element
    let columnSpacing (value: double) (x: ViewElement) = x.ColumnSpacing(value)
    /// Adjusts the Children property in the visual element
    let children (value: ViewElement list) (x: ViewElement) = x.Children(value)
    /// Adjusts the GridRow property in the visual element
    let gridRow (value: int) (x: ViewElement) = x.GridRow(value)
    /// Adjusts the GridRowSpan property in the visual element
    let gridRowSpan (value: int) (x: ViewElement) = x.GridRowSpan(value)
    /// Adjusts the GridColumn property in the visual element
    let gridColumn (value: int) (x: ViewElement) = x.GridColumn(value)
    /// Adjusts the GridColumnSpan property in the visual element
    let gridColumnSpan (value: int) (x: ViewElement) = x.GridColumnSpan(value)
    /// Adjusts the LayoutBounds property in the visual element
    let layoutBounds (value: Xamarin.Forms.Rectangle) (x: ViewElement) = x.LayoutBounds(value)
    /// Adjusts the LayoutFlags property in the visual element
    let layoutFlags (value: Xamarin.Forms.AbsoluteLayoutFlags) (x: ViewElement) = x.LayoutFlags(value)
    /// Adjusts the BoundsConstraint property in the visual element
    let boundsConstraint (value: Xamarin.Forms.BoundsConstraint) (x: ViewElement) = x.BoundsConstraint(value)
    /// Adjusts the HeightConstraint property in the visual element
    let heightConstraint (value: Xamarin.Forms.Constraint) (x: ViewElement) = x.HeightConstraint(value)
    /// Adjusts the WidthConstraint property in the visual element
    let widthConstraint (value: Xamarin.Forms.Constraint) (x: ViewElement) = x.WidthConstraint(value)
    /// Adjusts the XConstraint property in the visual element
    let xConstraint (value: Xamarin.Forms.Constraint) (x: ViewElement) = x.XConstraint(value)
    /// Adjusts the YConstraint property in the visual element
    let yConstraint (value: Xamarin.Forms.Constraint) (x: ViewElement) = x.YConstraint(value)
    /// Adjusts the AlignContent property in the visual element
    let alignContent (value: Xamarin.Forms.FlexAlignContent) (x: ViewElement) = x.AlignContent(value)
    /// Adjusts the AlignItems property in the visual element
    let alignItems (value: Xamarin.Forms.FlexAlignItems) (x: ViewElement) = x.AlignItems(value)
    /// Adjusts the FlexLayoutDirection property in the visual element
    let flexLayoutDirection (value: Xamarin.Forms.FlexDirection) (x: ViewElement) = x.FlexLayoutDirection(value)
    /// Adjusts the Position property in the visual element
    let position (value: Xamarin.Forms.FlexPosition) (x: ViewElement) = x.Position(value)
    /// Adjusts the Wrap property in the visual element
    let wrap (value: Xamarin.Forms.FlexWrap) (x: ViewElement) = x.Wrap(value)
    /// Adjusts the JustifyContent property in the visual element
    let justifyContent (value: Xamarin.Forms.FlexJustify) (x: ViewElement) = x.JustifyContent(value)
    /// Adjusts the FlexAlignSelf property in the visual element
    let flexAlignSelf (value: Xamarin.Forms.FlexAlignSelf) (x: ViewElement) = x.FlexAlignSelf(value)
    /// Adjusts the FlexOrder property in the visual element
    let flexOrder (value: int) (x: ViewElement) = x.FlexOrder(value)
    /// Adjusts the FlexBasis property in the visual element
    let flexBasis (value: Xamarin.Forms.FlexBasis) (x: ViewElement) = x.FlexBasis(value)
    /// Adjusts the FlexGrow property in the visual element
    let flexGrow (value: double) (x: ViewElement) = x.FlexGrow(value)
    /// Adjusts the FlexShrink property in the visual element
    let flexShrink (value: double) (x: ViewElement) = x.FlexShrink(value)
    /// Adjusts the Date property in the visual element
    let date (value: System.DateTime) (x: ViewElement) = x.Date(value)
    /// Adjusts the Format property in the visual element
    let format (value: string) (x: ViewElement) = x.Format(value)
    /// Adjusts the MinimumDate property in the visual element
    let minimumDate (value: System.DateTime) (x: ViewElement) = x.MinimumDate(value)
    /// Adjusts the MaximumDate property in the visual element
    let maximumDate (value: System.DateTime) (x: ViewElement) = x.MaximumDate(value)
    /// Adjusts the DateSelected property in the visual element
    let dateSelected (value: Xamarin.Forms.DateChangedEventArgs -> unit) (x: ViewElement) = x.DateSelected(value)
    /// Adjusts the PickerItemsSource property in the visual element
    let pickerItemsSource (value: seq<'T>) (x: ViewElement) = x.PickerItemsSource(value)
    /// Adjusts the SelectedIndex property in the visual element
    let selectedIndex (value: int) (x: ViewElement) = x.SelectedIndex(value)
    /// Adjusts the Title property in the visual element
    let title (value: string) (x: ViewElement) = x.Title(value)
    /// Adjusts the SelectedIndexChanged property in the visual element
    let selectedIndexChanged (value: (int * 'T option) -> unit) (x: ViewElement) = x.SelectedIndexChanged(value)
    /// Adjusts the FrameCornerRadius property in the visual element
    let frameCornerRadius (value: double) (x: ViewElement) = x.FrameCornerRadius(value)
    /// Adjusts the HasShadow property in the visual element
    let hasShadow (value: bool) (x: ViewElement) = x.HasShadow(value)
    /// Adjusts the ImageSource property in the visual element
    let imageSource (value: obj) (x: ViewElement) = x.ImageSource(value)
    /// Adjusts the Aspect property in the visual element
    let aspect (value: Xamarin.Forms.Aspect) (x: ViewElement) = x.Aspect(value)
    /// Adjusts the IsOpaque property in the visual element
    let isOpaque (value: bool) (x: ViewElement) = x.IsOpaque(value)
    /// Adjusts the ImageButtonCommand property in the visual element
    let imageButtonCommand (value: unit -> unit) (x: ViewElement) = x.ImageButtonCommand(value)
    /// Adjusts the ImageButtonCornerRadius property in the visual element
    let imageButtonCornerRadius (value: int) (x: ViewElement) = x.ImageButtonCornerRadius(value)
    /// Adjusts the Clicked property in the visual element
    let clicked (value: System.EventArgs -> unit) (x: ViewElement) = x.Clicked(value)
    /// Adjusts the Pressed property in the visual element
    let pressed (value: System.EventArgs -> unit) (x: ViewElement) = x.Pressed(value)
    /// Adjusts the Released property in the visual element
    let released (value: System.EventArgs -> unit) (x: ViewElement) = x.Released(value)
    /// Adjusts the Keyboard property in the visual element
    let keyboard (value: Xamarin.Forms.Keyboard) (x: ViewElement) = x.Keyboard(value)
    /// Adjusts the EditorCompleted property in the visual element
    let editorCompleted (value: string -> unit) (x: ViewElement) = x.EditorCompleted(value)
    /// Adjusts the TextChanged property in the visual element
    let textChanged (value: Xamarin.Forms.TextChangedEventArgs -> unit) (x: ViewElement) = x.TextChanged(value)
    /// Adjusts the AutoSize property in the visual element
    let autoSize (value: Xamarin.Forms.EditorAutoSizeOption) (x: ViewElement) = x.AutoSize(value)
    /// Adjusts the IsPassword property in the visual element
    let isPassword (value: bool) (x: ViewElement) = x.IsPassword(value)
    /// Adjusts the EntryCompleted property in the visual element
    let entryCompleted (value: string -> unit) (x: ViewElement) = x.EntryCompleted(value)
    /// Adjusts the IsTextPredictionEnabled property in the visual element
    let isTextPredictionEnabled (value: bool) (x: ViewElement) = x.IsTextPredictionEnabled(value)
    /// Adjusts the ReturnType property in the visual element
    let returnType (value: Xamarin.Forms.ReturnType) (x: ViewElement) = x.ReturnType(value)
    /// Adjusts the ReturnCommand property in the visual element
    let returnCommand (value: unit -> unit) (x: ViewElement) = x.ReturnCommand(value)
    /// Adjusts the CursorPosition property in the visual element
    let cursorPosition (value: int) (x: ViewElement) = x.CursorPosition(value)
    /// Adjusts the SelectionLength property in the visual element
    let selectionLength (value: int) (x: ViewElement) = x.SelectionLength(value)
    /// Adjusts the Label property in the visual element
    let label (value: string) (x: ViewElement) = x.Label(value)
    /// Adjusts the EntryCellTextChanged property in the visual element
    let entryCellTextChanged (value: Xamarin.Forms.TextChangedEventArgs -> unit) (x: ViewElement) = x.EntryCellTextChanged(value)
    /// Adjusts the VerticalTextAlignment property in the visual element
    let verticalTextAlignment (value: Xamarin.Forms.TextAlignment) (x: ViewElement) = x.VerticalTextAlignment(value)
    /// Adjusts the FormattedText property in the visual element
    let formattedText (value: ViewElement) (x: ViewElement) = x.FormattedText(value)
    /// Adjusts the LineBreakMode property in the visual element
    let lineBreakMode (value: Xamarin.Forms.LineBreakMode) (x: ViewElement) = x.LineBreakMode(value)
    /// Adjusts the LineHeight property in the visual element
    let lineHeight (value: double) (x: ViewElement) = x.LineHeight(value)
    /// Adjusts the MaxLines property in the visual element
    let maxLines (value: int) (x: ViewElement) = x.MaxLines(value)
    /// Adjusts the TextDecorations property in the visual element
    let textDecorations (value: Xamarin.Forms.TextDecorations) (x: ViewElement) = x.TextDecorations(value)
    /// Adjusts the StackOrientation property in the visual element
    let stackOrientation (value: Xamarin.Forms.StackOrientation) (x: ViewElement) = x.StackOrientation(value)
    /// Adjusts the Spacing property in the visual element
    let spacing (value: double) (x: ViewElement) = x.Spacing(value)
    /// Adjusts the ForegroundColor property in the visual element
    let foregroundColor (value: Xamarin.Forms.Color) (x: ViewElement) = x.ForegroundColor(value)
    /// Adjusts the PropertyChanged property in the visual element
    let propertyChanged (value: System.ComponentModel.PropertyChangedEventArgs -> unit) (x: ViewElement) = x.PropertyChanged(value)
    /// Adjusts the Spans property in the visual element
    let spans (value: ViewElement[]) (x: ViewElement) = x.Spans(value)
    /// Adjusts the Time property in the visual element
    let time (value: System.TimeSpan) (x: ViewElement) = x.Time(value)
    /// Adjusts the WebSource property in the visual element
    let webSource (value: Xamarin.Forms.WebViewSource) (x: ViewElement) = x.WebSource(value)
    /// Adjusts the Reload property in the visual element
    let reload (value: bool) (x: ViewElement) = x.Reload(value)
    /// Adjusts the Navigated property in the visual element
    let navigated (value: Xamarin.Forms.WebNavigatedEventArgs -> unit) (x: ViewElement) = x.Navigated(value)
    /// Adjusts the Navigating property in the visual element
    let navigating (value: Xamarin.Forms.WebNavigatingEventArgs -> unit) (x: ViewElement) = x.Navigating(value)
    /// Adjusts the ReloadRequested property in the visual element
    let reloadRequested (value: System.EventArgs -> unit) (x: ViewElement) = x.ReloadRequested(value)
    /// Adjusts the BackgroundImage property in the visual element
    let backgroundImage (value: string) (x: ViewElement) = x.BackgroundImage(value)
    /// Adjusts the Icon property in the visual element
    let icon (value: string) (x: ViewElement) = x.Icon(value)
    /// Adjusts the IsBusy property in the visual element
    let isBusy (value: bool) (x: ViewElement) = x.IsBusy(value)
    /// Adjusts the ToolbarItems property in the visual element
    let toolbarItems (value: ViewElement list) (x: ViewElement) = x.ToolbarItems(value)
    /// Adjusts the UseSafeArea property in the visual element
    let useSafeArea (value: bool) (x: ViewElement) = x.UseSafeArea(value)
    /// Adjusts the Page_Appearing property in the visual element
    let page_Appearing (value: unit -> unit) (x: ViewElement) = x.Page_Appearing(value)
    /// Adjusts the Page_Disappearing property in the visual element
    let page_Disappearing (value: unit -> unit) (x: ViewElement) = x.Page_Disappearing(value)
    /// Adjusts the Page_LayoutChanged property in the visual element
    let page_LayoutChanged (value: unit -> unit) (x: ViewElement) = x.Page_LayoutChanged(value)
    /// Adjusts the CarouselPage_CurrentPage property in the visual element
    let carouselPage_CurrentPage (value: int) (x: ViewElement) = x.CarouselPage_CurrentPage(value)
    /// Adjusts the CarouselPage_CurrentPageChanged property in the visual element
    let carouselPage_CurrentPageChanged (value: int option -> unit) (x: ViewElement) = x.CarouselPage_CurrentPageChanged(value)
    /// Adjusts the Pages property in the visual element
    let pages (value: ViewElement list) (x: ViewElement) = x.Pages(value)
    /// Adjusts the BackButtonTitle property in the visual element
    let backButtonTitle (value: string) (x: ViewElement) = x.BackButtonTitle(value)
    /// Adjusts the HasBackButton property in the visual element
    let hasBackButton (value: bool) (x: ViewElement) = x.HasBackButton(value)
    /// Adjusts the HasNavigationBar property in the visual element
    let hasNavigationBar (value: bool) (x: ViewElement) = x.HasNavigationBar(value)
    /// Adjusts the TitleIcon property in the visual element
    let titleIcon (value: string) (x: ViewElement) = x.TitleIcon(value)
    /// Adjusts the TitleView property in the visual element
    let titleView (value: ViewElement) (x: ViewElement) = x.TitleView(value)
    /// Adjusts the BarBackgroundColor property in the visual element
    let barBackgroundColor (value: Xamarin.Forms.Color) (x: ViewElement) = x.BarBackgroundColor(value)
    /// Adjusts the BarTextColor property in the visual element
    let barTextColor (value: Xamarin.Forms.Color) (x: ViewElement) = x.BarTextColor(value)
    /// Adjusts the Popped property in the visual element
    let popped (value: Xamarin.Forms.NavigationEventArgs -> unit) (x: ViewElement) = x.Popped(value)
    /// Adjusts the PoppedToRoot property in the visual element
    let poppedToRoot (value: Xamarin.Forms.NavigationEventArgs -> unit) (x: ViewElement) = x.PoppedToRoot(value)
    /// Adjusts the Pushed property in the visual element
    let pushed (value: Xamarin.Forms.NavigationEventArgs -> unit) (x: ViewElement) = x.Pushed(value)
    /// Adjusts the TabbedPage_CurrentPage property in the visual element
    let tabbedPage_CurrentPage (value: int) (x: ViewElement) = x.TabbedPage_CurrentPage(value)
    /// Adjusts the TabbedPage_CurrentPageChanged property in the visual element
    let tabbedPage_CurrentPageChanged (value: int option -> unit) (x: ViewElement) = x.TabbedPage_CurrentPageChanged(value)
    /// Adjusts the OnSizeAllocatedCallback property in the visual element
    let onSizeAllocatedCallback (value: (double * double) -> unit) (x: ViewElement) = x.OnSizeAllocatedCallback(value)
    /// Adjusts the Master property in the visual element
    let master (value: ViewElement) (x: ViewElement) = x.Master(value)
    /// Adjusts the Detail property in the visual element
    let detail (value: ViewElement) (x: ViewElement) = x.Detail(value)
    /// Adjusts the IsGestureEnabled property in the visual element
    let isGestureEnabled (value: bool) (x: ViewElement) = x.IsGestureEnabled(value)
    /// Adjusts the IsPresented property in the visual element
    let isPresented (value: bool) (x: ViewElement) = x.IsPresented(value)
    /// Adjusts the MasterBehavior property in the visual element
    let masterBehavior (value: Xamarin.Forms.MasterBehavior) (x: ViewElement) = x.MasterBehavior(value)
    /// Adjusts the IsPresentedChanged property in the visual element
    let isPresentedChanged (value: bool -> unit) (x: ViewElement) = x.IsPresentedChanged(value)
    /// Adjusts the Accelerator property in the visual element
    let accelerator (value: string) (x: ViewElement) = x.Accelerator(value)
<<<<<<< master
=======

    /// Adjusts the Items property in the visual element
    let items (value: ViewElement list) (x: ViewElement) = x.Items(value)

>>>>>>> first doings
    /// Adjusts the TextDetail property in the visual element
    let textDetail (value: string) (x: ViewElement) = x.TextDetail(value)
    /// Adjusts the TextDetailColor property in the visual element
    let textDetailColor (value: Xamarin.Forms.Color) (x: ViewElement) = x.TextDetailColor(value)
    /// Adjusts the TextCellCommand property in the visual element
    let textCellCommand (value: unit -> unit) (x: ViewElement) = x.TextCellCommand(value)
    /// Adjusts the TextCellCanExecute property in the visual element
    let textCellCanExecute (value: bool) (x: ViewElement) = x.TextCellCanExecute(value)
    /// Adjusts the Order property in the visual element
    let order (value: Xamarin.Forms.ToolbarItemOrder) (x: ViewElement) = x.Order(value)
    /// Adjusts the Priority property in the visual element
    let priority (value: int) (x: ViewElement) = x.Priority(value)
    /// Adjusts the View property in the visual element
    let view (value: ViewElement) (x: ViewElement) = x.View(value)
    /// Adjusts the ListViewItems property in the visual element
    let listViewItems (value: seq<ViewElement>) (x: ViewElement) = x.ListViewItems(value)
    /// Adjusts the Footer property in the visual element
    let footer (value: System.Object) (x: ViewElement) = x.Footer(value)
    /// Adjusts the Header property in the visual element
    let header (value: System.Object) (x: ViewElement) = x.Header(value)
    /// Adjusts the HeaderTemplate property in the visual element
    let headerTemplate (value: Xamarin.Forms.DataTemplate) (x: ViewElement) = x.HeaderTemplate(value)
    /// Adjusts the IsGroupingEnabled property in the visual element
    let isGroupingEnabled (value: bool) (x: ViewElement) = x.IsGroupingEnabled(value)
    /// Adjusts the IsPullToRefreshEnabled property in the visual element
    let isPullToRefreshEnabled (value: bool) (x: ViewElement) = x.IsPullToRefreshEnabled(value)
    /// Adjusts the IsRefreshing property in the visual element
    let isRefreshing (value: bool) (x: ViewElement) = x.IsRefreshing(value)
    /// Adjusts the RefreshCommand property in the visual element
    let refreshCommand (value: unit -> unit) (x: ViewElement) = x.RefreshCommand(value)
    /// Adjusts the ListView_SelectedItem property in the visual element
    let listView_SelectedItem (value: int option) (x: ViewElement) = x.ListView_SelectedItem(value)
    /// Adjusts the ListView_SeparatorVisibility property in the visual element
    let listView_SeparatorVisibility (value: Xamarin.Forms.SeparatorVisibility) (x: ViewElement) = x.ListView_SeparatorVisibility(value)
    /// Adjusts the ListView_SeparatorColor property in the visual element
    let listView_SeparatorColor (value: Xamarin.Forms.Color) (x: ViewElement) = x.ListView_SeparatorColor(value)
    /// Adjusts the ListView_ItemAppearing property in the visual element
    let listView_ItemAppearing (value: int -> unit) (x: ViewElement) = x.ListView_ItemAppearing(value)
    /// Adjusts the ListView_ItemDisappearing property in the visual element
    let listView_ItemDisappearing (value: int -> unit) (x: ViewElement) = x.ListView_ItemDisappearing(value)
    /// Adjusts the ListView_ItemSelected property in the visual element
    let listView_ItemSelected (value: int option -> unit) (x: ViewElement) = x.ListView_ItemSelected(value)
    /// Adjusts the ListView_ItemTapped property in the visual element
    let listView_ItemTapped (value: int -> unit) (x: ViewElement) = x.ListView_ItemTapped(value)
    /// Adjusts the ListView_Refreshing property in the visual element
    let listView_Refreshing (value: unit -> unit) (x: ViewElement) = x.ListView_Refreshing(value)
    /// Adjusts the SelectionMode property in the visual element
    let selectionMode (value: Xamarin.Forms.ListViewSelectionMode) (x: ViewElement) = x.SelectionMode(value)
    /// Adjusts the ListViewGrouped_ItemsSource property in the visual element
    let listViewGrouped_ItemsSource (value: (string * ViewElement * ViewElement list) list) (x: ViewElement) = x.ListViewGrouped_ItemsSource(value)
    /// Adjusts the ListViewGrouped_ShowJumpList property in the visual element
    let listViewGrouped_ShowJumpList (value: bool) (x: ViewElement) = x.ListViewGrouped_ShowJumpList(value)
    /// Adjusts the ListViewGrouped_SelectedItem property in the visual element
    let listViewGrouped_SelectedItem (value: (int * int) option) (x: ViewElement) = x.ListViewGrouped_SelectedItem(value)
    /// Adjusts the SeparatorVisibility property in the visual element
    let separatorVisibility (value: Xamarin.Forms.SeparatorVisibility) (x: ViewElement) = x.SeparatorVisibility(value)
    /// Adjusts the SeparatorColor property in the visual element
    let separatorColor (value: Xamarin.Forms.Color) (x: ViewElement) = x.SeparatorColor(value)
    /// Adjusts the ListViewGrouped_ItemAppearing property in the visual element
    let listViewGrouped_ItemAppearing (value: int * int option -> unit) (x: ViewElement) = x.ListViewGrouped_ItemAppearing(value)
    /// Adjusts the ListViewGrouped_ItemDisappearing property in the visual element
    let listViewGrouped_ItemDisappearing (value: int * int option -> unit) (x: ViewElement) = x.ListViewGrouped_ItemDisappearing(value)
    /// Adjusts the ListViewGrouped_ItemSelected property in the visual element
    let listViewGrouped_ItemSelected (value: (int * int) option -> unit) (x: ViewElement) = x.ListViewGrouped_ItemSelected(value)
    /// Adjusts the ListViewGrouped_ItemTapped property in the visual element
    let listViewGrouped_ItemTapped (value: int * int -> unit) (x: ViewElement) = x.ListViewGrouped_ItemTapped(value)
    /// Adjusts the Refreshing property in the visual element
    let refreshing (value: unit -> unit) (x: ViewElement) = x.Refreshing(value)
